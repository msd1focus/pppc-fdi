package app.fpp.model.views.budgetsetting;

import app.fpp.model.entities.budgetsetting.BudgetCustTranImpl;

import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 12 13:56:42 ICT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class countBudgetTranViewRowImpl extends ViewRowImpl {


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        BudgetCustomerId {
            public Object get(countBudgetTranViewRowImpl obj) {
                return obj.getBudgetCustomerId();
            }

            public void put(countBudgetTranViewRowImpl obj, Object value) {
                obj.setBudgetCustomerId((Number)value);
            }
        }
        ,
        Percentage {
            public Object get(countBudgetTranViewRowImpl obj) {
                return obj.getPercentage();
            }

            public void put(countBudgetTranViewRowImpl obj, Object value) {
                obj.setPercentage((Number)value);
            }
        }
        ,
        Amount {
            public Object get(countBudgetTranViewRowImpl obj) {
                return obj.getAmount();
            }

            public void put(countBudgetTranViewRowImpl obj, Object value) {
                obj.setAmount((Number)value);
            }
        }
        ,
        YearlyBudgetAmount {
            public Object get(countBudgetTranViewRowImpl obj) {
                return obj.getYearlyBudgetAmount();
            }

            public void put(countBudgetTranViewRowImpl obj, Object value) {
                obj.setYearlyBudgetAmount((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(countBudgetTranViewRowImpl object);

        public abstract void put(countBudgetTranViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int BUDGETCUSTOMERID = AttributesEnum.BudgetCustomerId.index();
    public static final int PERCENTAGE = AttributesEnum.Percentage.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int YEARLYBUDGETAMOUNT = AttributesEnum.YearlyBudgetAmount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public countBudgetTranViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute BudgetCustomerId.
     * @return the BudgetCustomerId
     */
    public Number getBudgetCustomerId() {
        return (Number) getAttributeInternal(BUDGETCUSTOMERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BudgetCustomerId.
     * @param value value to set the  BudgetCustomerId
     */
    public void setBudgetCustomerId(Number value) {
        setAttributeInternal(BUDGETCUSTOMERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Percentage.
     * @return the Percentage
     */
    public Number getPercentage() {
        return (Number) getAttributeInternal(PERCENTAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Percentage.
     * @param value value to set the  Percentage
     */
    public void setPercentage(Number value) {
        setAttributeInternal(PERCENTAGE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Amount.
     * @return the Amount
     */
    public Number getAmount() {
        return (Number) getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Amount.
     * @param value value to set the  Amount
     */
    public void setAmount(Number value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute YearlyBudgetAmount.
     * @return the YearlyBudgetAmount
     */
    public Number getYearlyBudgetAmount() {
        return (Number) getAttributeInternal(YEARLYBUDGETAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute YearlyBudgetAmount.
     * @param value value to set the  YearlyBudgetAmount
     */
    public void setYearlyBudgetAmount(Number value) {
        setAttributeInternal(YEARLYBUDGETAMOUNT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


}
