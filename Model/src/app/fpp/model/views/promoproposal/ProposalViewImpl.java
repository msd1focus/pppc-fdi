package app.fpp.model.views.promoproposal;

import app.fpp.model.views.promoproposal.common.ProposalView;

import java.sql.ResultSet;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 16 23:41:04 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProposalViewImpl extends ViewObjectImpl implements ProposalView {
    /**
     * This is the default constructor (do not remove).
     */
    public ProposalViewImpl() {
    }
    /**Method to revert changes of current row
     * @param curRow
     */
    public void revertChangesCurrentRow(Row curRow) {
        if (curRow != null) {
            curRow.refresh(Row.REFRESH_UNDO_CHANGES | Row.REFRESH_WITH_DB_FORGET_CHANGES);
        }
    }
    /**Method to check whether row should be removed or not 
     * If it is new - removed
     * If old one- Undo Changes
     * */
    public void rollbackPartial() {
        ViewObject proposalVo = this;
        RowSetIterator deptIter = proposalVo.createRowSetIterator(null);
        revertChangesCurrentRow(deptIter.getCurrentRow());
        //this.executeQuery();
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params,
                                             int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc,
                                                 ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * Returns the bind variable value for compId.
     * @return bind variable value for compId
     */
    public String getcompId() {
        return (String)getNamedWhereClauseParam("compId");
    }

    /**
     * Sets <code>value</code> for bind variable compId.
     * @param value value to bind as compId
     */
    public void setcompId(String value) {
        setNamedWhereClauseParam("compId", value);
    }

    /**
     * Returns the bind variable value for usrName.
     * @return bind variable value for usrName
     */
    public String getusrName() {
        return (String)getNamedWhereClauseParam("usrName");
    }

    /**
     * Sets <code>value</code> for bind variable usrName.
     * @param value value to bind as usrName
     */
    public void setusrName(String value) {
        setNamedWhereClauseParam("usrName", value);
    }
    
    public void setRowState(){   
        Row row = this.getCurrentRow();
        row.setNewRowState(Row.STATUS_NEW);
    }
}
