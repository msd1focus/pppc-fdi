package app.fpp.model.views.confirmation.dcv;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 23 17:59:09 ICT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CheckModRealisasiDcvRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ModifierName {
            public Object get(CheckModRealisasiDcvRowImpl obj) {
                return obj.getModifierName();
            }

            public void put(CheckModRealisasiDcvRowImpl obj, Object value) {
                obj.setModifierName((String)value);
            }
        }
        ,
        ModifierOriginal {
            public Object get(CheckModRealisasiDcvRowImpl obj) {
                return obj.getModifierOriginal();
            }

            public void put(CheckModRealisasiDcvRowImpl obj, Object value) {
                obj.setModifierOriginal((String)value);
            }
        }
        ,
        AmtInv {
            public Object get(CheckModRealisasiDcvRowImpl obj) {
                return obj.getAmtInv();
            }

            public void put(CheckModRealisasiDcvRowImpl obj, Object value) {
                obj.setAmtInv((Number)value);
            }
        }
        ,
        NoPp {
            public Object get(CheckModRealisasiDcvRowImpl obj) {
                return obj.getNoPp();
            }

            public void put(CheckModRealisasiDcvRowImpl obj, Object value) {
                obj.setNoPp((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(CheckModRealisasiDcvRowImpl object);

        public abstract void put(CheckModRealisasiDcvRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int MODIFIERNAME = AttributesEnum.ModifierName.index();
    public static final int MODIFIERORIGINAL = AttributesEnum.ModifierOriginal.index();
    public static final int AMTINV = AttributesEnum.AmtInv.index();
    public static final int NOPP = AttributesEnum.NoPp.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CheckModRealisasiDcvRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ModifierName.
     * @return the ModifierName
     */
    public String getModifierName() {
        return (String) getAttributeInternal(MODIFIERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ModifierName.
     * @param value value to set the  ModifierName
     */
    public void setModifierName(String value) {
        setAttributeInternal(MODIFIERNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ModifierOriginal.
     * @return the ModifierOriginal
     */
    public String getModifierOriginal() {
        return (String) getAttributeInternal(MODIFIERORIGINAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ModifierOriginal.
     * @param value value to set the  ModifierOriginal
     */
    public void setModifierOriginal(String value) {
        setAttributeInternal(MODIFIERORIGINAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AmtInv.
     * @return the AmtInv
     */
    public Number getAmtInv() {
        return (Number) getAttributeInternal(AMTINV);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AmtInv.
     * @param value value to set the  AmtInv
     */
    public void setAmtInv(Number value) {
        setAttributeInternal(AMTINV, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NoPp.
     * @return the NoPp
     */
    public String getNoPp() {
        return (String) getAttributeInternal(NOPP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NoPp.
     * @param value value to set the  NoPp
     */
    public void setNoPp(String value) {
        setAttributeInternal(NOPP, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
