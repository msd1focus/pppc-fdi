package app.fpp.model.views.masterdata.ebs;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 17 16:40:28 ICT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BucketViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ItemId {
            public Object get(BucketViewRowImpl obj) {
                return obj.getItemId();
            }

            public void put(BucketViewRowImpl obj, Object value) {
                obj.setItemId((Number)value);
            }
        }
        ,
        Item {
            public Object get(BucketViewRowImpl obj) {
                return obj.getItem();
            }

            public void put(BucketViewRowImpl obj, Object value) {
                obj.setItem((String)value);
            }
        }
        ,
        Bucket {
            public Object get(BucketViewRowImpl obj) {
                return obj.getBucket();
            }

            public void put(BucketViewRowImpl obj, Object value) {
                obj.setBucket((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(BucketViewRowImpl object);

        public abstract void put(BucketViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int ITEM = AttributesEnum.Item.index();
    public static final int BUCKET = AttributesEnum.Bucket.index();

    /**
     * This is the default constructor (do not remove).
     */
    public BucketViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ItemId.
     * @return the ItemId
     */
    public Number getItemId() {
        return (Number) getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemId.
     * @param value value to set the  ItemId
     */
    public void setItemId(Number value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Item.
     * @return the Item
     */
    public String getItem() {
        return (String) getAttributeInternal(ITEM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Item.
     * @param value value to set the  Item
     */
    public void setItem(String value) {
        setAttributeInternal(ITEM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Bucket.
     * @return the Bucket
     */
    public String getBucket() {
        return (String) getAttributeInternal(BUCKET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Bucket.
     * @param value value to set the  Bucket
     */
    public void setBucket(String value) {
        setAttributeInternal(BUCKET, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
