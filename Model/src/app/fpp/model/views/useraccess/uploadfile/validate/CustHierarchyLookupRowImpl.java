package app.fpp.model.views.useraccess.uploadfile.validate;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 13 10:44:32 ICT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustHierarchyLookupRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CustRegion {
            public Object get(CustHierarchyLookupRowImpl obj) {
                return obj.getCustRegion();
            }

            public void put(CustHierarchyLookupRowImpl obj, Object value) {
                obj.setCustRegion((String)value);
            }
        }
        ,
        CustArea {
            public Object get(CustHierarchyLookupRowImpl obj) {
                return obj.getCustArea();
            }

            public void put(CustHierarchyLookupRowImpl obj, Object value) {
                obj.setCustArea((String)value);
            }
        }
        ,
        CustLoc {
            public Object get(CustHierarchyLookupRowImpl obj) {
                return obj.getCustLoc();
            }

            public void put(CustHierarchyLookupRowImpl obj, Object value) {
                obj.setCustLoc((String)value);
            }
        }
        ,
        CustType {
            public Object get(CustHierarchyLookupRowImpl obj) {
                return obj.getCustType();
            }

            public void put(CustHierarchyLookupRowImpl obj, Object value) {
                obj.setCustType((String)value);
            }
        }
        ,
        CustGroup {
            public Object get(CustHierarchyLookupRowImpl obj) {
                return obj.getCustGroup();
            }

            public void put(CustHierarchyLookupRowImpl obj, Object value) {
                obj.setCustGroup((String)value);
            }
        }
        ,
        CustId {
            public Object get(CustHierarchyLookupRowImpl obj) {
                return obj.getCustId();
            }

            public void put(CustHierarchyLookupRowImpl obj, Object value) {
                obj.setCustId((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(CustHierarchyLookupRowImpl object);

        public abstract void put(CustHierarchyLookupRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CUSTREGION = AttributesEnum.CustRegion.index();
    public static final int CUSTAREA = AttributesEnum.CustArea.index();
    public static final int CUSTLOC = AttributesEnum.CustLoc.index();
    public static final int CUSTTYPE = AttributesEnum.CustType.index();
    public static final int CUSTGROUP = AttributesEnum.CustGroup.index();
    public static final int CUSTID = AttributesEnum.CustId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CustHierarchyLookupRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CustRegion.
     * @return the CustRegion
     */
    public String getCustRegion() {
        return (String) getAttributeInternal(CUSTREGION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustRegion.
     * @param value value to set the  CustRegion
     */
    public void setCustRegion(String value) {
        setAttributeInternal(CUSTREGION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustArea.
     * @return the CustArea
     */
    public String getCustArea() {
        return (String) getAttributeInternal(CUSTAREA);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustArea.
     * @param value value to set the  CustArea
     */
    public void setCustArea(String value) {
        setAttributeInternal(CUSTAREA, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustLoc.
     * @return the CustLoc
     */
    public String getCustLoc() {
        return (String) getAttributeInternal(CUSTLOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustLoc.
     * @param value value to set the  CustLoc
     */
    public void setCustLoc(String value) {
        setAttributeInternal(CUSTLOC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustType.
     * @return the CustType
     */
    public String getCustType() {
        return (String) getAttributeInternal(CUSTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustType.
     * @param value value to set the  CustType
     */
    public void setCustType(String value) {
        setAttributeInternal(CUSTTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustGroup.
     * @return the CustGroup
     */
    public String getCustGroup() {
        return (String) getAttributeInternal(CUSTGROUP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustGroup.
     * @param value value to set the  CustGroup
     */
    public void setCustGroup(String value) {
        setAttributeInternal(CUSTGROUP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CustId.
     * @return the CustId
     */
    public Number getCustId() {
        return (Number) getAttributeInternal(CUSTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CustId.
     * @param value value to set the  CustId
     */
    public void setCustId(Number value) {
        setAttributeInternal(CUSTID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
