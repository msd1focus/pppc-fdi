package app.fpp.model.views.useraccess.uploadfile.validate;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 15 17:43:35 ICT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UserUploadValidateLogRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        UserUploadLogId {
            public Object get(UserUploadValidateLogRowImpl obj) {
                return obj.getUserUploadLogId();
            }

            public void put(UserUploadValidateLogRowImpl obj, Object value) {
                obj.setUserUploadLogId((Number)value);
            }
        }
        ,
        ValMsg {
            public Object get(UserUploadValidateLogRowImpl obj) {
                return obj.getValMsg();
            }

            public void put(UserUploadValidateLogRowImpl obj, Object value) {
                obj.setValMsg((String)value);
            }
        }
        ,
        ValExecDate {
            public Object get(UserUploadValidateLogRowImpl obj) {
                return obj.getValExecDate();
            }

            public void put(UserUploadValidateLogRowImpl obj, Object value) {
                obj.setValExecDate((Date)value);
            }
        }
        ,
        ErrValNum {
            public Object get(UserUploadValidateLogRowImpl obj) {
                return obj.getErrValNum();
            }

            public void put(UserUploadValidateLogRowImpl obj, Object value) {
                obj.setErrValNum((Long)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(UserUploadValidateLogRowImpl object);

        public abstract void put(UserUploadValidateLogRowImpl object,
                                 Object value);

        public int index() {
            return UserUploadValidateLogRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return UserUploadValidateLogRowImpl.AttributesEnum.firstIndex() + UserUploadValidateLogRowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = UserUploadValidateLogRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int USERUPLOADLOGID = AttributesEnum.UserUploadLogId.index();
    public static final int VALMSG = AttributesEnum.ValMsg.index();
    public static final int VALEXECDATE = AttributesEnum.ValExecDate.index();
    public static final int ERRVALNUM = AttributesEnum.ErrValNum.index();

    /**
     * This is the default constructor (do not remove).
     */
    public UserUploadValidateLogRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute UserUploadLogId.
     * @return the UserUploadLogId
     */
    public Number getUserUploadLogId() {
        return (Number) getAttributeInternal(USERUPLOADLOGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UserUploadLogId.
     * @param value value to set the  UserUploadLogId
     */
    public void setUserUploadLogId(Number value) {
        setAttributeInternal(USERUPLOADLOGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ValMsg.
     * @return the ValMsg
     */
    public String getValMsg() {
        return (String) getAttributeInternal(VALMSG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ValMsg.
     * @param value value to set the  ValMsg
     */
    public void setValMsg(String value) {
        setAttributeInternal(VALMSG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ValExecDate.
     * @return the ValExecDate
     */
    public Date getValExecDate() {
        return (Date) getAttributeInternal(VALEXECDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ValExecDate.
     * @param value value to set the  ValExecDate
     */
    public void setValExecDate(Date value) {
        setAttributeInternal(VALEXECDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ErrValNum.
     * @return the ErrValNum
     */
    public Long getErrValNum() {
        return (Long) getAttributeInternal(ERRVALNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ErrValNum.
     * @param value value to set the  ErrValNum
     */
    public void setErrValNum(Long value) {
        setAttributeInternal(ERRVALNUM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
