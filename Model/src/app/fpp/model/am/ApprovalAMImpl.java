package app.fpp.model.am;

import app.fpp.adfextensions.CustomApplicationModuleImpl;
import app.fpp.model.am.common.ApprovalAM;
import app.fpp.model.views.approval.ApprovalForwardReceiverProposalViewImpl;
import app.fpp.model.views.approval.ApprovalForwardRejectReceiverProposalViewImpl;
import app.fpp.model.views.approval.ApprovalReceiverApproveProposalViewImpl;
import app.fpp.model.views.approval.ApprovalReceiverRejectProposalViewImpl;
import app.fpp.model.views.approval.CheckRoleProposalCreatorViewImpl;
import app.fpp.model.views.approval.DocApprovalViewImpl;
import app.fpp.model.views.approval.ProposalApprovalViewImpl;
import app.fpp.model.views.masterdata.ebs.FcsViewCategCombinationViewImpl;
import app.fpp.model.views.promoproposal.BiayaViewImpl;
import app.fpp.model.views.promoproposal.DiscountViewImpl;
import app.fpp.model.views.promoproposal.ProdukItemViewImpl;
import app.fpp.model.views.promoproposal.ProdukVariantViewImpl;
import app.fpp.model.views.promoproposal.PromoBonusVariantViewImpl;
import app.fpp.model.views.promoproposal.PromoBonusViewImpl;
import app.fpp.model.views.promoproposal.PromoProdukViewImpl;
import app.fpp.model.views.promoproposal.TargetViewImpl;
import app.fpp.model.views.promoproposal.validation.ProdVariantValidationViewImpl;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 12 10:27:18 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ApprovalAMImpl extends CustomApplicationModuleImpl implements ApprovalAM {

    /**
     * This is the default constructor (do not remove).
     */
    //private final Integer FIRSTSTEPINFLOW = 1;
    private static final String finalReason = "Finished approval";

    public ApprovalAMImpl() {
    }

    public void setLoginToSession_ApprovalAM(String key, String val) {
        this.setLoginToSession(key, val);
    }

    public void approveDocApproval(String propId, String docNo,
                                   String docStatus, String promoDtFrom,
                                   String promoDtTo, String docRegion,
                                   String usrRole, String userNm,
                                   String aprvlCodeRun, String idDocAprvl,
                                   String reasonDocAprvl, String usrAction,
                                   String propDt) {

        //Retrieve proposal receiver role
        ViewObjectImpl proposalReceiver =
            this.getApprovalReceiverApproveProposalView1();
        proposalReceiver.setNamedWhereClauseParam("aprvlCode", aprvlCodeRun);
        proposalReceiver.setNamedWhereClauseParam("usrName", userNm);
        proposalReceiver.executeQuery();

        if (proposalReceiver.getEstimatedRowCount() > 0) {
            //IF USER NOT THE LATEST ROLE IN APPROVAL FLOW
            Row propReceiverRow = proposalReceiver.first();
            String roleName = (String)propReceiverRow.getAttribute("RoleName");
            String usrName = (String)propReceiverRow.getAttribute("UserName");
            String aprvlCode =
                (String)propReceiverRow.getAttribute("AprvlCode");

            PreparedStatement addDocApprovalStmt = null;

            try {
                String SQL =
                    "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE) " +
                    "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" + propId +
                    "), '" + docNo + "', '" + docStatus +
                    "', TO_DATE(UPPER('" + promoDtFrom +
                    "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" + promoDtTo +
                    "'), 'DD-MON-YYYY'), '" + roleName + "', '" + docRegion +
                    "', '" + aprvlCode + "', '" + userNm + "', SYSDATE, '" +
                    usrName + "', TO_TIMESTAMP(UPPER('" + propDt +
                    "'), 'DD-MON-YYYY HH24:MI:SS'))";
                addDocApprovalStmt =
                        getDBTransaction().createPreparedStatement(SQL, 1);
                addDocApprovalStmt.executeUpdate();
                getDBTransaction().commit();
            } catch (SQLException e) {
                throw new JboException(e.getLocalizedMessage());
            } finally {
                //getDBTransaction().commit();
                if (addDocApprovalStmt != null) {
                    try {
                        addDocApprovalStmt.close();
                    } catch (Exception e) {
                        throw new JboException(e.getLocalizedMessage());
                    }
                }
            }

        } else {
            //IF USER IS THE LATEST ROLE IN APPROVAL FLOW
            PreparedStatement addDocFinishApprovalStmt = null;

            try {
                String SQLFinish =
                    "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ACTION, ACTION_DATE, ACTION_BY, REASON, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE) " +
                    "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" + propId +
                    "), '" + docNo + "', 'ACTIVE', TO_DATE(UPPER('" +
                    promoDtFrom + "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" +
                    promoDtTo +
                    "'), 'DD-MON-YYYY'), 'FINISHED', SYSDATE  + INTERVAL '1' SECOND, '" +
                    userNm + "', '" + finalReason + "', '" + usrRole + "', '" +
                    docRegion + "', '" + aprvlCodeRun + "', '" + userNm +
                    "', SYSDATE, '" + userNm + "', TO_TIMESTAMP(UPPER('" + propDt +
                    "'), 'DD-MON-YYYY HH24:MI:SS'))";

                addDocFinishApprovalStmt =
                        getDBTransaction().createPreparedStatement(SQLFinish,
                                                                   1);
                addDocFinishApprovalStmt.executeUpdate();
                getDBTransaction().commit();
            } catch (SQLException e) {
                throw new JboException(e.getLocalizedMessage());
            } finally {
                //getDBTransaction().commit();
                if (addDocFinishApprovalStmt != null) {
                    try {
                        addDocFinishApprovalStmt.close();
                    } catch (Exception e) {
                        throw new JboException(e.getLocalizedMessage());
                    }
                }
            }
        }
    }

    public void rejectDocApproval(String propId, String docNo,
                                  String docStatus, String promoDtFrom,
                                  String promoDtTo, String docRegion,
                                  String usrRole, String userNm,
                                  String aprvlCodeRun, String idDocAprvl,
                                  String reasonDocAprvl, String usrAction,
                                  String propDt) {
        //Retrieve proposal receiver role
        ViewObjectImpl proposalReceiver =
            this.getApprovalReceiverRejectProposalView1();
        proposalReceiver.setNamedWhereClauseParam("aprvlCode", aprvlCodeRun);
        proposalReceiver.setNamedWhereClauseParam("usrRole", usrRole);
        proposalReceiver.setNamedWhereClauseParam("noProp", docNo);
        proposalReceiver.executeQuery();

        if (proposalReceiver.getEstimatedRowCount() > 0) {
            Row propReceiverRow = proposalReceiver.first();
            String usrName = (String)propReceiverRow.getAttribute("UserName");
            String roleName = (String)propReceiverRow.getAttribute("RoleName");
            String aprvlCode =
                (String)propReceiverRow.getAttribute("AprvlCode");
            String isCreator =
                (String)propReceiverRow.getAttribute("IsCreator");
            
            /*
            Number stepSeqNum =
                (Number)propReceiverRow.getAttribute("StepSequence");
            Integer stepSeq = stepSeqNum.intValue();
            // Jika bukan step pertama di flow approval
            if (!stepSeq.equals(FIRSTSTEPINFLOW)) {
            */
            
            // Jika bukan creator
            if (isCreator.equalsIgnoreCase("F")) {
                //Role proposal creator
                ViewObjectImpl isNextStepCreator =
                    this.getCheckRoleProposalCreatorView1();
                isNextStepCreator.setNamedWhereClauseParam("aprvlCd",
                                                           aprvlCodeRun);
                isNextStepCreator.setNamedWhereClauseParam("usrRole",
                                                           roleName);
                isNextStepCreator.setNamedWhereClauseParam("propId",
                                                           new Number(Integer.parseInt(propId)));
                isNextStepCreator.executeQuery();

                if (isNextStepCreator.getEstimatedRowCount() == 0) {
                    PreparedStatement rejectDocApprovalStmt = null;

                    try {
                        String SQL =
                            "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE) " +
                            "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" +
                            propId + "), '" + docNo + "', '" + docStatus +
                            "', TO_DATE(UPPER('" + promoDtFrom +
                            "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" +
                            promoDtTo + "'), 'DD-MON-YYYY'), '" + roleName +
                            "', '" + docRegion + "', '" + aprvlCode + "', '" +
                            userNm + "', SYSDATE, '" + usrName +
                            "', TO_TIMESTAMP(UPPER('" + propDt +
                            "'), 'DD-MON-YYYY HH24:MI:SS'))";
                        rejectDocApprovalStmt =
                                getDBTransaction().createPreparedStatement(SQL,
                                                                           1);
                        rejectDocApprovalStmt.executeUpdate();
                        getDBTransaction().commit();
                    } catch (SQLException e) {
                        throw new JboException(e.getMessage());
                    } finally {
                        //getDBTransaction().commit();
                        if (rejectDocApprovalStmt != null) {
                            try {
                                rejectDocApprovalStmt.close();
                            } catch (Exception e) {
                                throw new JboException(e.getLocalizedMessage());
                            }
                        }
                    }
                } else {
                    try {
                        getDBTransaction().commit();
                    } catch (Exception e) {
                        throw new JboException(e.getLocalizedMessage());
                    }
                }
            } else {
                try {
                    getDBTransaction().commit();
                } catch (Exception e) {
                    throw new JboException(e.getLocalizedMessage());
                }
            }
        } else {
            getDBTransaction().rollback();
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>User penerima pada flow approval tidak ditemukan.</p>");
            message.append("<p>Proses reject tidak bisa dilakukan.</p>");
            message.append("</body></html>");
            throw new JboException(message.toString());
            //throw new JboException("User penerima pada flow approval tidak ditemukan.");
        }
    }
    
    public void forwardDocApproval(String propId, String docNo,
                                   String docStatus, String promoDtFrom,
                                   String promoDtTo, String docRegion,
                                   String usrRole, String userNm,
                                   String aprvlCodeRun, String idDocAprvl,
                                   String reasonDocAprvl, String usrAction,
                                   String propDt) {

        //Retrieve proposal receiver role
        ViewObjectImpl proposalReceiver =
            this.getApprovalForwardReceiverProposalView1();
        proposalReceiver.setNamedWhereClauseParam("userName", userNm);
        proposalReceiver.executeQuery();

        if (proposalReceiver.getEstimatedRowCount() > 0) {
            Row propForwardReceiverRow = proposalReceiver.first();
            String roleName = (String)propForwardReceiverRow.getAttribute("Role");
            String usrName = (String)propForwardReceiverRow.getAttribute("UserName");

            PreparedStatement addDocApprovalStmt = null;

            try {
                String SQL =
                    "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE, FORWARD_TO) " +
                    "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" + propId +
                    "), '" + docNo + "', '" + docStatus +
                    "', TO_DATE(UPPER('" + promoDtFrom +
                    "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" + promoDtTo +
                    "'), 'DD-MON-YYYY'), '" + roleName + "', '" + docRegion +
                    "', '" + aprvlCodeRun + "', '" + userNm + "', SYSDATE, '" +
                    usrName + "', TO_TIMESTAMP(UPPER('" + propDt +
                    "'), 'DD-MON-YYYY HH24:MI:SS'), '" + usrName + "')";
                addDocApprovalStmt =
                        getDBTransaction().createPreparedStatement(SQL, 1);
                addDocApprovalStmt.executeUpdate();
                getDBTransaction().commit();
            } catch (SQLException e) {
                throw new JboException(e.getLocalizedMessage());
            } finally {
                //getDBTransaction().commit();
                if (addDocApprovalStmt != null) {
                    try {
                        addDocApprovalStmt.close();
                    } catch (Exception e) {
                        throw new JboException(e.getLocalizedMessage());
                    }
                }
            }

        } else {
            // ROLE FORWARD NOT FOUND
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>User penerima proses forward tidak ditemukan.</p>");
            message.append("<p>Proses forward tidak bisa dilakukan.</p>");
            message.append("</body></html>");
            throw new JboException(message.toString());
        }
    }

    public void rejectFwdDocApproval(String propId, String docNo,
                                  String docStatus, String promoDtFrom,
                                  String promoDtTo, String docRegion,
                                  String usrRole, String userNm,
                                  String aprvlCodeRun, String idDocAprvl,
                                  String reasonDocAprvl, String usrAction,
                                  String propDt) {
        
        //Retrieve proposal receiver role
        ViewObjectImpl proposalReceiver =
            this.getApprovalForwardRejectReceiverProposalView1();
        proposalReceiver.setNamedWhereClauseParam("aprvlCode", aprvlCodeRun);
        proposalReceiver.setNamedWhereClauseParam("noProp", docNo);
        proposalReceiver.executeQuery();

        if (proposalReceiver.getEstimatedRowCount() > 0) {
            Row propReceiverRow = proposalReceiver.first();
            String usrName = (String)propReceiverRow.getAttribute("ActionBy");
            String roleName = (String)propReceiverRow.getAttribute("RoleName");
            PreparedStatement rejectDocApprovalStmt = null;

            try {
                String SQL =
                    "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE) " +
                    "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" +
                    propId + "), '" + docNo + "', '" + docStatus +
                    "', TO_DATE(UPPER('" + promoDtFrom +
                    "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" +
                    promoDtTo + "'), 'DD-MON-YYYY'), '" + roleName +
                    "', '" + docRegion + "', '" + aprvlCodeRun + "', '" +
                    userNm + "', SYSDATE, '" + usrName +
                    "', TO_TIMESTAMP(UPPER('" + propDt +
                    "'), 'DD-MON-YYYY HH24:MI:SS'))";
                rejectDocApprovalStmt =
                        getDBTransaction().createPreparedStatement(SQL,
                                                                   1);
                rejectDocApprovalStmt.executeUpdate();
                getDBTransaction().commit();
            } catch (SQLException e) {
                throw new JboException(e.getLocalizedMessage());
            } finally {
                //getDBTransaction().commit();
                if (rejectDocApprovalStmt != null) {
                    try {
                        rejectDocApprovalStmt.close();
                    } catch (Exception e) {
                        throw new JboException(e.getLocalizedMessage());
                    }
                }
            }                
        } else {
            getDBTransaction().rollback();
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>User penerima pada flow approval tidak ditemukan.</p>");
            message.append("<p>Proses reject tidak bisa dilakukan.</p>");
            message.append("</body></html>");
            throw new JboException(message.toString());
            //throw new JboException("User penerima pada flow approval tidak ditemukan.");
        }
    }
    
    public void cancelDocPp(String propId, String docNo,
                                   String docStatus, String promoDtFrom,
                                   String promoDtTo, String docRegion,
                                   String usrRole, String userNm,
                                   String aprvlCodeRun, String idDocAprvl,
                                   String cancelReason, String usrAction,
                                   String propDt) {

        PreparedStatement cancelDocPpStmt = null;

        try {
            /* INSERT NEW ROW
            String SQLFinish =
                "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ACTION, ACTION_DATE, ACTION_BY, REASON, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE) " +
                "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" + propId +
                "), '" + docNo + "', 'ACTIVE', TO_DATE(UPPER('" +
                promoDtFrom + "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" +
                promoDtTo +
                "'), 'DD-MON-YYYY'), 'CANCELED', SYSDATE  + INTERVAL '1' SECOND, '" +
                userNm + "', '" + cancelReason + "', '" + usrRole + "', '" +
                docRegion + "', '" + aprvlCodeRun + "', '" + userNm +
                "', SYSDATE, '" + userNm + "', TO_TIMESTAMP(UPPER('" + propDt +
                "'), 'DD-MON-YYYY HH24:MI:SS'))";
            */

            String SQLFinish =
                "UPDATE DOC_APPROVAL SET ACTION = 'CANCELED', ACTION_DATE = SYSDATE, ACTION_BY = '" + userNm + "', REASON = '" + cancelReason + "'" +
                "WHERE PROPOSAL_ID = " + propId + " AND ACTION IS NULL AND ACTION_DATE IS NULL AND ACTION_BY IS NULL AND REASON IS NULL";

            cancelDocPpStmt =
                    getDBTransaction().createPreparedStatement(SQLFinish,
                                                               1);
            cancelDocPpStmt.executeUpdate();
            getDBTransaction().commit();
        } catch (SQLException e) {
            throw new JboException(e.getLocalizedMessage());
        } finally {
            //getDBTransaction().commit();
            if (cancelDocPpStmt != null) {
                try {
                    cancelDocPpStmt.close();
                } catch (Exception e) {
                    throw new JboException(e.getLocalizedMessage());
                }
            }
        }
    }
    
    public void unApproveDocPp(String propId, String docNo,
                                   String docStatus, String promoDtFrom,
                                   String promoDtTo, String docRegion,
                                   String usrRole, String userNm,
                                   String aprvlCodeRun, String idDocAprvl,
                                   String cancelReason, String usrAction,
                                   String propDt) {

        PreparedStatement unApproveDocPpStmt = null;
        PreparedStatement updateFinishDocPpStmt = null;

        try {
            String SQLUpdateFinish =
                "UPDATE DOC_APPROVAL SET ACTION = 'UN-APPROVED', STATUS = 'INPROCESS', ACTION_DATE = SYSDATE, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATED_BY = '" + userNm + "', REASON = 'Un-Approved approval'" +
                "WHERE PROPOSAL_ID = " + propId + " AND ACTION = 'FINISHED'";
            
            updateFinishDocPpStmt =
                    getDBTransaction().createPreparedStatement(SQLUpdateFinish,
                                                               1);
            updateFinishDocPpStmt.executeUpdate();
            
            String SQLFinish =
            "INSERT INTO DOC_APPROVAL (DOC_APPROVAL_ID, PROPOSAL_ID, DOCUMENT_NO, STATUS, PROMO_DATE_FROM, PROMO_DATE_TO, ROLE_NAME, REGION, APRVL_CODE, CREATED_BY, CREATION_DATE, ACTION_TO, PROPOSAL_DATE) " +
            "VALUES (DOC_APPROVAL_SEQ.NEXTVAL, TO_NUMBER(" +
            propId + "), '" + docNo + "', '" + docStatus + "', TO_DATE(UPPER('" + promoDtFrom +
            "'), 'DD-MON-YYYY'), " + "TO_DATE(UPPER('" +
            promoDtTo + "'), 'DD-MON-YYYY'), '" + usrRole +
            "', '" + docRegion + "', '" + aprvlCodeRun + "', '" +
            userNm + "', SYSDATE, '" + userNm +
            "', TO_TIMESTAMP(UPPER('" + propDt +
            "'), 'DD-MON-YYYY HH24:MI:SS'))";
            
            unApproveDocPpStmt =
                    getDBTransaction().createPreparedStatement(SQLFinish,
                                                               1);
            unApproveDocPpStmt.executeUpdate();
            getDBTransaction().commit();
        } catch (SQLException e) {
            throw new JboException(e.getLocalizedMessage());
        } finally {
            //getDBTransaction().commit();
            if (unApproveDocPpStmt != null) {
                try {
                    unApproveDocPpStmt.close();
                } catch (Exception e) {
                    throw new JboException(e.getLocalizedMessage());
                }
            }
        }
    }

    /**
     * Container's getter for ProposalApprovalView1.
     * @return ProposalApprovalView1
     */
    public ViewObjectImpl getProposalApprovalView1() {
        return (ViewObjectImpl)findViewObject("ProposalApprovalView1");
    }

    /**
     * Container's getter for DocApprovalView1.
     * @return DocApprovalView1
     */
    public DocApprovalViewImpl getDocApprovalView1() {
        return (DocApprovalViewImpl)findViewObject("DocApprovalView1");
    }

    /**
     * Container's getter for ProposalApprovalDocApprovalFk1Link1.
     * @return ProposalApprovalDocApprovalFk1Link1
     */
    public ViewLinkImpl getProposalApprovalDocApprovalFk1Link1() {
        return (ViewLinkImpl)findViewLink("ProposalApprovalDocApprovalFk1Link1");
    }


    /**
     * Container's getter for ApprovalReceiverApproveProposalView1.
     * @return ApprovalReceiverApproveProposalView1
     */
    public ApprovalReceiverApproveProposalViewImpl getApprovalReceiverApproveProposalView1() {
        return (ApprovalReceiverApproveProposalViewImpl)findViewObject("ApprovalReceiverApproveProposalView1");
    }

    /**
     * Container's getter for ApprovalReceiverRejectProposalView1.
     * @return ApprovalReceiverRejectProposalView1
     */
    public ApprovalReceiverRejectProposalViewImpl getApprovalReceiverRejectProposalView1() {
        return (ApprovalReceiverRejectProposalViewImpl)findViewObject("ApprovalReceiverRejectProposalView1");
    }

    /**
     * Container's getter for CheckRoleProposalCreatorView1.
     * @return CheckRoleProposalCreatorView1
     */
    public ViewObjectImpl getCheckRoleProposalCreatorView1() {
        return (ViewObjectImpl)findViewObject("CheckRoleProposalCreatorView1");
    }

    /**
     * Container's getter for PromoProdukView1.
     * @return PromoProdukView1
     */
    public PromoProdukViewImpl getPromoProdukView1() {
        return (PromoProdukViewImpl)findViewObject("PromoProdukView1");
    }

    /**
     * Container's getter for PromoProdukProposalApprovalFk1Link1.
     * @return PromoProdukProposalApprovalFk1Link1
     */
    public ViewLinkImpl getPromoProdukProposalApprovalFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoProdukProposalApprovalFk1Link1");
    }

    /**
     * Container's getter for BiayaView1.
     * @return BiayaView1
     */
    public ViewObjectImpl getBiayaView1() {
        return (ViewObjectImpl)findViewObject("BiayaView1");
    }

    /**
     * Container's getter for BiayaPromoProdukFk1Link1.
     * @return BiayaPromoProdukFk1Link1
     */
    public ViewLinkImpl getBiayaPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("BiayaPromoProdukFk1Link1");
    }


    /**
     * Container's getter for DiscountView1.
     * @return DiscountView1
     */
    public ViewObjectImpl getDiscountView1() {
        return (ViewObjectImpl)findViewObject("DiscountView1");
    }

    /**
     * Container's getter for DiscountPromoProdukFk1Link1.
     * @return DiscountPromoProdukFk1Link1
     */
    public ViewLinkImpl getDiscountPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("DiscountPromoProdukFk1Link1");
    }

    /**
     * Container's getter for ProdukItemView1.
     * @return ProdukItemView1
     */
    public ViewObjectImpl getProdukItemView1() {
        return (ViewObjectImpl)findViewObject("ProdukItemView1");
    }

    /**
     * Container's getter for ProdukItemPromoProdukFk1Link1.
     * @return ProdukItemPromoProdukFk1Link1
     */
    public ViewLinkImpl getProdukItemPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("ProdukItemPromoProdukFk1Link1");
    }

    /**
     * Container's getter for ProdukVariantView1.
     * @return ProdukVariantView1
     */
    public ViewObjectImpl getProdukVariantView1() {
        return (ViewObjectImpl)findViewObject("ProdukVariantView1");
    }

    /**
     * Container's getter for ProdukVariantPromoProdukFk1Link1.
     * @return ProdukVariantPromoProdukFk1Link1
     */
    public ViewLinkImpl getProdukVariantPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("ProdukVariantPromoProdukFk1Link1");
    }


    /**
     * Container's getter for PromoBonusView1.
     * @return PromoBonusView1
     */
    public PromoBonusViewImpl getPromoBonusView1() {
        return (PromoBonusViewImpl)findViewObject("PromoBonusView1");
    }

    /**
     * Container's getter for PromoBonusPromoProdukFk1Link1.
     * @return PromoBonusPromoProdukFk1Link1
     */
    public ViewLinkImpl getPromoBonusPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoBonusPromoProdukFk1Link1");
    }

    /**
     * Container's getter for TargetView1.
     * @return TargetView1
     */
    public ViewObjectImpl getTargetView1() {
        return (ViewObjectImpl)findViewObject("TargetView1");
    }

    /**
     * Container's getter for TargetPromoProdukFk1Link1.
     * @return TargetPromoProdukFk1Link1
     */
    public ViewLinkImpl getTargetPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("TargetPromoProdukFk1Link1");
    }


    /**
     * Container's getter for PromoBonusProdItemView1.
     * @return PromoBonusProdItemView1
     */
    public ViewObjectImpl getPromoBonusProdItemView1() {
        return (ViewObjectImpl)findViewObject("PromoBonusProdItemView1");
    }

    /**
     * Container's getter for PromoBonusProdItemPromoBonusFk1Link1.
     * @return PromoBonusProdItemPromoBonusFk1Link1
     */
    public ViewLinkImpl getPromoBonusProdItemPromoBonusFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoBonusProdItemPromoBonusFk1Link1");
    }

    /**
     * Container's getter for PromoBonusVariantView1.
     * @return PromoBonusVariantView1
     */
    public ViewObjectImpl getPromoBonusVariantView1() {
        return (ViewObjectImpl)findViewObject("PromoBonusVariantView1");
    }

    /**
     * Container's getter for PromoBonusVariantPromoBonusFk1Link1.
     * @return PromoBonusVariantPromoBonusFk1Link1
     */
    public ViewLinkImpl getPromoBonusVariantPromoBonusFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoBonusVariantPromoBonusFk1Link1");
    }

    /**
     * Container's getter for AllProdukItemShuttleView1.
     * @return AllProdukItemShuttleView1
     */
    public ViewObjectImpl getAllProdukItemShuttleView1() {
        return (ViewObjectImpl)findViewObject("AllProdukItemShuttleView1");
    }

    /**
     * Container's getter for AllProdukVariantShuttleView1.
     * @return AllProdukVariantShuttleView1
     */
    public ViewObjectImpl getAllProdukVariantShuttleView1() {
        return (ViewObjectImpl)findViewObject("AllProdukVariantShuttleView1");
    }


    /**
     * Container's getter for ProdVariantValidationView1.
     * @return ProdVariantValidationView1
     */
    public ProdVariantValidationViewImpl getProdVariantValidationView1() {
        return (ProdVariantValidationViewImpl)findViewObject("ProdVariantValidationView1");
    }

    /**
     * Container's getter for FcsViewCategCombinationView1.
     * @return FcsViewCategCombinationView1
     */
    public FcsViewCategCombinationViewImpl getFcsViewCategCombinationView1() {
        return (FcsViewCategCombinationViewImpl)findViewObject("FcsViewCategCombinationView1");
    }


    /**
     * Container's getter for UploadDownloadView1.
     * @return UploadDownloadView1
     */
    public ViewObjectImpl getUploadDownloadView1() {
        return (ViewObjectImpl)findViewObject("UploadDownloadView1");
    }

    /**
     * Container's getter for ApprovalUploadDownloadFk1Link1.
     * @return ApprovalUploadDownloadFk1Link1
     */
    public ViewLinkImpl getApprovalUploadDownloadFk1Link1() {
        return (ViewLinkImpl)findViewLink("ApprovalUploadDownloadFk1Link1");
    }


    /**
     * Container's getter for ApprovalForwardReceiverProposalView1.
     * @return ApprovalForwardReceiverProposalView1
     */
    public ApprovalForwardReceiverProposalViewImpl getApprovalForwardReceiverProposalView1() {
        return (ApprovalForwardReceiverProposalViewImpl)findViewObject("ApprovalForwardReceiverProposalView1");
    }

    /**
     * Container's getter for ApprovalForwardRejectReceiverProposalView1.
     * @return ApprovalForwardRejectReceiverProposalView1
     */
    public ApprovalForwardRejectReceiverProposalViewImpl getApprovalForwardRejectReceiverProposalView1() {
        return (ApprovalForwardRejectReceiverProposalViewImpl)findViewObject("ApprovalForwardRejectReceiverProposalView1");
    }


    /**
     * Container's getter for FcsPppcPriceListView1.
     * @return FcsPppcPriceListView1
     */
    public ViewObjectImpl getFcsPppcPriceListView1() {
        return (ViewObjectImpl)findViewObject("FcsPppcPriceListView1");
    }


    /**
     * Container's getter for AuditPpBiayaView1.
     * @return AuditPpBiayaView1
     */
    public ViewObjectImpl getAuditPpBiayaView1() {
        return (ViewObjectImpl)findViewObject("AuditPpBiayaView1");
    }

    /**
     * Container's getter for AuditPpBiayaPromoProdukViewLink1.
     * @return AuditPpBiayaPromoProdukViewLink1
     */
    public ViewLinkImpl getAuditPpBiayaPromoProdukViewLink1() {
        return (ViewLinkImpl)findViewLink("AuditPpBiayaPromoProdukViewLink1");
    }

    /**
     * Container's getter for AuditPpPotonganView1.
     * @return AuditPpPotonganView1
     */
    public ViewObjectImpl getAuditPpPotonganView1() {
        return (ViewObjectImpl)findViewObject("AuditPpPotonganView1");
    }

    /**
     * Container's getter for AuditPpPotonganPromoProdukViewLink1.
     * @return AuditPpPotonganPromoProdukViewLink1
     */
    public ViewLinkImpl getAuditPpPotonganPromoProdukViewLink1() {
        return (ViewLinkImpl)findViewLink("AuditPpPotonganPromoProdukViewLink1");
    }

    /**
     * Container's getter for AuditPpPromoBarangView1.
     * @return AuditPpPromoBarangView1
     */
    public ViewObjectImpl getAuditPpPromoBarangView1() {
        return (ViewObjectImpl)findViewObject("AuditPpPromoBarangView1");
    }

    /**
     * Container's getter for AuditPpPromoBarangPromoProdukViewLink1.
     * @return AuditPpPromoBarangPromoProdukViewLink1
     */
    public ViewLinkImpl getAuditPpPromoBarangPromoProdukViewLink1() {
        return (ViewLinkImpl)findViewLink("AuditPpPromoBarangPromoProdukViewLink1");
    }

    /**
     * Container's getter for PromoCustomerAreaView1.
     * @return PromoCustomerAreaView1
     */
    public ViewObjectImpl getPromoCustomerAreaView1() {
        return (ViewObjectImpl)findViewObject("PromoCustomerAreaView1");
    }

    /**
     * Container's getter for PromoCustomerAreaProposalApprovalFk1Link1.
     * @return PromoCustomerAreaProposalApprovalFk1Link1
     */
    public ViewLinkImpl getPromoCustomerAreaProposalApprovalFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoCustomerAreaProposalApprovalFk1Link1");
    }

    /**
     * Container's getter for PromoCustomerHoView1.
     * @return PromoCustomerHoView1
     */
    public ViewObjectImpl getPromoCustomerHoView1() {
        return (ViewObjectImpl)findViewObject("PromoCustomerHoView1");
    }

    /**
     * Container's getter for PromoCustomerHoPromoProdukFk1Link1.
     * @return PromoCustomerHoPromoProdukFk1Link1
     */
    public ViewLinkImpl getPromoCustomerHoPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoCustomerHoPromoProdukFk1Link1");
    }

    /**
     * Container's getter for PromoCustxAreaView1.
     * @return PromoCustxAreaView1
     */
    public ViewObjectImpl getPromoCustxAreaView1() {
        return (ViewObjectImpl)findViewObject("PromoCustxAreaView1");
    }

    /**
     * Container's getter for PromoCustxAreaPromoProdukFk1Link1.
     * @return PromoCustxAreaPromoProdukFk1Link1
     */
    public ViewLinkImpl getPromoCustxAreaPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoCustxAreaPromoProdukFk1Link1");
    }

    /**
     * Container's getter for PromoCustxHoView1.
     * @return PromoCustxHoView1
     */
    public ViewObjectImpl getPromoCustxHoView1() {
        return (ViewObjectImpl)findViewObject("PromoCustxHoView1");
    }

    /**
     * Container's getter for PromoCustxHoPromoProdukFk1Link1.
     * @return PromoCustxHoPromoProdukFk1Link1
     */
    public ViewLinkImpl getPromoCustxHoPromoProdukFk1Link1() {
        return (ViewLinkImpl)findViewLink("PromoCustxHoPromoProdukFk1Link1");
    }
}
