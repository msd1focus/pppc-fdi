package app.fpp.bean.promoproposal;

import app.fpp.adfextensions.ADFUtils;
import app.fpp.adfextensions.JSFUtils;
import app.fpp.bean.useraccessmenu.UserData;
import app.fpp.model.am.PromoProposalAMImpl;
import app.fpp.model.views.approval.ApprovalReceiverNewProposalViewImpl;
import app.fpp.model.views.masterdata.ebs.FcsViewCategCombinationViewImpl;
import app.fpp.model.views.masterdata.lov.customer.CustAreaFindParentViewImpl;
import app.fpp.model.views.masterdata.lov.customer.CustAreaFindParentViewRowImpl;
import app.fpp.model.views.masterdata.lov.customer.CustLocFindParentViewImpl;
import app.fpp.model.views.masterdata.lov.customer.CustLocFindParentViewRowImpl;
import app.fpp.model.views.promoproposal.ProdukItemViewImpl;
import app.fpp.model.views.promoproposal.ProdukVariantViewImpl;
import app.fpp.model.views.promoproposal.PromoProdukViewImpl;
import app.fpp.model.views.promoproposal.ProposalViewImpl;
import app.fpp.model.views.promoproposal.copyaddendum.CopyPromoCustomerAreaImpl;
import app.fpp.model.views.promoproposal.copyaddendum.PromoBonusCopyAddendumViewImpl;
import app.fpp.model.views.promoproposal.copyaddendum.PromoProdukCopyAddendumViewImpl;
import app.fpp.model.views.promoproposal.copyaddendum.ProposalCopyAddendumViewImpl;
import app.fpp.model.views.promoproposal.copyaddendum.ProposalCopyAddendumViewRowImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicateBiayaViewImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicateDiscountViewImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicateProdukItemViewImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicateProdukVariantViewImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicatePromoBonusViewImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicatePromoCustomerExAreaImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicatePromoCustomerExHOImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicatePromoCustomerHOImpl;
import app.fpp.model.views.promoproposal.duplicate.DuplicateTargetViewImpl;
import app.fpp.model.views.promoproposal.validation.AddendumValidationViewImpl;
import app.fpp.model.views.promoproposal.validation.ProdVariantValidationViewImpl;

import app.fpp.model.views.promoproposal.validation.ValidateRealisasiGrImpl;

import app.fpp.model.views.promoproposal.validation.ValidateRealisasiGrRowImpl;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.component.UISelectItems;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;

import oracle.adf.controller.ControllerContext;
import oracle.adf.controller.ViewPortContext;
import oracle.adf.model.AttributeBinding;
import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.view.faces.bi.component.pivotTable.CellFormat;
import oracle.adf.view.faces.bi.component.pivotTable.DataCellContext;
import oracle.adf.view.faces.bi.component.pivotTable.HeaderCellContext;
import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.RichQuery;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.component.rich.data.RichTreeTable;
import oracle.adf.view.rich.component.rich.input.RichInputDate;
import oracle.adf.view.rich.component.rich.input.RichInputListOfValues;
import oracle.adf.view.rich.component.rich.input.RichInputText;
import oracle.adf.view.rich.component.rich.input.RichSelectOneChoice;
import oracle.adf.view.rich.component.rich.layout.RichPanelGroupLayout;
import oracle.adf.view.rich.component.rich.layout.RichPanelSplitter;
import oracle.adf.view.rich.component.rich.layout.RichShowDetailItem;
import oracle.adf.view.rich.component.rich.nav.RichCommandButton;
import oracle.adf.view.rich.component.rich.nav.RichCommandImageLink;
import oracle.adf.view.rich.component.rich.nav.RichCommandToolbarButton;
import oracle.adf.view.rich.component.rich.output.RichMessages;
import oracle.adf.view.rich.component.rich.output.RichOutputFormatted;
import oracle.adf.view.rich.component.rich.output.RichOutputText;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;
import oracle.adf.view.rich.event.LaunchPopupEvent;
import oracle.adf.view.rich.event.PopupCanceledEvent;
import oracle.adf.view.rich.event.PopupFetchEvent;
import oracle.adf.view.rich.event.QueryEvent;
import oracle.adf.view.rich.event.ReturnPopupEvent;

import oracle.adf.view.rich.model.AttributeCriterion;
import oracle.adf.view.rich.model.AttributeDescriptor;
import oracle.adf.view.rich.model.ConjunctionCriterion;
import oracle.adf.view.rich.model.Criterion;
import oracle.adf.view.rich.model.FilterableQueryDescriptor;
import oracle.adf.view.rich.model.QueryDescriptor;
import oracle.adf.view.rich.model.QueryModel;

import oracle.adf.view.rich.render.ClientEvent;

import oracle.binding.BindingContainer;
import oracle.binding.OperationBinding;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.format.DefaultDateFormatter;
import oracle.jbo.format.FormatErrorException;
import oracle.jbo.uicli.binding.JUCtrlHierNodeBinding;

import org.apache.myfaces.trinidad.component.UIXSwitcher;
import org.apache.myfaces.trinidad.event.DisclosureEvent;
import org.apache.myfaces.trinidad.event.ReturnEvent;
import org.apache.myfaces.trinidad.event.RowDisclosureEvent;

import oracle.adf.view.rich.model.ListOfValuesModel;

import oracle.jbo.uicli.binding.JUCtrlHierBinding;

import org.apache.myfaces.trinidad.event.SelectionEvent;
import org.apache.myfaces.trinidad.model.CollectionModel;
import org.apache.myfaces.trinidad.model.RowKeySet;

public class ProposalBean {
    private String userCompany;
    private String contactNo;
    private RichInputText userCompanyId;
    private RichInputText contactPemohon;
    private RichInputText docStatus;
    private static String docStatusInprogress = "INPROCESS";
    private static String docStatusDraft = "DRAFT";
    private RichTable tblListProduct;
    private RichInputListOfValues itlovProdCode;
    private RichInputText itProdDescr;
    private RichPanelGroupLayout panCollMain;
    private RichCommandButton btnCancel;
    private RichCommandButton btnSave;
    private RichCommandButton btnSubmit;
    private RichInputListOfValues itlovProdClass;
    private RichInputListOfValues itlovProdBrand;
    private RichInputListOfValues itlovProdExtention;
    private RichInputListOfValues itlovProdPackaging;
    private RichInputListOfValues itlovProdClassAddBuy;
    private RichInputListOfValues itlovProdBrandAddBuy;
    private RichInputListOfValues itlovProdExtAddBuy;
    private RichInputListOfValues itlovProdPackAddBuy;
    private RichInputListOfValues itlovProdClassBonus;
    private RichInputListOfValues itlovProdBrandBonus;
    private RichInputListOfValues itlovProdExtBonus;
    private RichInputListOfValues itlovProdPackBonus;
    private RichTable tblListProductBonus;
    private RichTable tblListProductAddBuy;
    private RichInputText itTargetPercentage;
    private RichInputText itTargetValue;
    private RichInputText itTargetQty;
    private RichInputText itTargetHarga;
    private RichInputText itValueTotal;
    private UIXSwitcher switchRegCust;
    private static String propArea = "AREA";
    private static String propCustomer = "CUSTOMER";
    private static String propRegion = "REGION";
    private static String propLocation = "LOCATION";
    private static String propCustType = "CUSTTYPE";
    private static String propCustGroup = "CUSTGROUP";
    private static String prodArea = "AREA";
    private static String prodCustomer = "CUSTOMER";
    private static String prodRegion = "REGION";
    private static String prodLocation = "LOCATION";
    private static String prodCustType = "CUSTTYPE";
    private static String prodCustGroup = "CUSTGROUP";
    private static String userHo = "HO";
    private static String userArea = "AREA";
    private RichSelectOneChoice copyAsFlag;
    private String promoAddBuyIdvar;
    private String promoBonusIdvar;
    private RichSelectOneChoice socMekPenagihan;
    private RichTable tblListProposal;
    private RichPopup pdetailProduct;
    private RichPopup potmessage;
    private RichOutputFormatted otpesan;
    private RichShowDetailItem tabProdTargetBudget;
    private RichShowDetailItem tabProdCustomer;
    private RichShowDetailItem tabProdBiaya;
    private String BiayaNonYearly;
    private String BiayaYearly;
    private String UserTypeCreator;
    private RichShowDetailItem tabProdPromoBarang;
    private RichShowDetailItem tabProdPotongan;
    private RichShowDetailItem tabTargetAndBudget;
    private RichInputText itVariant;
    private RichCommandImageLink linkVariant;
    private RichPopup psubmitProposal;
    private static String discTypePotongan = "POTONGAN";
    private static String discTypeBiaya = "BIAYA";
    private static String discTypePromoBarang = "PROMOBARANG";
    private RichCommandImageLink linkProduct;
    private RichInputText itVariantAddBuy;
    private RichInputText itProdukAddBuy;
    private RichInputText itBonusVariant;
    private RichSelectOneChoice itLovProposalType;
    private UISelectItems selectItSocProposalType;
    private RichSelectOneChoice customLovproposalType;
    private ArrayList listProposalType = new ArrayList();
    private RichInputListOfValues itLovProdCategory;
    private RichOutputText itCategory;
    private RichSelectOneChoice socLovDiv;
    private RichInputText avgQty;
    private DecimalFormat df = new DecimalFormat("###");
    private DecimalFormat df2dgt = new DecimalFormat("###.##");
    private static String varAll = "ALL";
    private RichInputListOfValues itlovExclCustBy;
    private UIXSwitcher switchExclCust;
    private RichPanelSplitter pgMainDetail;
    private Integer idxFood = 1;
    private Integer idxNonFood = 2;
    private String prodCatCodeFood = "CT001";
    private String prodCatCodeNonFood = "CT002";
    private String prodDescCodeFood = "FOOD";
    private String prodDescCodeNonFood = "NON FOOD";
    private String userDivision;
    private RichTable tableListPotongan;
    private RichInputListOfValues socTypePotongan;
    private RichInputText otOnTop;
    private RichInputText otMF;
    private RichInputText rowOntop;
    private RichInputText rowMf;
    BigDecimal valueMf = BigDecimal.ZERO;
    private BigDecimal bdHundred = new BigDecimal("100");
    private RichInputText otRasioOntop;
    private RichInputText otRasioMf;
    private RichInputText otRasioTotal;
    private RichInputText itPromoBonusOntop;
    private RichInputText itPromoBonusMf;
    private static String userCustInvalid = "INVALID";
    private RichInputText itPricePromoBonus;
    private RichInputText itQtyPromoboBonus;
    private RichInputText otBrgOnTop;
    private RichInputText otBrgMf;
    private RichInputText otBrgRasioOnTop;
    private RichInputText otBrgRasioMf;
    private RichInputText otBrgRasioTotal;
    private RichCommandButton btnOkpromoDetail;
    private RichInputText itProductItem;
    private RichInputDate idHistFrom;
    private RichInputDate idHistTo;
    private RichInputDate idPeriodProgFrom;
    private RichInputDate idPeriodeTo;
    private RichInputText otBiaOntop;
    private RichInputText otBiaMf;
    private RichInputText otBiaRasioOntop;
    private RichInputText otBiaRasioMf;
    private RichInputText otBiaRasioTotal;
    private RichInputText rowBiaOntop;
    private RichInputText rowBiaMf;
    private static String backDateBlockRegion = "R1-0";
    private RichInputDate newPromoPeriodFrom;
    private RichInputDate newPromoPeriodTo;
    private String textCopyProposal;
    private RichMessages copyPropMessage;
    private RichInputText itDaysCount;
    private RichOutputText otdaysview;
    private RichInputText itProgDays;
    private static String wflowFoodHo = "PROPOSAL FOOD HO";
    private static String wflowFoodArea = "PROPOSAL FOOD";
    private static String wflowNonFoodHo = "PROPOSAL NON FOOD HO";
    private static String wflowNonFoodArea = "PROPOSAL NON FOOD";
    private RichSelectOneChoice socMixQtyPromo;
    private UIXSwitcher switchMain;
    private RichInputListOfValues itlovUomTarget;
    private RichCommandButton btnPriceListpromoBrng;
    private RichPopup ppricelistTarget;
    private RichOutputText otHistFrom;
    private RichOutputText otHistTo;
    private Number maxNumber = new Number(999999);
    private RichInputText itQtyMulPrice;
    private RichCommandButton btnPriceListShow;
    private RichInputListOfValues itLovPriceBased;
    private RichCommandButton btnPriceListTgt;
    private RichInputListOfValues itlovPriceBasedPromoBarang;
    private RichQuery qryPriceList;
    private RichInputText itTargetHargaSurogate;
    private RichPopup ppriceListpromoBarang;
    private RichQuery qryPriceListTarget;
    private Integer onInvoice = 1;
    private RichCommandButton btnBonusPriceList;
    private RichInputText itKelipatanDisc;
    private RichOutputText otKelipatanDisc;
    private RichInputListOfValues lovTipePerhitungan;
    private RichInputText itqtyFromDisc;
    private RichInputText itqtyToDisc;
    private static final String SEPARATOR = ",";
    private RichSelectOneChoice socTipeProposal;
    private RichPopup pttpeProposal;
    private RichShowDetailItem tabProdExclCustomer;
    private RichCommandToolbarButton btnAttachment;
    private RichInputDate newPromoPeriodAddendumFrom;
    private RichInputDate newPromoPeriodAddendumTo;
    private RichInputListOfValues itLovProposalNo;
    private String tipeHitungKelipatan = "KELIPATAN";
    private String tipeHitungTdkKelipatan = "TDKKELIPATAN";
    private String tipePotonganPercent = "PERCENT";
    private String tipePotonganAmount = "AMOUNT";
    private DecimalFormat numFmt = new DecimalFormat("#,###,###,###,##0.00");
    private Number zeroNum = new Number(0);
    private String printCountYes = "Y";
    private RichCommandButton btnPrintPreview;
    private String targetUomPaket = "Pkt";
    private String targetUomNonPaket = "Ctn";
    private String prodPaketFlag = "PAKET";
    private RichInputListOfValues itlovProdPaketFlag;
    private RichInputText itValidComb;
    private RichInputText itTotAmt;
    private RichInputText itBiaPrice;
    private UIXSwitcher switchButtonMain;
    private RichPopup popupSaveChanges;
    private RichInputText itProdRegCustFlag;
    private RichShowDetailItem tabProdCustRegion;
    private RichShowDetailItem tabProdCustArea;
    private RichShowDetailItem tabProdCustLocation;
    private RichShowDetailItem tabProdCustType;
    private RichShowDetailItem tabProdCustGroup;
    private RichShowDetailItem tabProdCustName;
    private PromoProposalAMImpl promoProposalAM =
        (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
    private RichInputText itPpnFlag;
    private String ppnFlagInclude = "INCLUDE";
    private String ppnFlagExclude = "EXCLUDE";
    private RichShowDetailItem tabExclCustArea;
    private RichShowDetailItem tabExclCustLoc;
    private RichShowDetailItem tabExclCustRegion;
    private RichShowDetailItem tabExclCustType;
    private RichShowDetailItem tabExclCustGroup;
    private RichShowDetailItem tabExclCustName;
    private RichShowDetailItem tabCustRegion;
    private RichShowDetailItem tabCustArea;
    private RichShowDetailItem tabCustLocation;
    private RichShowDetailItem tabCustName;
    private RichShowDetailItem tabCustGroup;
    private RichShowDetailItem tabCustType;
    private RichInputText itCustRegFlag;
    private RichCommandImageLink cbProdLineApproval;
    private RichTable tblPromoCustxArea;
    private RichTable tblPromoCustxHo;
    private String custParentNotFound = "NOT FOUND";
    private RichTable tblPromoCustArea;
    private RichTable tblPromoCustHo;
    private List<ListPromoCustomerArea> listPromoCustomerArea =
        new ArrayList<ListPromoCustomerArea>();
    private List<ListPromoCustomerHO> listPromoCustomerHo =
        new ArrayList<ListPromoCustomerHO>();

    public ProposalBean() {
        super();
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public void setUserCompany(String userCompany) {
        this.userCompany = userCompany;
    }

    public String getUserCompany() {
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String usrCompId = userData.getCompanyId();
        userCompanyId.setValue(usrCompId);
        if (itProgDays.getValue() == null) {
            itProgDays.setValue(new Number(0));
        }
        return userCompany;
    }

    public void setUserCompanyId(RichInputText userCompanyId) {
        this.userCompanyId = userCompanyId;
    }

    public RichInputText getUserCompanyId() {
        return userCompanyId;
    }

    public void setContactNo(String contactNo) {
        this.contactNo = contactNo;
    }

    public String getContactNo() {
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String contactNum = userData.getContactNo();
        contactPemohon.setValue(contactNum);
        return contactNo;
    }

    public void setContactPemohon(RichInputText contactPemohon) {
        this.contactPemohon = contactPemohon;
    }

    public RichInputText getContactPemohon() {
        return contactPemohon;
    }

    public void submitProposal(DialogEvent dialogEvent) {
        BindingContainer bindings = getBindings();

        if (dialogEvent.getOutcome().name().equals("ok")) {
            //Save all changed values
            OperationBinding operationBindingCommit =
                bindings.getOperationBinding("Commit");
            operationBindingCommit.execute();

            // Validasi combination sudah valid atau belum
            boolean validCombination = true;
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            for (Row promoProdRow : dciterPromoProduk.getAllRowsInRange()) {
                String kodeCombination =
                    (String)promoProdRow.getAttribute("ValidComb");
                if (kodeCombination.equalsIgnoreCase("N")) {
                    validCombination = false;
                }
            }

            if (validCombination) {
                // Set status doc to INPROCESS
                AttributeBinding docStatusAttr =
                    (AttributeBinding)bindings.getControlBinding("Status");
                docStatusAttr.setInputValue(docStatusInprogress);

                // Validate product category combination
                PromoProposalAMImpl promoProposalAM =
                    (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

                UserData userData =
                    (UserData)JSFUtils.resolveExpression("#{UserData}");
                String userType = userData.getUserType();
                String usrName = userData.getUserNameLogin();
                Integer propTypeIdx = (Integer)itLovProposalType.getValue();
                String aprvlFlowNm = "";

                if (propTypeIdx.compareTo(idxFood) == 0 &&
                    userType.equalsIgnoreCase(userHo)) {
                    aprvlFlowNm = wflowFoodHo;
                } else if (propTypeIdx.compareTo(idxFood) == 0 &&
                           userType.equalsIgnoreCase(userArea)) {
                    aprvlFlowNm = wflowFoodArea;
                } else if (propTypeIdx.compareTo(idxNonFood) == 0 &&
                           userType.equalsIgnoreCase(userHo)) {
                    aprvlFlowNm = wflowNonFoodHo;
                } else if (propTypeIdx.compareTo(idxNonFood) == 0 &&
                           userType.equalsIgnoreCase(userArea)) {
                    aprvlFlowNm = wflowNonFoodArea;
                } else {
                    System.out.println("ERROR: Approval flow name not recognized.");
                }

                ApprovalReceiverNewProposalViewImpl proposalReceiver =
                    promoProposalAM.getApprovalReceiverNewProposalView1();
                proposalReceiver.setNamedWhereClauseParam("aprvlFlowNm",
                                                          aprvlFlowNm);
                proposalReceiver.setNamedWhereClauseParam("usrName", usrName);
                proposalReceiver.executeQuery();

                if (proposalReceiver.getEstimatedRowCount() > 0) {
                    try {
                        OperationBinding operationAddApproval =
                            bindings.getOperationBinding("addDocApproval");
                        operationAddApproval.execute();
                    } catch (JboException e) {
                        JSFUtils.addFacesErrorMessage("Error",
                                                      e.getBaseMessage());
                    }

                    //Save all changed values
                    OperationBinding operationCommitSubmit =
                        bindings.getOperationBinding("Commit");
                    operationCommitSubmit.execute();

                    OperationBinding operationBinding =
                        bindings.getOperationBinding("ExecutePromoProduct");
                    operationBinding.execute();

                    //Set to inprocess mode
                    DCIteratorBinding parentIter =
                        (DCIteratorBinding)bindings.get("ProposalView1Iterator");
                    ProposalViewImpl propVo =
                        (ProposalViewImpl)parentIter.getViewObject();
                    //View Criteria without bind variable
                    ViewCriteria vc =
                        propVo.getViewCriteria("ProposalInProcessVC");
                    propVo.applyViewCriteria(vc);
                    propVo.executeQuery();

                    //Set filter mode
                    ADFContext adfCtx = ADFContext.getCurrent();
                    Map sessionScope = adfCtx.getSessionScope();
                    sessionScope.put("filterMode", "INPROCESS");

                    switchMain.setFacetName("dataavailable");
                    switchButtonMain.setFacetName("dataavailable");
                    AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);

                    AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(panCollMain);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnCancel);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnSave);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnSubmit);
                    
                    Row firstRow = propVo.first();
                    Key proposalKey = firstRow.getKey();
                    parentIter.setCurrentRowWithKey(proposalKey.toStringFormat(true));
                } else {
                    JSFUtils.addFacesErrorMessage("Error",
                                                  "User penerima pada flow approval tidak ditemukan.");
                }
            } else {
                JSFUtils.addFacesErrorMessage("Error",
                                              "Kombinasi category pada daftar produk ada yang tidak valid.");
            }
            psubmitProposal.hide();
            AdfFacesContext.getCurrentInstance().addPartialTarget(psubmitProposal);
        } else {
            // Set status doc to DRAFT
            AttributeBinding docStatusAttr =
                (AttributeBinding)bindings.getControlBinding("Status");
            docStatusAttr.setInputValue(docStatusDraft);

            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            dciterPromoProduk.getViewObject().resetExecuted();

            AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
            AdfFacesContext.getCurrentInstance().addPartialTarget(panCollMain);
            AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);
            AdfFacesContext.getCurrentInstance().addPartialTarget(btnCancel);
            AdfFacesContext.getCurrentInstance().addPartialTarget(btnSave);
            AdfFacesContext.getCurrentInstance().addPartialTarget(btnSubmit);
        }
    }

    public void setDocStatus(RichInputText docStatus) {
        this.docStatus = docStatus;
    }

    public RichInputText getDocStatus() {
        return docStatus;
    }

    public void submitProposalPopup(PopupFetchEvent popupFetchEvent) {
        // Validasi combination sudah valid atau belum
        boolean validCombination = true;
        DCIteratorBinding dciterPromoProduk =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        for (Row promoProdRow : dciterPromoProduk.getAllRowsInRange()) {
            String kodeCombination =
                (String)promoProdRow.getAttribute("ValidComb");
            if (kodeCombination.equalsIgnoreCase("N")) {
                validCombination = false;
            }
        }

        if (validCombination) {
            linkVariant.setDisabled(true);
            linkProduct.setDisabled(true);
        }

        AdfFacesContext.getCurrentInstance().addPartialTarget(linkVariant);
        AdfFacesContext.getCurrentInstance().addPartialTarget(linkProduct);
    }

    public void addProductPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("CreateInsertPromoProduk");
        operationBinding.execute();
    }

    public void setTblListProduct(RichTable tblListProduct) {
        this.tblListProduct = tblListProduct;
    }

    public RichTable getTblListProduct() {
        return tblListProduct;
    }

    public void addProductPopupCanceledListener(PopupCanceledEvent popupCanceledEvent) {
        BindingContainer bindings = getBindings();
        OperationBinding operationBindingRollback =
            bindings.getOperationBinding("removeCanceledRow");
        operationBindingRollback.execute();
    }

    public void socProdTypeValueChangeListener(ValueChangeEvent valueChangeEvent) {
        itlovProdCode.setValue(null);
        itProdDescr.setValue(null);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itlovProdCode);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itProdDescr);
    }

    public void setItlovProdCode(RichInputListOfValues itlovProdCode) {
        this.itlovProdCode = itlovProdCode;
    }

    public RichInputListOfValues getItlovProdCode() {
        return itlovProdCode;
    }

    public void setItProdDescr(RichInputText itProdDescr) {
        this.itProdDescr = itProdDescr;
    }

    public RichInputText getItProdDescr() {
        return itProdDescr;
    }

    public void setPanCollMain(RichPanelGroupLayout panCollMain) {
        this.panCollMain = panCollMain;
    }

    public RichPanelGroupLayout getPanCollMain() {
        return panCollMain;
    }

    public void showPopup(String pesan, RichPopup p) {
        pesan = pesan.replaceAll("<nr>", "<br>");
        otpesan.setValue(pesan);
        AdfFacesContext adc = AdfFacesContext.getCurrentInstance();
        adc.addPartialTarget(otpesan);
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        p.show(hints);
    }

    public void detailProdPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings = getBindings();

        AdfFacesContext context = AdfFacesContext.getCurrentInstance();
        Map vScope = context.getViewScope();
        vScope.put("Action", null);

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        if (dciterTarget.getEstimatedRowCount() == 0) {
            OperationBinding operationCreateInsertTarget =
                bindings.getOperationBinding("CreateInsertTarget");
            operationCreateInsertTarget.execute();
        } else {
            // TARGET SUDAH ADA; DO NOTHING;
        }
    }

    public void windowVariantReturnListener(ReturnEvent returnEvent) {
        String PromoProdukIdSel = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voTableData = iterProduk.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }

        DCIteratorBinding dciterProdVariant =
            ADFUtils.findIterator("ProdukVariantView1Iterator");
        if (dciterProdVariant.getEstimatedRowCount() == 1) {
            RowSetIterator rsiProdVariant =
                dciterProdVariant.getRowSetIterator();
            Row prodVariantRow = rsiProdVariant.first();
            if (!prodVariantRow.getAttribute("ProdVariant").toString().equalsIgnoreCase("ALL")) {
                DCIteratorBinding dciterProdItem =
                    ADFUtils.findIterator("ProdukItemView1Iterator");
                RowSetIterator rsiProdItem =
                    dciterProdItem.getRowSetIterator();
                for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                    String ppId =
                        prodItemRow.getAttribute("PromoProdukId").toString();
                    if (ppId.equalsIgnoreCase(PromoProdukIdSel)) {
                        prodItemRow.remove();
                        linkProduct.setVisible(false);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(linkProduct);
                    }
                }
                rsiProdItem.closeRowSetIterator();
            } else {
                DCIteratorBinding dciterProdItem =
                    ADFUtils.findIterator("ProdukItemView1Iterator");
                RowSetIterator rsiProdItem =
                    dciterProdItem.getRowSetIterator();
                for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                    String ppId =
                        prodItemRow.getAttribute("PromoProdukId").toString();
                    if (ppId.equalsIgnoreCase(PromoProdukIdSel)) {
                        rsiProdItem.closeRowSetIterator();
                        linkProduct.setVisible(true);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(linkProduct);
                    }
                }
            }
        } else {
            DCIteratorBinding dciterProdItem =
                ADFUtils.findIterator("ProdukItemView1Iterator");
            RowSetIterator rsiProdItem = dciterProdItem.getRowSetIterator();
            for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                prodItemRow.remove();
            }
            rsiProdItem.closeRowSetIterator();
        }

        BindingContainer bindings = this.getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoProduct");
        operationBinding.execute();

        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
        AdfFacesContext.getCurrentInstance().addPartialTarget(itVariant);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itProductItem);
        AdfFacesContext.getCurrentInstance().addPartialTarget(linkProduct);
    }

    public void windowItemReturnListener(ReturnEvent returnEvent) {
        BindingContainer bindings = this.getBindings();
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voTableData = iterProduk.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoProduct");
        operationBinding.execute();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
        AdfFacesContext.getCurrentInstance().addPartialTarget(itProductItem);
    }

    public void changeRegionCustomer(ValueChangeEvent valueChangeEvent) {
        String valueChange = valueChangeEvent.getNewValue().toString();
        if (valueChange.equalsIgnoreCase(propRegion)) {
            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("PropRegionAreaView1Iterator");
            for (Row r : dciterArea.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterLoc =
                ADFUtils.findIterator("PropRegionLocView1Iterator");
            for (Row r : dciterLoc.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("PropRegionCustTypeView1Iterator");
            for (Row r : dciterCustType.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("PropRegionCustGroupView1Iterator");
            for (Row r : dciterCustGroup.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCust =
                ADFUtils.findIterator("PropRegionCustomerView1Iterator");
            for (Row r : dciterCust.getAllRowsInRange()) {
                r.remove();
            }

        } else if (valueChange.equalsIgnoreCase(propArea)) {
            DCIteratorBinding dciterReg =
                ADFUtils.findIterator("PropRegionView1Iterator");
            for (Row r : dciterReg.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterLoc =
                ADFUtils.findIterator("PropRegionLocView1Iterator");
            for (Row r : dciterLoc.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("PropRegionCustTypeView1Iterator");
            for (Row r : dciterCustType.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("PropRegionCustGroupView1Iterator");
            for (Row r : dciterCustGroup.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCust =
                ADFUtils.findIterator("PropRegionCustomerView1Iterator");
            for (Row r : dciterCust.getAllRowsInRange()) {
                r.remove();
            }

        } else if (valueChange.equalsIgnoreCase(propLocation)) {
            DCIteratorBinding dciterReg =
                ADFUtils.findIterator("PropRegionView1Iterator");
            for (Row r : dciterReg.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("PropRegionAreaView1Iterator");
            for (Row r : dciterArea.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("PropRegionCustTypeView1Iterator");
            for (Row r : dciterCustType.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("PropRegionCustGroupView1Iterator");
            for (Row r : dciterCustGroup.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCust =
                ADFUtils.findIterator("PropRegionCustomerView1Iterator");
            for (Row r : dciterCust.getAllRowsInRange()) {
                r.remove();
            }

        } else if (valueChange.equalsIgnoreCase(propCustType)) {
            DCIteratorBinding dciterReg =
                ADFUtils.findIterator("PropRegionView1Iterator");
            for (Row r : dciterReg.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("PropRegionAreaView1Iterator");
            for (Row r : dciterArea.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterLoc =
                ADFUtils.findIterator("PropRegionLocView1Iterator");
            for (Row r : dciterLoc.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("PropRegionCustTypeView1Iterator");
            for (Row r : dciterCustType.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCust =
                ADFUtils.findIterator("PropRegionCustomerView1Iterator");
            for (Row r : dciterCust.getAllRowsInRange()) {
                r.remove();
            }

        } else if (valueChange.equalsIgnoreCase(propCustGroup)) {
            DCIteratorBinding dciterReg =
                ADFUtils.findIterator("PropRegionView1Iterator");
            for (Row r : dciterReg.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("PropRegionAreaView1Iterator");
            for (Row r : dciterArea.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterLoc =
                ADFUtils.findIterator("PropRegionLocView1Iterator");
            for (Row r : dciterLoc.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("PropRegionCustTypeView1Iterator");
            for (Row r : dciterCustType.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCust =
                ADFUtils.findIterator("PropRegionCustomerView1Iterator");
            for (Row r : dciterCust.getAllRowsInRange()) {
                r.remove();
            }

        } else if (valueChange.equalsIgnoreCase(propCustomer)) {
            DCIteratorBinding dciterReg =
                ADFUtils.findIterator("PropRegionView1Iterator");
            for (Row r : dciterReg.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("PropRegionAreaView1Iterator");
            for (Row r : dciterArea.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterLoc =
                ADFUtils.findIterator("PropRegionLocView1Iterator");
            for (Row r : dciterLoc.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("PropRegionCustTypeView1Iterator");
            for (Row r : dciterCustType.getAllRowsInRange()) {
                r.remove();
            }

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("PropRegionCustGroupView1Iterator");
            for (Row r : dciterCustGroup.getAllRowsInRange()) {
                r.remove();
            }

        } else {
            JSFUtils.addFacesErrorMessage("Error",
                                          "\"Tipe Customer\" tidak dikenali.");
        }
        clearAllCustExclude();
    }

    public void setBtnCancel(RichCommandButton btnCancel) {
        this.btnCancel = btnCancel;
    }

    public RichCommandButton getBtnCancel() {
        return btnCancel;
    }

    public void setBtnSave(RichCommandButton btnSave) {
        this.btnSave = btnSave;
    }

    public RichCommandButton getBtnSave() {
        return btnSave;
    }

    public void setBtnSubmit(RichCommandButton btnSubmit) {
        this.btnSubmit = btnSubmit;
    }

    public RichCommandButton getBtnSubmit() {
        return btnSubmit;
    }

    public Row getTableRow(String iterator) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding(iterator);
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        return rowSelected;
    }

    public void productCategoryChanged(ValueChangeEvent valueChangeEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        String PromoProdukIdSel = "";
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voTableDatasel = iterProduk.getViewObject();
        Row rowSelected = voTableDatasel.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }

        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdClass().setValue(null);
            this.getItlovProdBrand().setValue(null);
            this.getItlovProdExtention().setValue(null);
            this.getItlovProdPackaging().setValue(null);
        }

        clearVariantItem(PromoProdukIdSel);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void productClassChanged(ValueChangeEvent valueChangeEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        String PromoProdukIdSel = "";
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdBrand().setValue(null);
            this.getItlovProdExtention().setValue(null);
            this.getItlovProdPackaging().setValue(null);

        }

        clearVariantItem(PromoProdukIdSel);

        DCIteratorBinding iterVariant =
            (DCIteratorBinding)binding.get("ProdukVariantView1Iterator");

        if (itlovProdClass.getValue().toString().equalsIgnoreCase("ALL")) {
            // Update produk brand, extension, packaging to ALL
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ProductBrand", "ALL");
            rowProduk.setAttribute("ProductExt", "ALL");
            rowProduk.setAttribute("ProductPack", "ALL");

            //Insert variant to ALL
            Row rowVariant =
                iterVariant.getNavigatableRowIterator().createRow();
            rowVariant.setNewRowState(Row.STATUS_INITIALIZED);
            rowVariant.setAttribute("PromoProdukId", PromoProdukIdSel);
            rowVariant.setAttribute("ProdVariant", "ALL");
            rowVariant.setAttribute("VariantDesc", "ALL");
            iterVariant.getRowSetIterator().insertRow(rowVariant);

            itlovProdBrand.setValue("ALL");
            itlovProdExtention.setValue("ALL");
            itlovProdPackaging.setValue("ALL");
        } else {
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ValidComb", "N");
            itValidComb.setValue("N");
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
        ctx.addPartialTarget(itlovProdBrand);
        ctx.addPartialTarget(itlovProdExtention);
        ctx.addPartialTarget(itlovProdPackaging);
        ctx.addPartialTarget(itVariant);
        ctx.addPartialTarget(itProductItem);
    }

    public void productBrandChanged(ValueChangeEvent valueChangeEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        String PromoProdukIdSel = "";
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdExtention().setValue(null);
            this.getItlovProdPackaging().setValue(null);
        }

        clearVariantItem(PromoProdukIdSel);

        DCIteratorBinding iterVariant =
            (DCIteratorBinding)binding.get("ProdukVariantView1Iterator");

        if (itlovProdBrand.getValue().toString().equalsIgnoreCase("ALL")) {
            // Update produk extension, packaging to ALL
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ProductExt", "ALL");
            rowProduk.setAttribute("ProductPack", "ALL");

            // Insert variant to ALL
            Row rowVariant =
                iterVariant.getNavigatableRowIterator().createRow();
            rowVariant.setNewRowState(Row.STATUS_INITIALIZED);
            rowVariant.setAttribute("PromoProdukId", PromoProdukIdSel);
            rowVariant.setAttribute("ProdVariant", "ALL");
            rowVariant.setAttribute("VariantDesc", "ALL");
            iterVariant.getRowSetIterator().insertRow(rowVariant);

            itlovProdExtention.setValue("ALL");
            itlovProdPackaging.setValue("ALL");
        } else {
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ValidComb", "N");
            itValidComb.setValue("N");
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
        ctx.addPartialTarget(itlovProdExtention);
        ctx.addPartialTarget(itlovProdPackaging);
        ctx.addPartialTarget(itVariant);
        ctx.addPartialTarget(itProductItem);
    }

    public void productExtentionChanged(ValueChangeEvent valueChangeEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        String PromoProdukIdSel = "";
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdPackaging().setValue(null);
        }

        clearVariantItem(PromoProdukIdSel);

        DCIteratorBinding iterVariant =
            (DCIteratorBinding)binding.get("ProdukVariantView1Iterator");

        if (itlovProdExtention.getValue().toString().equalsIgnoreCase("ALL")) {
            // Update produk packaging to ALL
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ProductPack", "ALL");

            // Insert variant to ALL
            Row rowVariant =
                iterVariant.getNavigatableRowIterator().createRow();
            rowVariant.setNewRowState(Row.STATUS_INITIALIZED);
            rowVariant.setAttribute("PromoProdukId", PromoProdukIdSel);
            rowVariant.setAttribute("ProdVariant", "ALL");
            rowVariant.setAttribute("VariantDesc", "ALL");
            iterVariant.getRowSetIterator().insertRow(rowVariant);

            itlovProdPackaging.setValue("ALL");
        } else {
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ValidComb", "N");
            itValidComb.setValue("N");
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
        ctx.addPartialTarget(itlovProdPackaging);
        ctx.addPartialTarget(itVariant);
        ctx.addPartialTarget(itProductItem);
    }

    public void productPackagingChanged(ValueChangeEvent valueChangeEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        String PromoProdukIdSel = "";
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }

        clearVariantItem(PromoProdukIdSel);
        DCIteratorBinding iterVariant =
            (DCIteratorBinding)binding.get("ProdukVariantView1Iterator");

        if (itlovProdPackaging.getValue().toString().equalsIgnoreCase("ALL")) {
            // Insert variant to ALL
            Row rowVariant =
                iterVariant.getNavigatableRowIterator().createRow();
            rowVariant.setNewRowState(Row.STATUS_INITIALIZED);
            rowVariant.setAttribute("PromoProdukId", PromoProdukIdSel);
            rowVariant.setAttribute("ProdVariant", "ALL");
            rowVariant.setAttribute("VariantDesc", "ALL");
            iterVariant.getRowSetIterator().insertRow(rowVariant);
        } else {
            Row rowProduk = iterProduk.getCurrentRow();
            rowProduk.setAttribute("ValidComb", "N");
            itValidComb.setValue("N");
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
        ctx.addPartialTarget(itVariant);
        ctx.addPartialTarget(itProductItem);

        linkVariant.setDisabled(false);
        linkProduct.setDisabled(false);
        AdfFacesContext.getCurrentInstance().addPartialTarget(linkVariant);
        AdfFacesContext.getCurrentInstance().addPartialTarget(linkProduct);
    }

    public void clearVariantItem(String PromoProdukIdSel) {
        BindingContainer binding = getBindings();
        //Remove whole produk variant
        DCIteratorBinding iterVariant =
            (DCIteratorBinding)binding.get("ProdukVariantView1Iterator");
        ProdukVariantViewImpl prodVariantVo =
            (ProdukVariantViewImpl)iterVariant.getViewObject();
        prodVariantVo.setNamedWhereClauseParam("ppid", PromoProdukIdSel);
        prodVariantVo.executeQuery();
        if (prodVariantVo.getEstimatedRowCount() > 0) {
            while (prodVariantVo.hasNext()) {
                Row r = prodVariantVo.next();
                //System.out.println("REM**PROMO PROD ID: " + r.getAttribute("PromoProdukId") + " ; VARIANT : " + r.getAttribute("ProdVariant"));
                r.remove();
            }
        }

        //Remove whole produk item
        DCIteratorBinding iterProdItem =
            (DCIteratorBinding)binding.get("ProdukItemView1Iterator");
        ProdukItemViewImpl prodItemVo =
            (ProdukItemViewImpl)iterProdItem.getViewObject();
        prodItemVo.setNamedWhereClauseParam("ppid", PromoProdukIdSel);
        prodItemVo.executeQuery();
        //System.out.println("**RSI PROD ITEM: " + prodItemVo.getEstimatedRowCount());
        if (prodItemVo.getEstimatedRowCount() > 0) {
            while (prodItemVo.hasNext()) {
                Row r = prodItemVo.next();
                //System.out.println("REM**PROMO PROD ID: " + r.getAttribute("PromoProdukId") + " ; ITEM : " + r.getAttribute("ProdItem"));
                r.remove();
            }
        }
    }

    public void setItlovProdClass(RichInputListOfValues itlovProdClass) {
        this.itlovProdClass = itlovProdClass;
    }

    public RichInputListOfValues getItlovProdClass() {
        return itlovProdClass;
    }

    public void setItlovProdBrand(RichInputListOfValues itlovProdBrand) {
        this.itlovProdBrand = itlovProdBrand;
    }

    public RichInputListOfValues getItlovProdBrand() {
        return itlovProdBrand;
    }

    public void setItlovProdExtention(RichInputListOfValues itlovProdExtention) {
        this.itlovProdExtention = itlovProdExtention;
    }

    public RichInputListOfValues getItlovProdExtention() {
        return itlovProdExtention;
    }

    public void setItlovProdPackaging(RichInputListOfValues itlovProdPackaging) {
        this.itlovProdPackaging = itlovProdPackaging;
    }

    public RichInputListOfValues getItlovProdPackaging() {
        return itlovProdPackaging;
    }

    public void setItlovProdClassAddBuy(RichInputListOfValues itlovProdClassAddBuy) {
        this.itlovProdClassAddBuy = itlovProdClassAddBuy;
    }

    public RichInputListOfValues getItlovProdClassAddBuy() {
        return itlovProdClassAddBuy;
    }

    public void setItlovProdBrandAddBuy(RichInputListOfValues itlovProdBrandAddBuy) {
        this.itlovProdBrandAddBuy = itlovProdBrandAddBuy;
    }

    public RichInputListOfValues getItlovProdBrandAddBuy() {
        return itlovProdBrandAddBuy;
    }

    public void setItlovProdExtAddBuy(RichInputListOfValues itlovProdExtAddBuy) {
        this.itlovProdExtAddBuy = itlovProdExtAddBuy;
    }

    public RichInputListOfValues getItlovProdExtAddBuy() {
        return itlovProdExtAddBuy;
    }

    public void setItlovProdPackAddBuy(RichInputListOfValues itlovProdPackAddBuy) {
        this.itlovProdPackAddBuy = itlovProdPackAddBuy;
    }

    public RichInputListOfValues getItlovProdPackAddBuy() {
        return itlovProdPackAddBuy;
    }

    public void setItlovProdClassBonus(RichInputListOfValues itlovProdClassBonus) {
        this.itlovProdClassBonus = itlovProdClassBonus;
    }

    public RichInputListOfValues getItlovProdClassBonus() {
        return itlovProdClassBonus;
    }

    public void setItlovProdBrandBonus(RichInputListOfValues itlovProdBrandBonus) {
        this.itlovProdBrandBonus = itlovProdBrandBonus;
    }

    public RichInputListOfValues getItlovProdBrandBonus() {
        return itlovProdBrandBonus;
    }

    public void setItlovProdExtBonus(RichInputListOfValues itlovProdExtBonus) {
        this.itlovProdExtBonus = itlovProdExtBonus;
    }

    public RichInputListOfValues getItlovProdExtBonus() {
        return itlovProdExtBonus;
    }

    public void setItlovProdPackBonus(RichInputListOfValues itlovProdPackBonus) {
        this.itlovProdPackBonus = itlovProdPackBonus;
    }

    public RichInputListOfValues getItlovProdPackBonus() {
        return itlovProdPackBonus;
    }

    public void productCategoryAddBuyChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdClassAddBuy().setValue(null);
            this.getItlovProdBrandAddBuy().setValue(null);
            this.getItlovProdExtAddBuy().setValue(null);
            this.getItlovProdPackAddBuy().setValue(null);
        }
    }

    public void productClassAddBuyChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdBrandAddBuy().setValue(null);
            this.getItlovProdExtAddBuy().setValue(null);
            this.getItlovProdPackAddBuy().setValue(null);

        }
        if (itlovProdClassAddBuy.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("AddBuyVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            BindingContainer bindings1 = getBindings();
            OperationBinding operationBinding1 =
                bindings1.getOperationBinding("Commit");
            Object result1 = operationBinding1.execute();
            Row row = iter.getNavigatableRowIterator().createRow();

            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoAddBuyView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoAddbuyRow = voTableData.getCurrentRow();
            String PromoAddBuyId =
                ((DBSequence)promoAddbuyRow.getAttribute("PromoAddBuyId")).toString();

            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoAddBuyId", PromoAddBuyId);
            row.setAttribute("ProdVariant", "ALL");
            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            iter.executeQuery();

            itlovProdBrandAddBuy.setValue("ALL");
            itlovProdExtAddBuy.setValue("ALL");
            itlovProdPackAddBuy.setValue("ALL");

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itlovProdBrandAddBuy);
            ctx.addPartialTarget(itlovProdExtAddBuy);
            ctx.addPartialTarget(itlovProdPackAddBuy);
            ctx.addPartialTarget(itVariantAddBuy);
            ctx.addPartialTarget(tblListProductAddBuy);
        }
    }

    public void productBrandAddBuyChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdExtAddBuy().setValue(null);
            this.getItlovProdPackAddBuy().setValue(null);

        }

        if (itlovProdBrandAddBuy.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("AddBuyVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            Row row = iter.getNavigatableRowIterator().createRow();
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoAddBuyView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoAddbuyRow = voTableData.getCurrentRow();
            String PromoAddBuyId =
                ((DBSequence)promoAddbuyRow.getAttribute("PromoAddBuyId")).toString();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoAddBuyId", PromoAddBuyId);
            row.setAttribute("ProdVariant", "ALL");

            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();
            itlovProdExtAddBuy.setValue("ALL");
            itlovProdPackAddBuy.setValue("ALL");

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itlovProdExtAddBuy);
            ctx.addPartialTarget(itlovProdPackAddBuy);
            ctx.addPartialTarget(itVariantAddBuy);
            ctx.addPartialTarget(tblListProductAddBuy);
        }
    }

    public void productExtentionAddBuyChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdPackAddBuy().setValue(null);
        }
        if (itlovProdExtAddBuy.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("AddBuyVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            Row row = iter.getNavigatableRowIterator().createRow();
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoAddBuyView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoAddbuyRow = voTableData.getCurrentRow();
            String PromoAddBuyId =
                ((DBSequence)promoAddbuyRow.getAttribute("PromoAddBuyId")).toString();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoAddBuyId", PromoAddBuyId);
            row.setAttribute("ProdVariant", "ALL");

            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();
            itlovProdPackAddBuy.setValue("ALL");

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itlovProdPackAddBuy);
            ctx.addPartialTarget(itVariantAddBuy);
            ctx.addPartialTarget(tblListProductAddBuy);
        }
    }

    public void productPackAddBuyChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            DCIteratorBinding dciterItem =
                ADFUtils.findIterator("AddBuyVariantView1Iterator");
            RowSetIterator rsiItem = dciterItem.getRowSetIterator();
            for (Row itemRow : dciterItem.getAllRowsInRange()) {
                itemRow.remove();
            }

            rsiItem.closeRowSetIterator();
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoAddBuyView1Iterator");
            dciter.executeQuery();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itVariantAddBuy);
            ctx.addPartialTarget(tblListProductAddBuy);
        }
        if (itlovProdPackAddBuy.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("AddBuyVariantView1Iterator");
            if (iter.getEstimatedRowCount() > 0) {
                for (Row r : iter.getAllRowsInRange()) {
                    r.remove();
                }
            }
            Row row = iter.getNavigatableRowIterator().createRow();
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoAddBuyView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoAddbuyRow = voTableData.getCurrentRow();
            String PromoAddBuyId =
                ((DBSequence)promoAddbuyRow.getAttribute("PromoAddBuyId")).toString();
            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoAddBuyId", PromoAddBuyId);
            row.setAttribute("ProdVariant", "ALL");

            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itVariantAddBuy);
            ctx.addPartialTarget(tblListProductAddBuy);
        }
        DCIteratorBinding dciterItem =
            ADFUtils.findIterator("AddBuyProdItemView1Iterator");
        RowSetIterator rsiItem = dciterItem.getRowSetIterator();
        for (Row itemRow : dciterItem.getAllRowsInRange()) {
            itemRow.remove();
        }
        rsiItem.closeRowSetIterator();
    }

    public void productCategoryBonusChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdClassBonus().setValue(null);
            this.getItlovProdBrandBonus().setValue(null);
            this.getItlovProdExtBonus().setValue(null);
            this.getItlovProdPackBonus().setValue(null);

            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            DCIteratorBinding dciterItem =
                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
            RowSetIterator rsiItem = dciterItem.getRowSetIterator();
            for (Row itemRow : dciterItem.getAllRowsInRange()) {
                itemRow.remove();
            }
            rsiItem.closeRowSetIterator();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        }
    }

    public void productClassBonusChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdBrandBonus().setValue(null);
            this.getItlovProdExtBonus().setValue(null);
            this.getItlovProdPackBonus().setValue(null);
        }
        if (itlovProdClassBonus.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }

            Row row = iter.getNavigatableRowIterator().createRow();

            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoBonusRow = voTableData.getCurrentRow();
            String PromoBonusId =
                ((DBSequence)promoBonusRow.getAttribute("PromoBonusId")).toString();

            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoBonusId", PromoBonusId);
            row.setAttribute("ProdVariant", "ALL");
            row.setAttribute("VariantDesc", "ALL");
            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            itlovProdBrandBonus.setValue("ALL");
            itlovProdExtBonus.setValue("ALL");
            itlovProdPackBonus.setValue("ALL");

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itlovProdBrandBonus);
            ctx.addPartialTarget(itlovProdExtBonus);
            ctx.addPartialTarget(itlovProdPackBonus);
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        } else {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            DCIteratorBinding dciterItem =
                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
            RowSetIterator rsiItem = dciterItem.getRowSetIterator();
            for (Row itemRow : dciterItem.getAllRowsInRange()) {
                itemRow.remove();
            }
            rsiItem.closeRowSetIterator();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        }
    }

    public void productBrandBonusChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdExtBonus().setValue(null);
            this.getItlovProdPackBonus().setValue(null);
        }

        if (itlovProdBrandBonus.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }

            Row row = iter.getNavigatableRowIterator().createRow();

            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoBonusRow = voTableData.getCurrentRow();
            String PromoBonusId =
                ((DBSequence)promoBonusRow.getAttribute("PromoBonusId")).toString();

            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoBonusId", PromoBonusId);
            row.setAttribute("ProdVariant", "ALL");
            row.setAttribute("VariantDesc", "ALL");
            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            itlovProdExtBonus.setValue("ALL");
            itlovProdPackBonus.setValue("ALL");

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();

            ctx.addPartialTarget(itlovProdExtBonus);
            ctx.addPartialTarget(itlovProdPackBonus);
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        } else {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            DCIteratorBinding dciterItem =
                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
            RowSetIterator rsiItem = dciterItem.getRowSetIterator();
            for (Row itemRow : dciterItem.getAllRowsInRange()) {
                itemRow.remove();
            }
            rsiItem.closeRowSetIterator();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        }
    }

    public void productExtentionBonusChanged(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            this.getItlovProdPackBonus().setValue(null);
        }
        if (itlovProdExtBonus.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }

            Row row = iter.getNavigatableRowIterator().createRow();

            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoBonusRow = voTableData.getCurrentRow();
            String PromoBonusId =
                ((DBSequence)promoBonusRow.getAttribute("PromoBonusId")).toString();

            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoBonusId", PromoBonusId);
            row.setAttribute("ProdVariant", "ALL");
            row.setAttribute("VariantDesc", "ALL");
            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            itlovProdPackBonus.setValue("ALL");
            itlovPriceBasedPromoBarang.setValue("MANUAL");
            itPricePromoBonus.setValue(0);
            itPricePromoBonus.setDisabled(false);

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itlovProdPackBonus);
            ctx.addPartialTarget(itPricePromoBonus);
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
            ctx.addPartialTarget(itlovPriceBasedPromoBarang);
        } else {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            DCIteratorBinding dciterItem =
                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
            RowSetIterator rsiItem = dciterItem.getRowSetIterator();
            for (Row itemRow : dciterItem.getAllRowsInRange()) {
                itemRow.remove();
            }
            rsiItem.closeRowSetIterator();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        }
    }

    public void productPackBonusChanged(ValueChangeEvent valueChangeEvent) {
        if (itlovProdPackBonus.getValue().toString().equalsIgnoreCase("ALL")) {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");

            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            Row row = iter.getNavigatableRowIterator().createRow();

            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            ViewObject voTableData = dciter.getViewObject();
            Row promoBonusRow = voTableData.getCurrentRow();
            String PromoBonusId =
                ((DBSequence)promoBonusRow.getAttribute("PromoBonusId")).toString();

            row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("PromoBonusId", PromoBonusId);
            row.setAttribute("ProdVariant", "ALL");
            row.setAttribute("VariantDesc", "ALL");
            iter.getRowSetIterator().insertRow(row);
            iter.setCurrentRowWithKey(row.getKey().toStringFormat(true));
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();
            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        } else {
            BindingContext bctx = BindingContext.getCurrent();
            DCBindingContainer binding =
                (DCBindingContainer)bctx.getCurrentBindingsEntry();
            DCIteratorBinding iter =
                (DCIteratorBinding)binding.get("PromoBonusVariantView1Iterator");
            DCIteratorBinding dciter =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            for (Row r : iter.getAllRowsInRange()) {
                r.remove();
            }
            BindingContainer bindings = getBindings();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            dciter.executeQuery();

            DCIteratorBinding dciterItem =
                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
            RowSetIterator rsiItem = dciterItem.getRowSetIterator();
            for (Row itemRow : dciterItem.getAllRowsInRange()) {
                itemRow.remove();
            }
            rsiItem.closeRowSetIterator();

            AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
            ctx.addPartialTarget(itBonusVariant);
            ctx.addPartialTarget(tblListProductBonus);
        }
    }

    public void windowVariantAddBuyReturnListener(ReturnEvent returnEvent) {

        DCIteratorBinding dciterProdVariant =
            ADFUtils.findIterator("AddBuyVariantView1Iterator");
        if (dciterProdVariant.getEstimatedRowCount() == 1) {
            RowSetIterator rsiProdVariant =
                dciterProdVariant.getRowSetIterator();
            Row prodVariantRow = rsiProdVariant.first();
            if (!prodVariantRow.getAttribute("ProdVariant").toString().equalsIgnoreCase("ALL")) {
                DCIteratorBinding dciterProdItem =
                    ADFUtils.findIterator("AddBuyProdItemView1Iterator");
                RowSetIterator rsiProdItem =
                    dciterProdItem.getRowSetIterator();
                for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                    prodItemRow.remove();
                }
                rsiProdItem.closeRowSetIterator();
            }
        } else {
            DCIteratorBinding dciterProdItem =
                ADFUtils.findIterator("AddBuyProdItemView1Iterator");
            RowSetIterator rsiProdItem = dciterProdItem.getRowSetIterator();
            for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                prodItemRow.remove();
            }
            rsiProdItem.closeRowSetIterator();
        }

        BindingContainer bindings = this.getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoAddBuy");
        operationBinding.execute();
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductAddBuy);
    }

    public void windowItemAddBuyReturnListener(ReturnEvent returnEvent) {
        BindingContainer bindings = this.getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoAddBuy");
        operationBinding.execute();
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductAddBuy);
    }

    public void windowVariantBonusReturnListener(ReturnEvent returnEvent) {

        DCIteratorBinding dciterProdVariant =
            ADFUtils.findIterator("PromoBonusVariantView1Iterator");
        if (dciterProdVariant.getEstimatedRowCount() == 1) {
            RowSetIterator rsiProdVariant =
                dciterProdVariant.getRowSetIterator();
            Row prodVariantRow = rsiProdVariant.first();
            if (!prodVariantRow.getAttribute("ProdVariant").toString().equalsIgnoreCase("ALL")) {
                DCIteratorBinding dciterProdItem =
                    ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
                RowSetIterator rsiProdItem =
                    dciterProdItem.getRowSetIterator();
                for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                    prodItemRow.remove();
                }
                rsiProdItem.closeRowSetIterator();
            }
        } else {
            DCIteratorBinding dciterProdItem =
                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
            RowSetIterator rsiProdItem = dciterProdItem.getRowSetIterator();
            for (Row prodItemRow : dciterProdItem.getAllRowsInRange()) {
                prodItemRow.remove();
            }
            rsiProdItem.closeRowSetIterator();
        }

        BindingContainer bindings = this.getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoBonus");
        operationBinding.execute();
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
    }

    public void windowItemBonusReturnListener(ReturnEvent returnEvent) {
        BindingContainer bindings = this.getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoBonus");
        operationBinding.execute();
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
    }

    public void setTblListProductBonus(RichTable tblListProductBonus) {
        this.tblListProductBonus = tblListProductBonus;
    }

    public RichTable getTblListProductBonus() {
        return tblListProductBonus;
    }

    public void setTblListProductAddBuy(RichTable tblListProductAddBuy) {
        this.tblListProductAddBuy = tblListProductAddBuy;
    }

    public RichTable getTblListProductAddBuy() {
        return tblListProductAddBuy;
    }

    public void saveAll(ActionEvent actionEvent) {
        BindingContainer bindings = this.getBindings();

        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String userType = userData.getUserType();

        AdfFacesContext context = AdfFacesContext.getCurrentInstance();
        Map vScope = context.getViewScope();
        vScope.put("Action", "save");
        Key keyRow = (Key)vScope.get("ProdRowKey");

        DCIteratorBinding dciterPromoProduk =
            ADFUtils.findIterator("PromoProdukView1Iterator");

        Key promoProdKey = null;
        Integer rowStatus = null;
        String rowProdVariant = "";
        if (dciterPromoProduk.getEstimatedRowCount() > 0) {
            rowStatus =
                    (Integer)dciterPromoProduk.getCurrentRow().getAttribute("CheckRowStatus");
            rowProdVariant =
                    dciterPromoProduk.getCurrentRow().getAttribute("ProductVariant") ==
                    null ? "" :
                    dciterPromoProduk.getCurrentRow().getAttribute("ProductVariant").toString();

            if (keyRow != null) {
                promoProdKey = keyRow;
            } else {
                promoProdKey = dciterPromoProduk.getCurrentRow().getKey();
            }
        }

        // Validate product category combination
        HashMap<Integer, String> prodIdComb = new HashMap<Integer, String>();
        int v = 0;
        for (Row currRow : dciterPromoProduk.getAllRowsInRange()) {
            String prodCategory =
                (String)currRow.getAttribute("ProductCategory");
            String prodClass = (String)currRow.getAttribute("ProductClass");
            String prodBrand = (String)currRow.getAttribute("ProductBrand");
            String prodExt = (String)currRow.getAttribute("ProductExt");
            String prodPack = (String)currRow.getAttribute("ProductPack");
            String prodCombination =
                prodCategory + "." + prodClass + "." + prodBrand + "." +
                prodExt + "." + prodPack;

            String promoProdId =
                String.valueOf(((DBSequence)currRow.getAttribute("PromoProdukId")).getValue());
            String prodIdCombVal = promoProdId + ";" + prodCombination;
            prodIdComb.put(v, prodIdCombVal);
            v = v + 1;
        }

        for (int j = 0; j < prodIdComb.size(); j++) {
            String prodIdCombMap = prodIdComb.get(j);
            String[] output = prodIdCombMap.split(";");
            String promoProdId = output[0].trim();
            String prodCombination = output[1].trim();
            ProdVariantValidationViewImpl prodVariant =
                promoProposalAM.getProdVariantValidationView1();
            prodVariant.setNamedWhereClauseParam("promoProdukId",
                                                 promoProdId.trim());
            prodVariant.executeQuery();

            String rowIsValid = "T";
            if (prodVariant.getEstimatedRowCount() > 0) {
                Row currVariantRow = null;
                while (prodVariant.hasNext()) {
                    currVariantRow = prodVariant.next();
                    String currProdVariant =
                        (String)currVariantRow.getAttribute("ProdVariant");
                    String fullComb = prodCombination + "." + currProdVariant;
                    if (fullComb != null) {
                        FcsViewCategCombinationViewImpl catCombView =
                            promoProposalAM.getFcsViewCategCombinationView1();
                        catCombView.setNamedWhereClauseParam("combVal",
                                                             fullComb);
                        catCombView.executeQuery();

                        if (catCombView.getEstimatedRowCount() == 1 &&
                            rowIsValid.equalsIgnoreCase("T")) {
                            updateValidComb(promoProdId.trim(), "Y");
                        } else {
                            updateValidComb(promoProdId.trim(), "N");
                            rowIsValid = "F";
                        }
                    }
                }
            } else {
                updateValidComb(promoProdId.trim(), "N");
                rowIsValid = "F";
            }
        }

        if (userType.equalsIgnoreCase(userArea)) {
            //***USER AREA ***
            DCIteratorBinding dciterCustArea =
                ADFUtils.findIterator("PromoCustomerAreaView1Iterator");

            Integer cekCustArea = (int)dciterCustArea.getEstimatedRowCount();

            Boolean isSavedValid = true;
            String sSavedMsg = "";
            /* REMOVE VALIDATION - START
            if (!(cekArea > 0 || cekCustomer > 0 || cekRegion > 0 ||
                  cekLoc > 0 || cekCustGroup > 0 || cekCustType > 0)) {
                //***sSavedMsg += "Customer dengan tipe \"" + custTypeArea +  "\" masih kosong, harus diisi.";
                isSavedValid = false;
            }

            PromoProdukViewImpl promoProdukVo =
                (PromoProdukViewImpl)promoProposalAM.getPromoProdukView1();
            promoProdukVo.setWhereClause("PromoProduk.PROPOSAL_ID = " +
                                         proposalId.getValue());
            promoProdukVo.executeQuery();

            ViewObject produkVo = dciterPromoProduk.getViewObject();
            RowSetIterator rsiProduk = produkVo.createRowSetIterator(null);
            int i = 1;
            while (rsiProduk.hasNext()) {
                Row produkRow = rsiProduk.next();
                String validComb = (String)produkRow.getAttribute("ValidComb");
                //Validasi produk combination
                if (validComb.equalsIgnoreCase("N")) {
                    if (!isSavedValid) {
                        //***sSavedMsg += "<nr> ";
                    }
                    //***sSavedMsg += "Kombinasi produk pada baris (" + i + ") belum valid.";
                    isSavedValid = false;
                }

                // Validasi Tab "Biaya" / "Promo Barang" / "Potongan"
                if (discType.equalsIgnoreCase(discTypeBiaya)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number biayaNonYearly =
                            (Number)produkRow.getAttribute("BiaOntop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BiaOntop");
                        Number biayaYearly =
                            (Number)produkRow.getAttribute("BiaMf") == null ?
                            zeroNum :
                            (Number)produkRow.getAttribute("BiaMf");
                        if ((biayaNonYearly == null && biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly.compareTo(zeroNum) == 0) ||
                            (biayaNonYearly == null &&
                             biayaYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                //***sSavedMsg += "<nr> ";
                            }
                            //***sSavedMsg +=  "Value Target atau Biaya \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" + i + ") belum diisi.";
                            isSavedValid = false;
                        }
                    }
                } else if (discType.equalsIgnoreCase(discTypePromoBarang)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number promoNonYearly =
                            (Number)produkRow.getAttribute("BrgBonusOnTop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BrgBonusOnTop");
                        Number promoYearly =
                            (Number)produkRow.getAttribute("BrgBonusMf") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BrgBonusMf");
                        if ((promoNonYearly == null && promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly.compareTo(zeroNum) == 0) ||
                            (promoNonYearly == null &&
                             promoYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                //***sSavedMsg += "<nr> ";
                            }
                            //***sSavedMsg += "Value Target atau Promo Bonus \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" + i + ") belum diisi.";
                            isSavedValid = false;
                        }
                    }
                } else if (discType.equalsIgnoreCase(discTypePotongan)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number discNonYearly =
                            (Number)produkRow.getAttribute("DiscOnTop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("DiscOnTop");
                        Number discYearly =
                            (Number)produkRow.getAttribute("DiscMf") == null ?
                            zeroNum :
                            (Number)produkRow.getAttribute("DiscMf");
                        if ((discNonYearly == null && discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly.compareTo(zeroNum) == 0) ||
                            (discNonYearly == null &&
                             discYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                //***sSavedMsg += "<nr> ";
                            }
                            //***sSavedMsg += "Value Target atau Potongan \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" + i + ") belum diisi.";
                            isSavedValid = false;
                        }
                    }
                }
                i = i + 1;
            }
            //rsiProduk.closeRowSetIterator();
            REMOVE VALIDATION - END */

            if (isSavedValid) {
                Integer valFoodDate = savePpAll();
                if (valFoodDate.compareTo(1) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo FOOD minimal harus untuk H+7",
                                   potmessage);
                } else if (valFoodDate.compareTo(2) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10",
                                   potmessage);
                } else if (valFoodDate.compareTo(3) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                                   potmessage);
                } else {
                    /* REMOVE VALIDATION - START
                    if (dciterPromoProduk.getEstimatedRowCount() == 0) {
                        //***sSavedMsg = "Data sudah disimpan, dengan catatan sebagai berikut:<nr><nr>List produk belum terisi.";
                        //***showPopup(sSavedMsg, potmessage);
                    }
                    REMOVE VALIDATION - END */
                }
            } else {
                Integer valFoodDate = savePpAll();
                if (valFoodDate.compareTo(1) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo FOOD minimal harus untuk H+7",
                                   potmessage);
                } else if (valFoodDate.compareTo(2) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10",
                                   potmessage);
                } else if (valFoodDate.compareTo(3) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                                   potmessage);
                } else {
                    /* REMOVE VALIDATION - START
                    //***sSavedMsg = "Data sudah disimpan, dengan catatan sebagai berikut:<nr><nr>" + sSavedMsg;
                    if (promoProdukVo.getEstimatedRowCount() > 0) {
                        if (rowStatus.equals(0) && rowProdVariant.equalsIgnoreCase("")) {
                            //***sSavedMsg = sSavedMsg + "<nr>Kombinasi produk pada baris (" + i +") belum valid.";
                        }
                    } else {
                        //***sSavedMsg = sSavedMsg + "<nr>List produk belum terisi.";
                    }
                    //***showPopup(sSavedMsg, potmessage);
                    REMOVE VALIDATION - END */
                }
            }
            /* REMOVE VALIDATION - START
            promoProdukVo.setWhereClause(null);
            promoProdukVo.executeQuery();
            REMOVE VALIDATION - END */
        } else {
            //*** USER HO ***
            Boolean isSavedValid = true;
            String sSavedMsg = "";

            /* REMOVE VALIDATION - START
            PromoProdukViewImpl promoProdukVo =
                (PromoProdukViewImpl)promoProposalAM.getPromoProdukView1();
            promoProdukVo.setWhereClause("PromoProduk.PROPOSAL_ID = " +
                                         proposalId.getValue());
            promoProdukVo.executeQuery();

            ViewObject produkVo = dciterPromoProduk.getViewObject();
            RowSetIterator rsiProduk = produkVo.createRowSetIterator(null);
            int i = 1;
            while (rsiProduk.hasNext()) {
                Row produkRow = rsiProduk.next();
                DBSequence promoProdukId =
                    (DBSequence)produkRow.getAttribute("PromoProdukId");
                String hoCustType =
                    (String)produkRow.getAttribute("RegCustFlag");
                String validComb = (String)produkRow.getAttribute("ValidComb");

                //Validasi produk combination
                if (validComb.equalsIgnoreCase("N")) {
                    if (!isSavedValid) {
                        //***sSavedMsg += "<nr> ";
                    }
                    //***sSavedMsg += "Kombinasi produk pada baris (" + i + ") belum valid.";
                    isSavedValid = false;
                }

                // Validasi "Customer"
                if (hoCustType.equalsIgnoreCase(prodRegion)) {
                    ProdRegionValidationImpl prodRegionVo =
                        promoProposalAM.getProdRegionValidation1();
                    prodRegionVo.setWhereClause("ProdRegion.PROMO_PRODUK_ID = " +
                                                promoProdukId.getValue());
                    prodRegionVo.executeQuery();
                    if (prodRegionVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "Customer dengan tipe \"" + prodRegion + "\" pada produk baris (" + i + ") belum diisi.";
                        isSavedValid = false;
                    }
                } else if (hoCustType.equalsIgnoreCase(prodArea)) {
                    ProdRegionAreaValidationImpl prodRegionAreaVo =
                        promoProposalAM.getProdRegionAreaValidation1();
                    prodRegionAreaVo.setWhereClause("ProdRegionArea.PROMO_PRODUK_ID = " +
                                                    promoProdukId.getValue());
                    prodRegionAreaVo.executeQuery();
                    if (prodRegionAreaVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "Customer dengan tipe \"" + prodArea + "\" pada produk baris (" + i + ") belum diisi.";
                        isSavedValid = false;
                    }
                } else if (hoCustType.equalsIgnoreCase(prodLocation)) {
                    ProdRegionLocValidationImpl prodRegionLocVo =
                        promoProposalAM.getProdRegionLocValidation1();
                    prodRegionLocVo.setWhereClause("ProdRegionLoc.PROMO_PRODUK_ID = " +
                                                   promoProdukId.getValue());
                    prodRegionLocVo.executeQuery();
                    if (prodRegionLocVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "Customer dengan tipe \"" + prodLocation + "\" pada produk baris (" + i + ") belum diisi.";
                        isSavedValid = false;
                    }
                } else if (hoCustType.equalsIgnoreCase(prodCustType)) {
                    ProdRegionCustTypeValidationImpl prodRegionCustTypeVo =
                        promoProposalAM.getProdRegionCustTypeValidation1();
                    prodRegionCustTypeVo.setWhereClause("ProdRegionCustType.PROMO_PRODUK_ID = " +
                                                        promoProdukId.getValue());
                    prodRegionCustTypeVo.executeQuery();
                    if (prodRegionCustTypeVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "Customer dengan tipe \"" + prodCustType + "\" pada produk baris (" + i + ") belum diisi.";
                        isSavedValid = false;
                    }
                } else if (hoCustType.equalsIgnoreCase(prodCustGroup)) {
                    ProdRegionCustGroupValidationImpl prodRegionCustGroupVo =
                        promoProposalAM.getProdRegionCustGroupValidation1();
                    prodRegionCustGroupVo.setWhereClause("ProdRegionCustGroup.PROMO_PRODUK_ID = " +
                                                         promoProdukId.getValue());
                    prodRegionCustGroupVo.executeQuery();
                    if (prodRegionCustGroupVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "Customer dengan tipe \"" + prodCustGroup + "\" pada produk baris (" + i + ") belum diisi.";
                        isSavedValid = false;
                    }
                } else if (hoCustType.equalsIgnoreCase(prodCustomer)) {
                    ProdRegionCustomerValidationImpl prodRegionCustomerVo =
                        promoProposalAM.getProdRegionCustomerValidation1();
                    prodRegionCustomerVo.setWhereClause("ProdRegionCustomer.PROMO_PRODUK_ID = " +
                                                        promoProdukId.getValue());
                    prodRegionCustomerVo.executeQuery();
                    if (prodRegionCustomerVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "Customer dengan tipe \"" + prodCustomer + "\" pada produk baris (" + i + ") belum diisi.";
                        isSavedValid = false;
                    }
                }

                // Validasi Tab "Biaya" / "Promo Barang" / "Potongan"
                if (discType.equalsIgnoreCase(discTypeBiaya)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number biayaNonYearly =
                            (Number)produkRow.getAttribute("BiaOntop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BiaOntop");
                        Number biayaYearly =
                            (Number)produkRow.getAttribute("BiaMf") == null ?
                            zeroNum :
                            (Number)produkRow.getAttribute("BiaMf");
                        if ((biayaNonYearly == null && biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly.compareTo(zeroNum) == 0) ||
                            (biayaNonYearly == null &&
                             biayaYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                //***sSavedMsg += "<nr> ";
                            }
                            //***sSavedMsg += "Value Target atau Biaya \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" + i + ") belum diisi.";
                            isSavedValid = false;
                        }
                    }
                } else if (discType.equalsIgnoreCase(discTypePromoBarang)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number promoNonYearly =
                            (Number)produkRow.getAttribute("BrgBonusOnTop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BrgBonusOnTop");
                        Number promoYearly =
                            (Number)produkRow.getAttribute("BrgBonusMf") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BrgBonusMf");
                        if ((promoNonYearly == null && promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly.compareTo(zeroNum) == 0) ||
                            (promoNonYearly == null &&
                             promoYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                //***sSavedMsg += "<nr> ";
                            }
                            //***sSavedMsg += "Value Target atau Promo Bonus \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" + i + ") belum diisi.";
                            isSavedValid = false;
                        }
                    }
                } else if (discType.equalsIgnoreCase(discTypePotongan)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            //***sSavedMsg += "<nr> ";
                        }
                        //***sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number discNonYearly =
                            (Number)produkRow.getAttribute("DiscOnTop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("DiscOnTop");
                        Number discYearly =
                            (Number)produkRow.getAttribute("DiscMf") == null ?
                            zeroNum :
                            (Number)produkRow.getAttribute("DiscMf");
                        if ((discNonYearly == null && discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly.compareTo(zeroNum) == 0) ||
                            (discNonYearly == null &&
                             discYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                //***sSavedMsg += "<nr> ";
                            }
                            //***sSavedMsg += "Value Target atau Potongan \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" + i + ") belum diisi.";
                            isSavedValid = false;
                        }
                    }
                }
                i = i + 1;
            }
            //rsiProduk.closeRowSetIterator();
            REMOVE VALIDATION - END */

            if (isSavedValid) {
                Integer valFoodDate = savePpAll();
                if (valFoodDate.compareTo(1) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo FOOD minimal harus untuk H+7",
                                   potmessage);
                } else if (valFoodDate.compareTo(2) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10",
                                   potmessage);
                } else if (valFoodDate.compareTo(3) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                                   potmessage);
                } else {
                    /* REMOVE VALIDATION - START
                    if (dciterPromoProduk.getEstimatedRowCount() == 0) {
                        //***sSavedMsg = "Data sudah disimpan, dengan catatan sebagai berikut:<nr><nr>List produk belum terisi.";
                        //***showPopup(sSavedMsg, potmessage);
                    }
                    REMOVE VALIDATION - END */
                }
            } else {
                Integer valFoodDate = savePpAll();
                if (valFoodDate.compareTo(1) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo FOOD minimal harus untuk H+7",
                                   potmessage);
                } else if (valFoodDate.compareTo(2) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10",
                                   potmessage);
                } else if (valFoodDate.compareTo(3) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                                   potmessage);
                } else {
                    /* REMOVE VALIDATION - START
                    //***sSavedMsg = "Data sudah disimpan, dengan catatan sebagai berikut:<nr><nr>" + sSavedMsg;
                    if (promoProdukVo.getEstimatedRowCount() > 0) {
                        if (rowStatus.equals(0) && rowProdVariant.equalsIgnoreCase("")) {
                            //***sSavedMsg = sSavedMsg + "<nr>Kombinasi produk pada baris (" + i +") belum valid.";
                        }
                    } else {
                        //***sSavedMsg = sSavedMsg + "<nr>List produk belum terisi.";
                    }
                    //***showPopup(sSavedMsg, potmessage);
                    REMOVE VALIDATION - END */
                }
            }

            /* REMOVE VALIDATION - START
            promoProdukVo.setWhereClause(null);
            promoProdukVo.executeQuery();
            REMOVE VALIDATION - END */
        }

        Row foundRows = null;
        try {
            foundRows =
                    dciterPromoProduk.findRowByKeyString(promoProdKey.toStringFormat(true));
        } catch (Exception e) {
            foundRows = null;
        }
        if (promoProdKey != null && foundRows != null) {
            dciterPromoProduk.setCurrentRowWithKey(promoProdKey.toStringFormat(true));
        }

        // Destroy view scope
        if (keyRow != null) {
            AdfFacesContext.getCurrentInstance().getViewScope().put("ProdRowKey",
                                                                    null);
        }
    }

    private Integer savePpAll() {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        Integer valFoodDate = 0;

        AdfFacesContext context = AdfFacesContext.getCurrentInstance();
        Map vScope = context.getViewScope();
        Key keyRow = (Key)vScope.get("ProdRowKey");

        DCIteratorBinding dciter =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        Key promoProdKey = null;
        if (dciter.getEstimatedRowCount() > 0) {
            if (keyRow != null) {
                promoProdKey = keyRow;
            } else {
                promoProdKey = dciter.getCurrentRow().getKey();
            }
        }

        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String usrType =
            userData.getUserType() == null ? "" : userData.getUserType();

        boolean backDateOk = false;
        boolean validateH1H7 = true;

        java.util.Date date2 =
            new java.util.Date(idPeriodProgFrom.getValue().toString());
        java.util.Date today = new java.util.Date();

        Calendar calYesterday = Calendar.getInstance();
        calYesterday.setTime(today);
        calYesterday.add(Calendar.DATE, -1);
        Date yesterday = calYesterday.getTime();

        AttributeBinding proposalTypeAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalType");
        Integer propTypeIdx = (Integer)proposalTypeAttr.getInputValue();

        AttributeBinding custTypeAttr =
            (AttributeBinding)bindings.getControlBinding("CustRegFlag");
        String custType =
            (String)custTypeAttr.getInputValue() == null ? "" : (String)custTypeAttr.getInputValue();

        AttributeBinding copySourceAttr =
            (AttributeBinding)bindings.getControlBinding("CopySource");
        String copySource = (String)copySourceAttr.getInputValue();

        AttributeBinding mekPenagihanAttr =
            (AttributeBinding)bindings.getControlBinding("MekanismePenagihan");
        Integer mekPenagihan = (Integer)mekPenagihanAttr.getInputValue();

        ArrayList<String> custRegCodeList = new ArrayList<String>();
        custRegCodeList = validateBlockRegion(custType);

        if (date2.before(yesterday) && usrType.equalsIgnoreCase(userArea)) {
            if (custRegCodeList.contains(backDateBlockRegion) &&
                custRegCodeList.size() == 1) {
                backDateOk = true;
            } else {
                backDateOk = false;
            }
        } else {
            backDateOk = true;
        }

        if (usrType.equalsIgnoreCase(userArea)) {
            if (custRegCodeList.contains(backDateBlockRegion) &&
                custRegCodeList.size() == 1) {
                validateH1H7 = false;
            } else {
                validateH1H7 = true;
            }
        } else {
            validateH1H7 = true;
        }

        Calendar calTodayAdd7 = Calendar.getInstance();
        calTodayAdd7.setTime(today);
        calTodayAdd7.add(Calendar.DATE, 6);

        Calendar calTodayAdd1 = Calendar.getInstance();
        calTodayAdd1.setTime(today);
        // Set time fields to zero
        calTodayAdd1.set(Calendar.HOUR_OF_DAY, 0);
        calTodayAdd1.set(Calendar.MINUTE, 0);
        calTodayAdd1.set(Calendar.SECOND, 0);
        calTodayAdd1.set(Calendar.MILLISECOND, 0);
        calTodayAdd1.add(Calendar.DATE, 1);

        Calendar calTodayAdd10 = Calendar.getInstance();
        calTodayAdd10.setTime(today);
        calTodayAdd10.add(Calendar.DATE, 9);

        if (backDateOk) {
            if (propTypeIdx.compareTo(idxFood) == 0) {
                Date todayAdd7 = calTodayAdd7.getTime();

                if (copySource == null && usrType.equalsIgnoreCase(userArea) &&
                    validateH1H7) {
                    if (date2.after(yesterday) &&
                        date2.compareTo(todayAdd7) < 0) {
                        valFoodDate = 1;
                    } else {
                        valFoodDate = 0;
                    }
                } else {
                    if (mekPenagihan.equals(onInvoice)) {
                        Date todayAdd1 = calTodayAdd1.getTime();
                        if (date2.compareTo(todayAdd1) < 0) {
                            valFoodDate = 3;
                        } else {
                            valFoodDate = 0;
                        }
                    } else {
                        valFoodDate = 0;
                    }
                }
            } else if (propTypeIdx.compareTo(idxNonFood) == 0) {
                Date todayAdd10 = calTodayAdd10.getTime();

                if (copySource == null && usrType.equalsIgnoreCase(userArea) &&
                    validateH1H7) {
                    if (date2.after(yesterday) &&
                        date2.compareTo(todayAdd10) < 0) {
                        valFoodDate = 2;
                    } else {
                        valFoodDate = 0;
                    }
                } else {
                    if (mekPenagihan.equals(onInvoice)) {
                        Date todayAdd1 = calTodayAdd1.getTime();
                        if (date2.compareTo(todayAdd1) < 0) {
                            valFoodDate = 3;
                        } else {
                            valFoodDate = 0;
                        }
                    } else {
                        valFoodDate = 0;
                    }
                }
            } else {
                valFoodDate = 0;
            }

            if (valFoodDate.compareTo(0) == 0) {
                PromoProposalAMImpl promoProposalAM =
                    (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
                ADFContext adfCtx = ADFContext.getCurrent();
                Map pageFlowScope = adfCtx.getPageFlowScope();
                String TipePot =
                    socTipeProposal.getValue() == null ? "" : socTipeProposal.getValue().toString();
                if (TipePot.equalsIgnoreCase("1")) {
                    DCIteratorBinding proposal =
                        ADFUtils.findIterator("ProposalView1Iterator");
                    ViewObject voTableData = proposal.getViewObject();
                    Row rowSelected = voTableData.getCurrentRow();
                    String proposalNum =
                        rowSelected.getAttribute("ProposalNo").toString();
                    if (!proposalNum.equalsIgnoreCase("Auto Generated")) {
                        String proposalId =
                            rowSelected.getAttribute("ProposalId").toString();
                        DCIteratorBinding dciterPP =
                            ADFUtils.findIterator("PromoProdukView1Iterator");
                        ViewObject voTableDataPp = dciterPP.getViewObject();
                        if (dciterPP.getEstimatedRowCount() > 0) {
                            RowSetIterator iterPP =
                                voTableDataPp.createRowSetIterator(null);
                            while (iterPP.hasNext()) {
                                Row rPromoProd = iterPP.next();
                                String PropIdPP =
                                    rPromoProd.getAttribute("ProposalId").toString();
                                if (proposalId.equalsIgnoreCase(PropIdPP)) {
                                    String PromProdId =
                                        rPromoProd.getAttribute("PromoProdukId").toString();
                                    DCIteratorBinding dciterPromBon =
                                        ADFUtils.findIterator("PromoBonusView1Iterator");
                                    ViewObject voTableDataPb =
                                        dciterPromBon.getViewObject();
                                    if (dciterPromBon.getEstimatedRowCount() >
                                        0) {
                                        RowSetIterator iterPb =
                                            voTableDataPb.createRowSetIterator(null);
                                        while (iterPb.hasNext()) {
                                            Row rProMBonus = iterPb.next();
                                            String ProProdIdBon =
                                                rProMBonus.getAttribute("PromoProdukId").toString();
                                            String ProBonId =
                                                rProMBonus.getAttribute("PromoBonusId").toString();
                                            if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                                DCIteratorBinding dciterPromBonVariant =
                                                    ADFUtils.findIterator("PromoBonusVariantView1Iterator");
                                                DCIteratorBinding dciterPromBonProdItem =
                                                    ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
                                                ViewObject voTableDataVarian =
                                                    dciterPromBonVariant.getViewObject();
                                                if (dciterPromBonVariant.getEstimatedRowCount() >
                                                    0) {
                                                    RowSetIterator iterVarian =
                                                        voTableDataVarian.createRowSetIterator(null);
                                                    while (iterVarian.hasNext()) {
                                                        Row rProBonVar =
                                                            iterVarian.next();
                                                        String ProProdIdBonVar =
                                                            rProBonVar.getAttribute("PromoBonusId").toString();
                                                        PreparedStatement delPromoBonusVariantStmt =
                                                            null;
                                                        PreparedStatement delPromoBonusItemStmt =
                                                            null;
                                                        try {
                                                            String SQL =
                                                                "DELETE FROM PROMO_BONUS_VARIANT WHERE PROMO_BONUS_ID =" +
                                                                "'" +
                                                                ProBonId + "'";
                                                            delPromoBonusVariantStmt =
                                                                    promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                               1);
                                                            delPromoBonusVariantStmt.execute();

                                                        } catch (SQLException e) {
                                                            throw new JboException(e.getMessage());
                                                        } finally {
                                                            promoProposalAM.getDBTransaction().commit();
                                                            if (delPromoBonusVariantStmt !=
                                                                null) {
                                                                try {
                                                                    delPromoBonusVariantStmt.close();
                                                                } catch (Exception e) {
                                                                    throw new JboException(e.getMessage());
                                                                }
                                                            }
                                                        }
                                                        //                                                        }
                                                    }
                                                }
                                                PreparedStatement delPromoBonusItemStmt =
                                                    null;
                                                try {
                                                    String SQL =
                                                        "DELETE FROM PROMO_BONUS_PROD_ITEM WHERE PROMO_BONUS_ID =" +
                                                        "'" + ProBonId + "'";
                                                    delPromoBonusItemStmt =
                                                            promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                       1);
                                                    delPromoBonusItemStmt.execute();
                                                } catch (SQLException e) {
                                                    throw new JboException(e.getMessage());
                                                } finally {
                                                    promoProposalAM.getDBTransaction().commit();
                                                    if (delPromoBonusItemStmt !=
                                                        null) {
                                                        try {
                                                            delPromoBonusItemStmt.close();
                                                        } catch (Exception e) {
                                                            throw new JboException(e.getMessage());
                                                        }
                                                    }
                                                }
                                                //                                  }
                                            }
                                            PreparedStatement delPromoBonusStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM PROMO_BONUS WHERE PROMO_BONUS_ID =" +
                                                    "'" + ProBonId + "'";
                                                delPromoBonusStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoBonusStmt.execute();
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoBonusStmt !=
                                                    null) {
                                                    try {
                                                        delPromoBonusStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    DCIteratorBinding dciterDiskon =
                                        ADFUtils.findIterator("DiscountView1Iterator");
                                    ViewObject voTableDataDiskon =
                                        dciterDiskon.getViewObject();
                                    if (dciterDiskon.getEstimatedRowCount() >
                                        0) {
                                        RowSetIterator iterDiskon =
                                            voTableDataDiskon.createRowSetIterator(null);
                                        for (Row rDiskon :
                                             dciterDiskon.getAllRowsInRange()) {
                                            String ProProdIdBon =
                                                rDiskon.getAttribute("PromoProdukId").toString();
                                            if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                                PreparedStatement delPromoDiskonStmt =
                                                    null;
                                                try {
                                                    String SQL =
                                                        "DELETE FROM DISCOUNT WHERE PROMO_PRODUK_ID =" +
                                                        "'" + ProProdIdBon +
                                                        "'";
                                                    delPromoDiskonStmt =
                                                            promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                       1);
                                                    delPromoDiskonStmt.execute();
                                                } catch (SQLException e) {
                                                    throw new JboException(e.getMessage());
                                                } finally {
                                                    promoProposalAM.getDBTransaction().commit();
                                                    if (delPromoDiskonStmt !=
                                                        null) {
                                                        try {
                                                            delPromoDiskonStmt.close();
                                                        } catch (Exception e) {
                                                            throw new JboException(e.getMessage());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                rPromoProd.setAttribute("BrgBonusMf", 0);
                                rPromoProd.setAttribute("BrgBonusOnTop", 0);
                                rPromoProd.setAttribute("BrgBonusRasioMf", 0);
                                rPromoProd.setAttribute("BrgBonusRasioOnTop",
                                                        0);
                                rPromoProd.setAttribute("BrgBonusRasioTotal",
                                                        0);

                                rPromoProd.setAttribute("DiscMf", 0);
                                rPromoProd.setAttribute("DiscOnTop", 0);
                                rPromoProd.setAttribute("DiscRasioMf", 0);
                                rPromoProd.setAttribute("DiscRasioOnTop", 0);
                                rPromoProd.setAttribute("DiscRasioTotal1", 0);
                                dciterPP.getDataControl().commitTransaction();
                            }
                        }
                    }
                } else if (TipePot.equalsIgnoreCase("2")) {
                    DCIteratorBinding proposal =
                        ADFUtils.findIterator("ProposalView1Iterator");
                    ViewObject voTableData = proposal.getViewObject();
                    Row rowSelected = voTableData.getCurrentRow();
                    String proposalNum =
                        rowSelected.getAttribute("ProposalNo").toString();
                    if (!proposalNum.equalsIgnoreCase("Auto Generated")) {
                        String proposalId =
                            rowSelected.getAttribute("ProposalId").toString();
                        DCIteratorBinding dciterPP =
                            ADFUtils.findIterator("PromoProdukView1Iterator");
                        ViewObject voTableDataPp = dciterPP.getViewObject();
                        if (dciterPP.getEstimatedRowCount() > 0) {
                            RowSetIterator iterPP =
                                voTableDataPp.createRowSetIterator(null);
                            while (iterPP.hasNext()) {
                                Row rPromoProd = iterPP.next();
                                String PropIdPP =
                                    rPromoProd.getAttribute("ProposalId").toString();
                                if (proposalId.equalsIgnoreCase(PropIdPP)) {
                                    String PromProdId =
                                        rPromoProd.getAttribute("PromoProdukId").toString();
                                    DCIteratorBinding dciterPromBon =
                                        ADFUtils.findIterator("PromoBonusView1Iterator");
                                    ViewObject voTableDataPb =
                                        dciterPromBon.getViewObject();
                                    if (dciterPromBon.getEstimatedRowCount() >
                                        0) {
                                        RowSetIterator iterPb =
                                            voTableDataPb.createRowSetIterator(null);
                                        while (iterPb.hasNext()) {
                                            Row rProMBonus = iterPb.next();
                                            String ProProdIdBon =
                                                rProMBonus.getAttribute("PromoProdukId").toString();
                                            String ProBonId =
                                                rProMBonus.getAttribute("PromoBonusId").toString();
                                            if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                                DCIteratorBinding dciterPromBonVariant =
                                                    ADFUtils.findIterator("PromoBonusVariantView1Iterator");
                                                DCIteratorBinding dciterPromBonProdItem =
                                                    ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
                                                ViewObject voTableDataVarian =
                                                    dciterPromBonVariant.getViewObject();
                                                if (dciterPromBonVariant.getEstimatedRowCount() >
                                                    0) {
                                                    RowSetIterator iterVarian =
                                                        voTableDataVarian.createRowSetIterator(null);
                                                    //                                      for(Row rProBonVar:dciterPromBonVariant.getAllRowsInRange()){
                                                    while (iterVarian.hasNext()) {
                                                        Row rProBonVar =
                                                            iterVarian.next();
                                                        String ProProdIdBonVar =
                                                            rProBonVar.getAttribute("PromoBonusId").toString();
                                                        //                                                       System.out.println("promo bonus variant id "+ProProdIdBonVar);
                                                        //                                                        if (ProProdIdBonVar.equalsIgnoreCase(ProBonId)) {
                                                        PreparedStatement delPromoBonusVariantStmt =
                                                            null;
                                                        PreparedStatement delPromoBonusItemStmt =
                                                            null;
                                                        try {
                                                            String SQL =
                                                                "DELETE FROM PROMO_BONUS_VARIANT WHERE PROMO_BONUS_ID =" +
                                                                "'" +
                                                                ProBonId + "'";
                                                            delPromoBonusVariantStmt =
                                                                    promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                               1);
                                                            delPromoBonusVariantStmt.execute();

                                                        } catch (SQLException e) {
                                                            throw new JboException(e.getMessage());
                                                        } finally {
                                                            promoProposalAM.getDBTransaction().commit();
                                                            if (delPromoBonusVariantStmt !=
                                                                null) {
                                                                try {
                                                                    delPromoBonusVariantStmt.close();
                                                                } catch (Exception e) {
                                                                    throw new JboException(e.getMessage());
                                                                }
                                                            }
                                                        }
                                                        //                                                        }
                                                    }
                                                }
                                                PreparedStatement delPromoBonusItemStmt =
                                                    null;
                                                try {
                                                    String SQL =
                                                        "DELETE FROM PROMO_BONUS_PROD_ITEM WHERE PROMO_BONUS_ID =" +
                                                        "'" + ProBonId + "'";
                                                    delPromoBonusItemStmt =
                                                            promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                       1);
                                                    delPromoBonusItemStmt.execute();
                                                } catch (SQLException e) {
                                                    throw new JboException(e.getMessage());
                                                } finally {
                                                    promoProposalAM.getDBTransaction().commit();
                                                    if (delPromoBonusItemStmt !=
                                                        null) {
                                                        try {
                                                            delPromoBonusItemStmt.close();
                                                        } catch (Exception e) {
                                                            throw new JboException(e.getMessage());
                                                        }
                                                    }
                                                }
                                                //                                  }
                                            }
                                            PreparedStatement delPromoBonusStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM PROMO_BONUS WHERE PROMO_BONUS_ID =" +
                                                    "'" + ProBonId + "'";
                                                delPromoBonusStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoBonusStmt.execute();
                                                //                                            System.out.println("PromProdId "+PromProdId);
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoBonusStmt !=
                                                    null) {
                                                    try {
                                                        delPromoBonusStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    DCIteratorBinding dciterBiaya =
                                        ADFUtils.findIterator("BiayaView1Iterator");
                                    ViewObject voTableDataBiaya =
                                        dciterBiaya.getViewObject();
                                    if (dciterBiaya.getEstimatedRowCount() >
                                        0) {
                                        RowSetIterator iterDiskon =
                                            voTableDataBiaya.createRowSetIterator(null);
                                        for (Row rBiaya :
                                             dciterBiaya.getAllRowsInRange()) {
                                            String ProProdIdBia =
                                                rBiaya.getAttribute("PromoProdukId").toString();
                                            if (PromProdId.equalsIgnoreCase(ProProdIdBia)) {
                                                PreparedStatement delPromoDiskonStmt =
                                                    null;
                                                try {
                                                    String SQL =
                                                        "DELETE FROM BIAYA WHERE PROMO_PRODUK_ID =" +
                                                        "'" + ProProdIdBia +
                                                        "'";
                                                    delPromoDiskonStmt =
                                                            promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                       1);
                                                    delPromoDiskonStmt.execute();
                                                    //                                            System.out.println("PromProdId "+PromProdId);
                                                } catch (SQLException e) {
                                                    throw new JboException(e.getMessage());
                                                } finally {
                                                    promoProposalAM.getDBTransaction().commit();
                                                    if (delPromoDiskonStmt !=
                                                        null) {
                                                        try {
                                                            delPromoDiskonStmt.close();
                                                        } catch (Exception e) {
                                                            throw new JboException(e.getMessage());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                rPromoProd.setAttribute("BrgBonusMf", 0);
                                rPromoProd.setAttribute("BrgBonusOnTop", 0);
                                rPromoProd.setAttribute("BrgBonusRasioMf", 0);
                                rPromoProd.setAttribute("BrgBonusRasioOnTop",
                                                        0);
                                rPromoProd.setAttribute("BrgBonusRasioTotal",
                                                        0);

                                rPromoProd.setAttribute("BiaMf", 0);
                                rPromoProd.setAttribute("BiaOntop", 0);
                                rPromoProd.setAttribute("BiaRasioMf", 0);
                                rPromoProd.setAttribute("BiaRasioTotal", 0);
                                rPromoProd.setAttribute("BiaRasionOntop", 0);
                                dciterPP.getDataControl().commitTransaction();
                            }
                        }
                    }
                } else if (TipePot.equalsIgnoreCase("3")) {

                    DCIteratorBinding proposal =
                        ADFUtils.findIterator("ProposalView1Iterator");
                    ViewObject voTableData = proposal.getViewObject();
                    Row rowSelected = voTableData.getCurrentRow();
                    String proposalNum =
                        rowSelected.getAttribute("ProposalNo").toString();
                    if (!proposalNum.equalsIgnoreCase("Auto Generated")) {
                        String proposalId =
                            rowSelected.getAttribute("ProposalId").toString();
                        DCIteratorBinding dciterPP =
                            ADFUtils.findIterator("PromoProdukView1Iterator");
                        ViewObject voTableDataPp = dciterPP.getViewObject();
                        if (dciterPP.getEstimatedRowCount() > 0) {
                            RowSetIterator iterPP =
                                voTableDataPp.createRowSetIterator(null);
                            while (iterPP.hasNext()) {
                                Row rPromoProd = iterPP.next();
                                String PropIdPP =
                                    rPromoProd.getAttribute("ProposalId").toString();
                                if (proposalId.equalsIgnoreCase(PropIdPP)) {
                                    String PromProdId =
                                        rPromoProd.getAttribute("PromoProdukId").toString();
                                    DCIteratorBinding dciterDiskon =
                                        ADFUtils.findIterator("DiscountView1Iterator");
                                    ViewObject voTableDataDiskon =
                                        dciterDiskon.getViewObject();
                                    if (dciterDiskon.getEstimatedRowCount() >
                                        0) {
                                        RowSetIterator iterDiskon =
                                            voTableDataDiskon.createRowSetIterator(null);
                                        for (Row rDiskon :
                                             dciterDiskon.getAllRowsInRange()) {
                                            String ProProdIdBon =
                                                rDiskon.getAttribute("PromoProdukId").toString();
                                            if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                                PreparedStatement delPromoDiskonStmt =
                                                    null;
                                                try {
                                                    String SQL =
                                                        "DELETE FROM DISCOUNT WHERE PROMO_PRODUK_ID =" +
                                                        "'" + ProProdIdBon +
                                                        "'";
                                                    delPromoDiskonStmt =
                                                            promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                       1);
                                                    delPromoDiskonStmt.execute();
                                                } catch (SQLException e) {
                                                    throw new JboException(e.getMessage());
                                                } finally {
                                                    promoProposalAM.getDBTransaction().commit();
                                                    if (delPromoDiskonStmt !=
                                                        null) {
                                                        try {
                                                            delPromoDiskonStmt.close();
                                                        } catch (Exception e) {
                                                            throw new JboException(e.getMessage());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    DCIteratorBinding dciterBiaya =
                                        ADFUtils.findIterator("BiayaView1Iterator");
                                    ViewObject voTableDataBiaya =
                                        dciterBiaya.getViewObject();
                                    if (dciterBiaya.getEstimatedRowCount() >
                                        0) {
                                        RowSetIterator iterDiskon =
                                            voTableDataBiaya.createRowSetIterator(null);
                                        for (Row rBiaya :
                                             dciterBiaya.getAllRowsInRange()) {
                                            String ProProdIdBia =
                                                rBiaya.getAttribute("PromoProdukId").toString();
                                            if (PromProdId.equalsIgnoreCase(ProProdIdBia)) {
                                                PreparedStatement delPromoDiskonStmt =
                                                    null;
                                                try {
                                                    String SQL =
                                                        "DELETE FROM BIAYA WHERE PROMO_PRODUK_ID =" +
                                                        "'" + ProProdIdBia +
                                                        "'";
                                                    delPromoDiskonStmt =
                                                            promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                       1);
                                                    delPromoDiskonStmt.execute();
                                                    //                                            System.out.println("PromProdId "+PromProdId);
                                                } catch (SQLException e) {
                                                    throw new JboException(e.getMessage());
                                                } finally {
                                                    promoProposalAM.getDBTransaction().commit();
                                                    if (delPromoDiskonStmt !=
                                                        null) {
                                                        try {
                                                            delPromoDiskonStmt.close();
                                                        } catch (Exception e) {
                                                            throw new JboException(e.getMessage());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                rPromoProd.setAttribute("DiscMf", 0);
                                rPromoProd.setAttribute("DiscOnTop", 0);
                                rPromoProd.setAttribute("DiscRasioMf", 0);
                                rPromoProd.setAttribute("DiscRasioOnTop", 0);
                                rPromoProd.setAttribute("DiscRasioTotal1", 0);

                                rPromoProd.setAttribute("BiaMf", 0);
                                rPromoProd.setAttribute("BiaOntop", 0);
                                rPromoProd.setAttribute("BiaRasioMf", 0);
                                rPromoProd.setAttribute("BiaRasioTotal", 0);
                                rPromoProd.setAttribute("BiaRasionOntop", 0);
                                dciterPP.getDataControl().commitTransaction();
                            }
                        }
                    }
                } else {
                    //no action
                }
                OperationBinding operationCommitLast =
                    bindings.getOperationBinding("Commit");
                operationCommitLast.execute();

                AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
                AdfFacesContext.getCurrentInstance().addPartialTarget(pgMainDetail);
            } else if (valFoodDate.compareTo(1) == 0) {
                /*
                idPeriodProgFrom.setSubmittedValue(null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                this.showPopup("Pengajuan proposal periode promo FOOD minimal harus untuk H+7",
                               potmessage);
                */
            } else if (valFoodDate.compareTo(2) == 0) {
                /*
                idPeriodProgFrom.setSubmittedValue(null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                this.showPopup("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10",
                               potmessage);
                */
            } else if (valFoodDate.compareTo(3) == 0) {
                /*
                idPeriodProgFrom.setSubmittedValue(null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                               potmessage);
                */
            } else {
                // DO NOTHING
            }
        } else {
            if (custType.equalsIgnoreCase("")) {
                JSFUtils.addFacesWarningMessage("Customer harus diisi terlebih dahulu untuk pengajuan proposal \"Back Date\".");
            } else {
                JSFUtils.addFacesWarningMessage("Pengajuan proposal ini tidak diperkenankan untuk \"Back Date\".");
            }
        }

        return valFoodDate;
    }

    public void updateValidComb(String passProdKey, String validValue) {
        DCIteratorBinding dciter =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        for (Row promoProdRow : dciter.getAllRowsInRange()) {
            String promoProdukId =
                ((DBSequence)promoProdRow.getAttribute("PromoProdukId")).toString();
            if (passProdKey.equalsIgnoreCase(promoProdukId.trim())) {
                promoProdRow.setAttribute("ValidComb", validValue);
            }
        }
    }

    public void setItTargetPercentage(RichInputText itTargetPercentage) {
        this.itTargetPercentage = itTargetPercentage;
    }

    public RichInputText getItTargetPercentage() {
        return itTargetPercentage;
    }

    public void setItTargetValue(RichInputText itTargetValue) {
        this.itTargetValue = itTargetValue;
    }

    public RichInputText getItTargetValue() {
        return itTargetValue;
    }

    public void growthByValueChangeListener(ValueChangeEvent valueChangeEvent) {
        itTargetPercentage.setValue(0);
        itTargetValue.setValue(0);

        AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetPercentage);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetValue);
    }

    public void setItTargetQty(RichInputText itTargetQty) {
        this.itTargetQty = itTargetQty;
    }

    public RichInputText getItTargetQty() {
        return itTargetQty;
    }

    public void setItTargetHarga(RichInputText itTargetHarga) {
        this.itTargetHarga = itTargetHarga;
    }

    public RichInputText getItTargetHarga() {
        return itTargetHarga;
    }

    public void setItValueTotal(RichInputText itValueTotal) {
        this.itValueTotal = itValueTotal;
    }

    public RichInputText getItValueTotal() {
        return itValueTotal;
    }

    public void targetQtyValueChangeListener(ValueChangeEvent valueChangeEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();

        BigDecimal tgtQty =
            new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                           valueChangeEvent.getNewValue() == null ? "0" :
                           valueChangeEvent.getNewValue().toString().replaceAll(",",
                                                                                ""));
        BigDecimal tgtHarga =
            new BigDecimal(itTargetHarga.getValue() == "" ? "0" :
                           itTargetHarga.getValue() == null ? "0" :
                           itTargetHarga.getValue().toString().replaceAll(",",
                                                                          ""));
        BigDecimal totalValue = tgtQty.multiply(tgtHarga);
        oracle.jbo.domain.Number number = null;
        try {
            number =
                    new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
        } catch (SQLException e) {
            JSFUtils.addFacesErrorMessage("Error", e.getLocalizedMessage());
        }
        itValueTotal.setValue(number);

        // Tipe proposal
        AttributeBinding discountType1Attr =
            (AttributeBinding)bindings.getControlBinding("DiscountType1");
        String discountType1 = (String)discountType1Attr.getInputValue();
        if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
            // DO NOTHING
            /*
            DCIteratorBinding dcItteratorBindings = bindings.findIteratorBinding("PromoBonusView1Iterator");
            if (dcItteratorBindings.getEstimatedRowCount() > 0) {
                BigDecimal onTopTotal = BigDecimal.ZERO;
                BigDecimal mfTotal = BigDecimal.ZERO;
                BigDecimal onTopQtyTotal = BigDecimal.ZERO;
                BigDecimal mfQtyTotal = BigDecimal.ZERO;
                BigDecimal rasioOnTop = BigDecimal.ZERO;
                BigDecimal rasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;

                for (Row r : dcItteratorBindings.getAllRowsInRange()) {
                    String rowOnTopVal = r.getAttribute("DiscNonYearly") == null ? "0" : r.getAttribute("DiscNonYearly").toString().replaceAll(",", "");
                    String rowMfVal = r.getAttribute("DiscYearly") == null ? "0" : r.getAttribute("DiscYearly").toString().replaceAll(",", "");

                    BigDecimal valueOnTop = new BigDecimal(rowOnTopVal);
                    BigDecimal valueMf = new BigDecimal(rowMfVal);

                    onTopTotal = onTopTotal.add(valueOnTop);
                    mfTotal = mfTotal.add(valueMf);
                }

                onTopQtyTotal = onTopTotal.multiply(tgtQty);
                mfQtyTotal = mfTotal.multiply(tgtQty);
                rasioOnTop = (onTopQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioMf = (mfQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioTotal = rasioOnTop.add(rasioMf);

                otBrgOnTop.setSubmittedValue(onTopQtyTotal);
                otBrgMf.setSubmittedValue(mfQtyTotal);
                otBrgRasioOnTop.setSubmittedValue(rasioOnTop);
                otBrgRasioMf.setSubmittedValue(rasioMf);
                otBrgRasioTotal.setSubmittedValue(rasioTotal);

                AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
                ctx.addPartialTarget(otBrgOnTop);
                ctx.addPartialTarget(otBrgMf);
                ctx.addPartialTarget(otBrgRasioOnTop);
                ctx.addPartialTarget(otBrgRasioMf);
                ctx.addPartialTarget(otBrgRasioTotal);

                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("BrgBonusOnTop", onTopQtyTotal);
                r.setAttribute("BrgBonusMf", mfQtyTotal);
                r.setAttribute("BrgBonusRasioMf", rasioMf);
                r.setAttribute("BrgBonusRasioOnTop", rasioOnTop);
                r.setAttribute("BrgBonusRasioTotal", rasioTotal);

                try {
                    dciterPromoProduk.getDataControl().commitTransaction();
                } catch (Exception e) {
                    JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                }
            } else {
                // JIKA BELUM ADA ROW PROMO BARANG; DO NOTHING;
            }
            */
        } else if (discountType1.equalsIgnoreCase(discTypePotongan)) {
            DCIteratorBinding dcItteratorBindings =
                bindings.findIteratorBinding("DiscountView1Iterator");

            if (dcItteratorBindings.getEstimatedRowCount() > 0) {
                BigDecimal onTopMax = BigDecimal.ZERO;
                BigDecimal mfMax = BigDecimal.ZERO;
                BigDecimal onTopQtyTotal = BigDecimal.ZERO;
                BigDecimal mfQtyTotal = BigDecimal.ZERO;
                BigDecimal rasioOnTop = BigDecimal.ZERO;
                BigDecimal rasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;
                String tipePotongan = "";
                String tipePerhitungan = "";
                Number kelipatanVal = new Number(0);

                for (Row r : dcItteratorBindings.getAllRowsInRange()) {

                    tipePerhitungan =
                            r.getAttribute("TipePerhitungan") == null ? "0" :
                            r.getAttribute("TipePerhitungan").toString();

                    tipePotongan =
                            r.getAttribute("TipePotongan") == null ? "0" :
                            r.getAttribute("TipePotongan").toString();

                    kelipatanVal =
                            r.getAttribute("Kelipatan") == null ? new Number(0) :
                            (Number)r.getAttribute("Kelipatan");

                    String rowOnTopVal =
                        r.getAttribute("DiscNonYearly") == null ? "0" :
                        r.getAttribute("DiscNonYearly").toString().replaceAll(",",
                                                                              "");
                    String rowMfVal =
                        r.getAttribute("DiscYearly") == null ? "0" :
                        r.getAttribute("DiscYearly").toString().replaceAll(",",
                                                                           "");

                    BigDecimal valueOnTop = new BigDecimal(rowOnTopVal);
                    BigDecimal valueMf = new BigDecimal(rowMfVal);

                    if (onTopMax.compareTo(valueOnTop) < 0) {
                        onTopMax = valueOnTop;
                    }

                    if (mfMax.compareTo(valueMf) < 0) {
                        mfMax = valueMf;
                    }
                }

                if (tipePerhitungan.equalsIgnoreCase(tipeHitungKelipatan)) {
                    if (tipePotongan.equalsIgnoreCase(tipePotonganPercent) &&
                        !kelipatanVal.getBigDecimalValue().equals(zeroNum.getBigDecimalValue())) {
                        try {
                            // PERCENT ON TOP CALC
                            BigDecimal roundTgtDivKelipatanOT =
                                tgtQty.divide(kelipatanVal.getBigDecimalValue(),
                                              0, RoundingMode.DOWN);
                            BigDecimal priceMulPercentDiscOT =
                                tgtHarga.multiply(onTopMax.divide(new BigDecimal(100)));
                            onTopQtyTotal =
                                    (roundTgtDivKelipatanOT.multiply(kelipatanVal.getBigDecimalValue())).multiply(priceMulPercentDiscOT);

                            // PERCENT MF CALC
                            BigDecimal roundTgtDivKelipatanMF =
                                tgtQty.divide(kelipatanVal.getBigDecimalValue(),
                                              0, RoundingMode.DOWN);
                            BigDecimal priceMulPercentDiscMF =
                                tgtHarga.multiply(mfMax.divide(new BigDecimal(100)));
                            mfQtyTotal =
                                    (roundTgtDivKelipatanMF.multiply(kelipatanVal.getBigDecimalValue())).multiply(priceMulPercentDiscMF);
                        } catch (Exception e) {
                            //Error when calculating amount
                        }
                    } else if (tipePotongan.equalsIgnoreCase(tipePotonganAmount) &&
                               !kelipatanVal.getBigDecimalValue().equals(zeroNum.getBigDecimalValue())) {
                        try {
                            // AMOUNT ON TOP CALC
                            BigDecimal roundTgtDivKelipatanOT =
                                tgtQty.divide(kelipatanVal.getBigDecimalValue(),
                                              0, RoundingMode.DOWN);
                            onTopQtyTotal =
                                    (roundTgtDivKelipatanOT.multiply(kelipatanVal.getBigDecimalValue())).multiply(onTopMax);

                            // AMOUNT MF CALC
                            BigDecimal roundTgtDivKelipatanMF =
                                tgtQty.divide(kelipatanVal.getBigDecimalValue(),
                                              0, RoundingMode.DOWN);
                            mfQtyTotal =
                                    (roundTgtDivKelipatanMF.multiply(kelipatanVal.getBigDecimalValue())).multiply(mfMax);
                        } catch (Exception e) {
                            //Error when calculating amount
                        }
                    } else {
                        JSFUtils.addFacesWarningMessage("Nilai di kolom \"Kelipatan\" pada tab \"Potongan\" harus diisi terlebih dahulu.");
                    }
                } else if (tipePerhitungan.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                    onTopQtyTotal = onTopMax.multiply(tgtQty);
                    mfQtyTotal = mfMax.multiply(tgtQty);
                }

                try {
                    rasioOnTop =
                            onTopQtyTotal.divide(totalValue, MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                  RoundingMode.HALF_UP);
                } catch (Exception e) {
                    //JSFUtils.addFacesWarningMessage("Total value tidak boleh nol");
                }
                //                        (onTopQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                try {
                    rasioMf =
                            mfQtyTotal.divide(totalValue, MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                               RoundingMode.HALF_UP);
                } catch (Exception e) {
                    //JSFUtils.addFacesWarningMessage("Total value tidak boleh nol");
                }
                //                        (mfQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioTotal = rasioOnTop.add(rasioMf);

                otOnTop.setSubmittedValue(onTopQtyTotal);
                otMF.setSubmittedValue(mfQtyTotal);
                otRasioOntop.setSubmittedValue(rasioOnTop);
                otRasioMf.setSubmittedValue(rasioMf);
                otRasioTotal.setSubmittedValue(rasioTotal);

                AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
                ctx.addPartialTarget(otOnTop);
                ctx.addPartialTarget(otMF);
                ctx.addPartialTarget(otRasioOntop);
                ctx.addPartialTarget(otRasioMf);
                ctx.addPartialTarget(otRasioTotal);

                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();

                r.setAttribute("DiscOnTop", onTopQtyTotal);
                r.setAttribute("DiscMf", mfQtyTotal);
                r.setAttribute("DiscRasioMf", rasioMf);
                r.setAttribute("DiscRasioOnTop", rasioOnTop);
                r.setAttribute("DiscRasioTotal1", rasioTotal);
                /*
                try {
                    dciterPromoProduk.getDataControl().commitTransaction();
                } catch (Exception e) {
                    JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                }
                */
            } else {
                // JIKA BELUM ADA ROW DISKON; DO NOTHING;
            }
        } else if (discountType1.equalsIgnoreCase(discTypeBiaya)) {
            // DO NOTHING
            /*
            DCIteratorBinding dcItteratorBindings = bindings.findIteratorBinding("BiayaView1Iterator");
            if (dcItteratorBindings.getEstimatedRowCount() > 0) {
                BigDecimal onTopTotal = BigDecimal.ZERO;
                BigDecimal mfTotal = BigDecimal.ZERO;
                BigDecimal onTopQtyTotal = BigDecimal.ZERO;
                BigDecimal mfQtyTotal = BigDecimal.ZERO;
                BigDecimal rasioOnTop = BigDecimal.ZERO;
                BigDecimal rasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;

                for (Row r : dcItteratorBindings.getAllRowsInRange()) {
                    String rowOnTopVal = r.getAttribute("BiayaNonYearly") == null ? "0" : r.getAttribute("BiayaNonYearly").toString().replaceAll(",", "");
                    String rowMfVal = r.getAttribute("BiayaYearly") == null ? "0" : r.getAttribute("BiayaYearly").toString().replaceAll(",", "");

                    BigDecimal valueOnTop = new BigDecimal(rowOnTopVal);
                    BigDecimal valueMf = new BigDecimal(rowMfVal);

                    onTopTotal = onTopTotal.add(valueOnTop);
                    mfTotal = mfTotal.add(valueMf);
                }
                onTopQtyTotal = onTopTotal.multiply(tgtQty);
                mfQtyTotal = mfTotal.multiply(tgtQty);
                rasioOnTop = (onTopQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioMf = (mfQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioTotal = rasioOnTop.add(rasioMf);

                otBiaOntop.setSubmittedValue(onTopQtyTotal);
                otBiaMf.setSubmittedValue(mfQtyTotal);
                otBiaRasioOntop.setSubmittedValue(rasioOnTop);
                otBiaRasioMf.setSubmittedValue(rasioMf);
                otBiaRasioTotal.setSubmittedValue(rasioTotal);

                AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
                ctx.addPartialTarget(otBiaOntop);
                ctx.addPartialTarget(otBiaMf);
                ctx.addPartialTarget(otBiaRasioOntop);
                ctx.addPartialTarget(otBiaRasioMf);
                ctx.addPartialTarget(otBiaRasioTotal);

                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("BiaOntop", onTopQtyTotal);
                r.setAttribute("BiaMf", mfQtyTotal);
                r.setAttribute("BiaRasioMf", rasioMf);
                r.setAttribute("BiaRasionOntop", rasioOnTop);
                r.setAttribute("BiaRasioTotal", rasioTotal);

                try {
                    dciterPromoProduk.getDataControl().commitTransaction();
                } catch (Exception e) {
                    JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                }
            } else {
                // JIKA BELUM ADA ROW BIAYA; DO NOTHING;
            }
            */
        } else {
            JSFUtils.addFacesErrorMessage("\"Tipe Proposal\" tidak dikenali.");
        }
    }

    public void targetHargaValueChangeListener(ValueChangeEvent valueChangeEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        BigDecimal tgtQty =
            new BigDecimal(itTargetQty.getValue() == "" ? "0" : itTargetQty.getValue() ==
                                                                null ? "0" :
                                                                itTargetQty.getValue().toString().replaceAll(",",
                                                                                                             ""));

        BigDecimal tgtHarga =
            new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                           valueChangeEvent.getNewValue() == null ? "0" :
                           valueChangeEvent.getNewValue().toString().replaceAll(",",
                                                                                ""));

        BigDecimal totalValue = tgtQty.multiply(tgtHarga);
        oracle.jbo.domain.Number number = null;
        try {
            number =
                    new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
        } catch (SQLException e) {
            JSFUtils.addFacesErrorMessage("Error", e.getLocalizedMessage());
        }
        itValueTotal.setValue(number);

        // Tipe proposal
        AttributeBinding discountType1Attr =
            (AttributeBinding)bindings.getControlBinding("DiscountType1");
        String discountType1 = (String)discountType1Attr.getInputValue();
        if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
            // DO NOTHING
            /*
            DCIteratorBinding dcItteratorBindings = bindings.findIteratorBinding("PromoBonusView1Iterator");
            if (dcItteratorBindings.getEstimatedRowCount() > 0) {
                BigDecimal onTopTotal = BigDecimal.ZERO;
                BigDecimal mfTotal = BigDecimal.ZERO;
                BigDecimal onTopQtyTotal = BigDecimal.ZERO;
                BigDecimal mfQtyTotal = BigDecimal.ZERO;
                BigDecimal rasioOnTop = BigDecimal.ZERO;
                BigDecimal rasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;

                for (Row r : dcItteratorBindings.getAllRowsInRange()) {
                    String rowOnTopVal = r.getAttribute("DiscNonYearly") == null ? "0" : r.getAttribute("DiscNonYearly").toString().replaceAll(",", "");
                    String rowMfVal = r.getAttribute("DiscYearly") == null ? "0" : r.getAttribute("DiscYearly").toString().replaceAll(",", "");

                    BigDecimal valueOnTop = new BigDecimal(rowOnTopVal);
                    BigDecimal valueMf = new BigDecimal(rowMfVal);

                    onTopTotal = onTopTotal.add(valueOnTop);
                    mfTotal = mfTotal.add(valueMf);
                }

                onTopQtyTotal = onTopTotal.multiply(tgtQty);
                mfQtyTotal = mfTotal.multiply(tgtQty);
                rasioOnTop = (onTopQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioMf = (mfQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioTotal = rasioOnTop.add(rasioMf);

                otBrgOnTop.setSubmittedValue(onTopQtyTotal);
                otBrgMf.setSubmittedValue(mfQtyTotal);
                otBrgRasioOnTop.setSubmittedValue(rasioOnTop);
                otBrgRasioMf.setSubmittedValue(rasioMf);
                otBrgRasioTotal.setSubmittedValue(rasioTotal);

                AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
                ctx.addPartialTarget(otBrgOnTop);
                ctx.addPartialTarget(otBrgMf);
                ctx.addPartialTarget(otBrgRasioOnTop);
                ctx.addPartialTarget(otBrgRasioMf);
                ctx.addPartialTarget(otBrgRasioTotal);

                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("BrgBonusOnTop", onTopQtyTotal);
                r.setAttribute("BrgBonusMf", mfQtyTotal);
                r.setAttribute("BrgBonusRasioMf", rasioMf);
                r.setAttribute("BrgBonusRasioOnTop", rasioOnTop);
                r.setAttribute("BrgBonusRasioTotal", rasioTotal);

                try {
                    dciterPromoProduk.getDataControl().commitTransaction();
                } catch (Exception e) {
                    JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                }
            } else {
                // JIKA BELUM ADA ROW PROMO BARANG; DO NOTHING;
            }
            */
        } else if (discountType1.equalsIgnoreCase(discTypePotongan)) {
            DCIteratorBinding dcItteratorBindings =
                bindings.findIteratorBinding("DiscountView1Iterator");

            if (dcItteratorBindings.getEstimatedRowCount() > 0) {
                BigDecimal onTopMax = BigDecimal.ZERO;
                BigDecimal mfMax = BigDecimal.ZERO;
                BigDecimal onTopQtyTotal = BigDecimal.ZERO;
                BigDecimal mfQtyTotal = BigDecimal.ZERO;
                BigDecimal rasioOnTop = BigDecimal.ZERO;
                BigDecimal rasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;
                String tipePotongan = "";
                String tipePerhitungan = "";
                Number kelipatanVal = new Number(0);

                for (Row r : dcItteratorBindings.getAllRowsInRange()) {

                    tipePerhitungan =
                            r.getAttribute("TipePerhitungan") == null ? "0" :
                            r.getAttribute("TipePerhitungan").toString();

                    tipePotongan =
                            r.getAttribute("TipePotongan") == null ? "0" :
                            r.getAttribute("TipePotongan").toString();

                    kelipatanVal =
                            r.getAttribute("Kelipatan") == null ? new Number(0) :
                            (Number)r.getAttribute("Kelipatan");

                    String rowOnTopVal =
                        r.getAttribute("DiscNonYearly") == null ? "0" :
                        r.getAttribute("DiscNonYearly").toString().replaceAll(",",
                                                                              "");
                    String rowMfVal =
                        r.getAttribute("DiscYearly") == null ? "0" :
                        r.getAttribute("DiscYearly").toString().replaceAll(",",
                                                                           "");

                    BigDecimal valueOnTop = new BigDecimal(rowOnTopVal);
                    BigDecimal valueMf = new BigDecimal(rowMfVal);

                    if (onTopMax.compareTo(valueOnTop) < 0) {
                        onTopMax = valueOnTop;
                    }

                    if (mfMax.compareTo(valueMf) < 0) {
                        mfMax = valueMf;
                    }
                }

                if (tipePerhitungan.equalsIgnoreCase(tipeHitungKelipatan)) {
                    if (tipePotongan.equalsIgnoreCase(tipePotonganPercent)) {
                        // PERCENT ON TOP CALC
                        BigDecimal roundTgtDivKelipatanOT =
                            tgtQty.divide(kelipatanVal.getBigDecimalValue(), 0,
                                          RoundingMode.DOWN);
                        BigDecimal priceMulPercentDiscOT =
                            tgtHarga.multiply(onTopMax.divide(new BigDecimal(100)));
                        onTopQtyTotal =
                                (roundTgtDivKelipatanOT.multiply(kelipatanVal.getBigDecimalValue())).multiply(priceMulPercentDiscOT);

                        // PERCENT MF CALC
                        BigDecimal roundTgtDivKelipatanMF =
                            tgtQty.divide(kelipatanVal.getBigDecimalValue(), 0,
                                          RoundingMode.DOWN);
                        BigDecimal priceMulPercentDiscMF =
                            tgtHarga.multiply(mfMax.divide(new BigDecimal(100)));
                        mfQtyTotal =
                                (roundTgtDivKelipatanMF.multiply(kelipatanVal.getBigDecimalValue())).multiply(priceMulPercentDiscMF);
                    } else if (tipePotongan.equalsIgnoreCase(tipePotonganAmount)) {
                        // AMOUNT ON TOP CALC
                        BigDecimal roundTgtDivKelipatanOT =
                            tgtQty.divide(kelipatanVal.getBigDecimalValue(), 0,
                                          RoundingMode.DOWN);
                        onTopQtyTotal =
                                (roundTgtDivKelipatanOT.multiply(kelipatanVal.getBigDecimalValue())).multiply(onTopMax);

                        // AMOUNT MF CALC
                        BigDecimal roundTgtDivKelipatanMF =
                            tgtQty.divide(kelipatanVal.getBigDecimalValue(), 0,
                                          RoundingMode.DOWN);
                        mfQtyTotal =
                                (roundTgtDivKelipatanMF.multiply(kelipatanVal.getBigDecimalValue())).multiply(mfMax);
                    }
                } else if (tipePerhitungan.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                    onTopQtyTotal = onTopMax.multiply(tgtQty);
                    mfQtyTotal = mfMax.multiply(tgtQty);
                }

                try {
                    rasioOnTop =
                            onTopQtyTotal.divide(totalValue, MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                  RoundingMode.HALF_UP);
                    //                            (onTopQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                    rasioMf =
                            mfQtyTotal.divide(totalValue, MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                               RoundingMode.HALF_UP);
                    //                            (mfQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                    rasioTotal = rasioOnTop.add(rasioMf);
                } catch (Exception e) {
                    // ERROR: divide by zero; do nothing
                    rasioTotal = BigDecimal.ZERO;
                }

                otOnTop.setSubmittedValue(onTopQtyTotal);
                otMF.setSubmittedValue(mfQtyTotal);
                otRasioOntop.setSubmittedValue(rasioOnTop);
                otRasioMf.setSubmittedValue(rasioMf);
                otRasioTotal.setSubmittedValue(rasioTotal);

                AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
                ctx.addPartialTarget(otOnTop);
                ctx.addPartialTarget(otMF);
                ctx.addPartialTarget(otRasioOntop);
                ctx.addPartialTarget(otRasioMf);
                ctx.addPartialTarget(otRasioTotal);

                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("DiscOnTop", onTopQtyTotal);
                r.setAttribute("DiscMf", mfQtyTotal);
                r.setAttribute("DiscRasioMf", rasioMf);
                r.setAttribute("DiscRasioOnTop", rasioOnTop);
                r.setAttribute("DiscRasioTotal1", rasioTotal);
                /*
                try {
                    dciterPromoProduk.getDataControl().commitTransaction();
                } catch (Exception e) {
                    JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                }
                */
            } else {
                // JIKA BELUM ADA ROW POTONGAN; DO NOTHING;
            }
        } else if (discountType1.equalsIgnoreCase(discTypeBiaya)) {
            // DO NOTHING
            /*
            DCIteratorBinding dcItteratorBindings = bindings.findIteratorBinding("BiayaView1Iterator");
            if (dcItteratorBindings.getEstimatedRowCount() > 0) {
                BigDecimal onTopTotal = BigDecimal.ZERO;
                BigDecimal mfTotal = BigDecimal.ZERO;
                BigDecimal onTopQtyTotal = BigDecimal.ZERO;
                BigDecimal mfQtyTotal = BigDecimal.ZERO;
                BigDecimal rasioOnTop = BigDecimal.ZERO;
                BigDecimal rasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;

                for (Row r : dcItteratorBindings.getAllRowsInRange()) {
                    String rowOnTopVal = r.getAttribute("BiayaNonYearly") == null ? "0" : r.getAttribute("BiayaNonYearly").toString().replaceAll(",", "");
                    String rowMfVal = r.getAttribute("BiayaYearly") == null ? "0" : r.getAttribute("BiayaYearly").toString().replaceAll(",", "");

                    BigDecimal valueOnTop = new BigDecimal(rowOnTopVal);
                    BigDecimal valueMf = new BigDecimal(rowMfVal);

                    onTopTotal = onTopTotal.add(valueOnTop);
                    mfTotal = mfTotal.add(valueMf);
                }
                onTopQtyTotal = onTopTotal.multiply(tgtQty);
                mfQtyTotal = mfTotal.multiply(tgtQty);
                rasioOnTop = (onTopQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioMf = (mfQtyTotal.divide(totalValue, 3, RoundingMode.HALF_UP)).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                rasioTotal = rasioOnTop.add(rasioMf);

                otBiaOntop.setSubmittedValue(onTopQtyTotal);
                otBiaMf.setSubmittedValue(mfQtyTotal);
                otBiaRasioOntop.setSubmittedValue(rasioOnTop);
                otBiaRasioMf.setSubmittedValue(rasioMf);
                otBiaRasioTotal.setSubmittedValue(rasioTotal);

                AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
                ctx.addPartialTarget(otBiaOntop);
                ctx.addPartialTarget(otBiaMf);
                ctx.addPartialTarget(otBiaRasioOntop);
                ctx.addPartialTarget(otBiaRasioMf);
                ctx.addPartialTarget(otBiaRasioTotal);

                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("BiaOntop", onTopQtyTotal);
                r.setAttribute("BiaMf", mfQtyTotal);
                r.setAttribute("BiaRasioMf", rasioMf);
                r.setAttribute("BiaRasionOntop", rasioOnTop);
                r.setAttribute("BiaRasioTotal", rasioTotal);

                try {
                    dciterPromoProduk.getDataControl().commitTransaction();
                } catch (Exception e) {
                    JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                }
            } else {
                // JIKA BELUM ADA ROW BIAYA; DO NOTHING;
            }
            */
        } else {
            JSFUtils.addFacesErrorMessage("\"Tipe Proposal\" tidak dikenali.");
        }
    }

    public void setSwitchRegCust(UIXSwitcher switchRegCust) {
        this.switchRegCust = switchRegCust;
    }

    public UIXSwitcher getSwitchRegCust() {
        return switchRegCust;
    }

    public void itlovCustomerPilih(ValueChangeEvent valueChangeEvent) {
        String chgNewVal = (String)valueChangeEvent.getNewValue();
        if (chgNewVal.equalsIgnoreCase(prodRegion)) {
            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ProdRegionAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ProdRegionLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodArea)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ProdRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ProdRegionLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodLocation)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ProdRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ProdRegionAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodCustType)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ProdRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ProdRegionAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ProdRegionLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodCustGroup)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ProdRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ProdRegionAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ProdRegionLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodCustomer)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ProdRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ProdRegionAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ProdRegionLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

        } else {
            JSFUtils.addFacesErrorMessage("Error",
                                          "\"Tipe Customer\" tidak dikenali.");
        }

        clearAllCustExclude();
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchRegCust);
    }

    public void addPromoProduk(ActionEvent actionEvent) {
        boolean canCreateNew = true;
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();

        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String usrCustomer =
            userData.getUserCustomer() == null ? "" : userData.getUserCustomer();

        DCIteratorBinding dciter =
            (DCIteratorBinding)bindings.get("PromoProdukView1Iterator");
        long produkRowCount = dciter.getEstimatedRowCount();

        for (Row produkRow : dciter.getAllRowsInRange()) {
            Integer rowStatus =
                (Integer)produkRow.getAttribute("CheckRowStatus");
            String validComb = (String)produkRow.getAttribute("ValidComb");
            if ((rowStatus == 0 && produkRowCount > 0) ||
                (!("Y").equalsIgnoreCase(validComb) && produkRowCount > 0)) {
                canCreateNew = false;
            }
        }

        if (canCreateNew) {
            RowSetIterator rsi = dciter.getRowSetIterator();
            Row lastRow = rsi.last();
            int lastRowIndex = rsi.getRangeIndexOf(lastRow);
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);

            if (usrCustomer.equalsIgnoreCase(userCustInvalid)) {
                JSFUtils.addFacesWarningMessage("Anda tidak memiliki hak akses memilih customer.");
            }

            //add row to last index + 1 so it becomes last in the range set
            rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
            //make row the current row so it is displayed correctly
            rsi.setCurrentRow(newRow);

            AdfFacesContext.getCurrentInstance().getViewScope().put("ProdRowKey",
                                                                    newRow.getKey());

            Integer propTypeIdx = (Integer)itLovProposalType.getValue();
            if (propTypeIdx.compareTo(idxFood) == 0) {
                itLovProdCategory.setValue(prodCatCodeFood);
                itCategory.setValue(prodDescCodeFood);
                AdfFacesContext adc = AdfFacesContext.getCurrentInstance();
                adc.addPartialTarget(itLovProdCategory);
                adc.addPartialTarget(itCategory);
                adc.addPartialTarget(tblListProduct);
            } else if (propTypeIdx.compareTo(idxNonFood) == 0) {
                itLovProdCategory.setValue(prodCatCodeNonFood);
                itCategory.setValue(prodDescCodeNonFood);
                AdfFacesContext adc = AdfFacesContext.getCurrentInstance();
                adc.addPartialTarget(itLovProdCategory);
                adc.addPartialTarget(itCategory);
                adc.addPartialTarget(tblListProduct);
            } else {
                JSFUtils.addFacesErrorMessage("Tipe proposal selain FOOD dan NON FOOD tidak dikenali.");
            }
        } else {
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>Data produk ada yang belum selesai dilengkapi dan kombinasi belum valid.</p>");
            message.append("<p>Proses penambahan produk baru tidak dapat dilanjutkan.</p>");
            message.append("</body></html>");
            JSFUtils.addFacesWarningMessage(message.toString());
        }
    }

    public void copyProposal(DialogEvent dialogEvent) throws ParseException {
        FacesContext fctx = FacesContext.getCurrentInstance();
        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

        String copyAs = (String)copyAsFlag.getValue();
        DefaultDateFormatter ddf = new DefaultDateFormatter();
        String dateValueStart = "", dateValueEnd = "", dateTimeValueStart =
            "", dateTimeValueEnd = "";

        BindingContainer bindings = this.getBindings();

        DCIteratorBinding dciterPromoCustomerArea =
            ADFUtils.findIterator("PromoCustomerAreaView1Iterator");

        AttributeBinding propNoAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalNo");
        String srcProposalNo = (String)propNoAttr.getInputValue();

        AttributeBinding usrTypeCreatorAttr =
            (AttributeBinding)bindings.getControlBinding("UserTypeCreator");
        String srcUsrTypeCreator = (String)usrTypeCreatorAttr.getInputValue();

        AttributeBinding discountType1Attr =
            (AttributeBinding)bindings.getControlBinding("DiscountType1");
        String discountType1 = (String)discountType1Attr.getInputValue();

        // ===== GET NEW PROPOSAL PERIODE ======================================
        try {
            dateValueStart =
                    ddf.format("yyyy-MM-dd", newPromoPeriodFrom.getValue());
            dateTimeValueStart = dateValueStart + " 00:00:00";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueStart = "";
        }

        try {
            dateValueEnd =
                    ddf.format("yyyy-MM-dd", newPromoPeriodTo.getValue());
            dateTimeValueEnd = dateValueEnd + " 23:59:59";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueEnd = "";
        }

        boolean dateValid = false;
        try {
            dateValid =
                    ADFUtils.compareDates(dateTimeValueStart, dateTimeValueEnd);
        } catch (ParseException e) {
            FacesMessage msg =
                new FacesMessage(FacesMessage.SEVERITY_ERROR, "Failed to parse date value.",
                                 "Failed to parse date value.");
            fctx.addMessage(null, msg);
        }
        if (copyAs.equalsIgnoreCase("R")) {
            AddendumValidationViewImpl AddendumVal =
                promoProposalAM.getAddendumValidationView1();
            AddendumVal.setNamedWhereClauseParam("prop_no", srcProposalNo);
            AddendumVal.executeQuery();
            if (AddendumVal.getEstimatedRowCount() > 0) {
                FacesContext ctx = FacesContext.getCurrentInstance();
                StringBuilder stringBuilderpropNumber = new StringBuilder();
                StringBuilder stringBuilderConfirmNo = new StringBuilder();
                String propNumber = "";
                String ConfirmNo = "";
                while (AddendumVal.hasNext()) {
                    Row r = AddendumVal.next();
                    stringBuilderpropNumber.append(r.getAttribute("ProposalNo").toString());
                    stringBuilderpropNumber.append(SEPARATOR);
                    stringBuilderConfirmNo.append(r.getAttribute("ConfirmNo") ==
                                                  null ? "" :
                                                  r.getAttribute("ConfirmNo").toString());
                    stringBuilderConfirmNo.append(SEPARATOR);
                }
                propNumber = stringBuilderpropNumber.toString();
                ConfirmNo = stringBuilderConfirmNo.toString();
                propNumber =
                        propNumber.substring(0, propNumber.length() - SEPARATOR.length());
                ConfirmNo =
                        ConfirmNo.substring(0, ConfirmNo.length() - SEPARATOR.length());
                StringBuilder message = new StringBuilder("<html><body>");
                message.append("<p>Copy reference tidak bisa dilakukan</p>");
                message.append("<p>\"Silahkan cancel Proposal Promo dengan No. \"<b>" +
                               propNumber + "\"</b></p>");
                if (!ConfirmNo.equalsIgnoreCase("")) {
                    message.append("<p>Jika Proposal Confirmation sudah terbuat </p>");
                    message.append("<p>\"Silahkan cancel Proposal Confirmation dengan no berikut \"<b>" +
                                   ConfirmNo + "\"</b></p>");
                }
                message.append("</body></html>");
                FacesMessage msg = new FacesMessage(message.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                ctx.addMessage(null, msg);
            } else {
                if (dateValid) {
                    // INSERT NEW PROMO DATE VALUE
                    oracle.jbo.domain.Date newProgPromoStart =
                        ADFUtils.convertToJboDate("yyyy-MM-dd hh:mm:ss",
                                                  dateTimeValueStart);
                    oracle.jbo.domain.Date newProgPromoEnd =
                        ADFUtils.convertToJboDate("yyyy-MM-dd hh:mm:ss",
                                                  dateTimeValueEnd);

                    long numOfDaysPromo = 0;
                    try {
                        numOfDaysPromo =
                                ADFUtils.diffInDays(dateTimeValueStart,
                                                    dateTimeValueEnd);
                    } catch (ParseException e) {
                        FacesMessage msg =
                            new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                             "Failed to parse date value.",
                                             "Failed to parse date value.");
                        fctx.addMessage(null, msg);
                    }

                    // ===== COLLECT DATA ==================================================
                    // PARENT: Collect Data Proposal
                    DCIteratorBinding dciterProposal =
                        ADFUtils.findIterator("ProposalView1Iterator");
                    Row propCurrentRow = dciterProposal.getCurrentRow();
                    String propType =
                        propCurrentRow.getAttribute("ProposalType") == null ?
                        "" :
                        (String)propCurrentRow.getAttribute("ProposalType");

                    String[] propAttrs = propCurrentRow.getAttributeNames();
                    String[] skipPropAttrs =
                        new String[] { "ProposalId", "ProposalNo", "Status",
                                       "AddendumKe", "ConfirmNo", "CopySource",
                                       "PeriodeProgFrom", "PeriodeProgTo",
                                       "ProgDays", "HistTranDtTo",
                                       "HistTranDtFrom" };
                    List skipPropAttrList = Arrays.asList(skipPropAttrs);

                    // CHILD: Collect Data Customer
                    if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                        // USER TYPE CREATOR == AREA

                        if (dciterPromoCustomerArea.getEstimatedRowCount() >
                            0) {
                            listPromoCustomerArea =
                                    new ArrayList<ListPromoCustomerArea>();
                            for (Row r :
                                 dciterPromoCustomerArea.getAllRowsInRange()) {
                                ListPromoCustomerArea promoCustomerAreaTemp =
                                    new ListPromoCustomerArea();
                                promoCustomerAreaTemp.setPromoCustomerId(r.getAttribute("PromoCustomerId").toString());
                                promoCustomerAreaTemp.setProposalId((String)r.getAttribute("ProposalId") ==
                                                                    null ? "" :
                                                                    (String)r.getAttribute("ProposalId"));
                                promoCustomerAreaTemp.setRegionCode((String)r.getAttribute("RegionCode") ==
                                                                    null ? "" :
                                                                    (String)r.getAttribute("RegionCode"));
                                promoCustomerAreaTemp.setRegionDesc((String)r.getAttribute("RegionDesc") ==
                                                                    null ? "" :
                                                                    (String)r.getAttribute("RegionDesc"));
                                promoCustomerAreaTemp.setAreaCode((String)r.getAttribute("AreaCode") ==
                                                                  null ? "" :
                                                                  (String)r.getAttribute("AreaCode"));
                                promoCustomerAreaTemp.setAreaDesc((String)r.getAttribute("AreaDesc") ==
                                                                  null ? "" :
                                                                  (String)r.getAttribute("AreaDesc"));
                                promoCustomerAreaTemp.setLocCode((String)r.getAttribute("LocCode") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("LocCode"));
                                promoCustomerAreaTemp.setLocDesc((String)r.getAttribute("LocDesc") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("LocDesc"));
                                promoCustomerAreaTemp.setCusttypCode((String)r.getAttribute("CusttypCode") ==
                                                                     null ?
                                                                     "" :
                                                                     (String)r.getAttribute("CusttypCode"));
                                promoCustomerAreaTemp.setCusttypDesc((String)r.getAttribute("CusttypDesc") ==
                                                                     null ?
                                                                     "" :
                                                                     (String)r.getAttribute("CusttypDesc"));
                                promoCustomerAreaTemp.setCustgrpCode((String)r.getAttribute("CustgrpCode") ==
                                                                     null ?
                                                                     "" :
                                                                     (String)r.getAttribute("CustgrpCode"));
                                promoCustomerAreaTemp.setCustgrpDesc((String)r.getAttribute("CustgrpDesc") ==
                                                                     null ?
                                                                     "" :
                                                                     (String)r.getAttribute("CustgrpDesc"));
                                oracle.jbo.domain.Number customerIdtemp =
                                    (oracle.jbo.domain.Number)r.getAttribute("CustomerId") ==
                                    null ? new oracle.jbo.domain.Number(0) :
                                    (oracle.jbo.domain.Number)r.getAttribute("CustomerId");
                                if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                    promoCustomerAreaTemp.setCustomerId(BigDecimal.ZERO);
                                } else {
                                    promoCustomerAreaTemp.setCustomerId(customerIdtemp.getBigDecimalValue());
                                }
                                promoCustomerAreaTemp.setCustomerName((String)r.getAttribute("CustomerName") ==
                                                                      null ?
                                                                      "" :
                                                                      (String)r.getAttribute("CustomerName"));
                                promoCustomerAreaTemp.setCustRegFlg((String)r.getAttribute("CustRegFlg") ==
                                                                    null ? "" :
                                                                    (String)r.getAttribute("CustRegFlg"));
                                promoCustomerAreaTemp.setCustNregFlg((String)r.getAttribute("CustNregFlg") ==
                                                                     null ?
                                                                     "" :
                                                                     (String)r.getAttribute("CustNregFlg"));
                                listPromoCustomerArea.add(promoCustomerAreaTemp);
                            }
                        }

                    } else {
                        // USER TYPE CREATOR == HO
                        // DO NOTHING
                    }

                    // CHILD: Data Promo Produk
                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    List promoProdList = new ArrayList<Row>();
                    if (dciterPromoProduk.getEstimatedRowCount() > 0) {
                        for (Row r : dciterPromoProduk.getAllRowsInRange()) {
                            promoProdList.add(r);
                        }
                    }

                    // SUB CHILD: Data Promo Bonus
                    DCIteratorBinding dciterPromoBonus =
                        ADFUtils.findIterator("PromoBonusView1Iterator");
                    List promoBonusList = new ArrayList<Row>();
                    if (dciterPromoBonus.getEstimatedRowCount() > 0) {
                        for (Row r : dciterPromoBonus.getAllRowsInRange()) {
                            promoBonusList.add(r);
                        }
                    }

                    // ===== INSERTING DATA ============================================
                    // PARENT: Insert Data Proposal
                    Row dupProposalRow =
                        dciterProposal.getRowSetIterator().createRow();
                    for (int i = 0; i < propAttrs.length; i++) {
                        String propAttrName = propAttrs[i];
                        if ("Status".equals(propAttrName))
                            dupProposalRow.setAttribute(propAttrName, "DRAFT");
                        if ("CopySource".equals(propAttrName) &&
                            copyAs.equalsIgnoreCase("R"))
                            dupProposalRow.setAttribute(propAttrName,
                                                        srcProposalNo);
                        if ("PeriodeProgFrom".equals(propAttrName)) {
                            dupProposalRow.setAttribute(propAttrName,
                                                        newProgPromoStart);
                        }
                        if ("PeriodeProgTo".equals(propAttrName)) {
                            dupProposalRow.setAttribute(propAttrName,
                                                        newProgPromoEnd);
                        }
                        if ("ProgDays".equals(propAttrName)) {
                            dupProposalRow.setAttribute(propAttrName,
                                                        numOfDaysPromo);
                        }
                        if ("HistTranDtFrom".equals(propAttrName)) {
                            java.util.Date date2 =
                                ADFUtils.convertOracleDateToJavaUtilDate(newProgPromoStart);

                            DateFormat dfMM = new SimpleDateFormat("MM");
                            String currMon = dfMM.format(date2);
                            Integer last3Mon = Integer.valueOf(currMon) - 3;
                            Integer last1Mon = Integer.valueOf(currMon) - 1;
                            DateFormat dfYY = new SimpleDateFormat("yyyy");
                            String currYear = dfYY.format(date2);
                            Integer thisYear = Integer.valueOf(currYear);

                            DateConversion.Measure last3MonCal =
                                new DateConversion.Measure().month(last3Mon).year(thisYear);
                            String DateTo =
                                thisYear.toString() + String.format("%02d",
                                                                    last1Mon) +
                                getLastDay(thisYear.toString(),
                                           last1Mon.toString());
                            String d1HisF = last3MonCal.min().toString();
                            SimpleDateFormat formatterx =
                                new SimpleDateFormat("yyyyMMdd");
                            java.util.Date fr = formatterx.parse(d1HisF);
                            oracle.jbo.domain.Date histFrom =
                                ADFUtils.convertJavaUtilDateToOracleDate(fr);

                            dupProposalRow.setAttribute(propAttrName,
                                                        histFrom);
                        }
                        if ("HistTranDtTo".equals(propAttrName)) {
                            java.util.Date date2 =
                                ADFUtils.convertOracleDateToJavaUtilDate(newProgPromoStart);

                            DateFormat dfMM = new SimpleDateFormat("MM");
                            String currMon = dfMM.format(date2);
                            Integer last1Mon = Integer.valueOf(currMon) - 1;
                            DateFormat dfYY = new SimpleDateFormat("yyyy");
                            String currYear = dfYY.format(date2);
                            Integer thisYear = Integer.valueOf(currYear);

                            String DateTo =
                                thisYear.toString() + String.format("%02d",
                                                                    last1Mon) +
                                getLastDay(thisYear.toString(),
                                           last1Mon.toString());
                            SimpleDateFormat formatterx =
                                new SimpleDateFormat("yyyyMMdd");
                            java.util.Date to = formatterx.parse(DateTo);

                            oracle.jbo.domain.Date histTo =
                                ADFUtils.convertJavaUtilDateToOracleDate(to);

                            dupProposalRow.setAttribute(propAttrName, histTo);
                        }
                        int attrIndex =
                            dupProposalRow.getAttributeIndexOf(propAttrName);
                        //Checking if the attribute is in the skip attribute list and the attribute is updatable
                        if (!skipPropAttrList.contains(propAttrName) &&
                            dupProposalRow.isAttributeUpdateable(attrIndex))
                            //Setting the value for the attributes
                            dupProposalRow.setAttribute(propAttrName,
                                                        propCurrentRow.getAttribute(propAttrName));
                    }

                    //Inserting the duplicate proposal row
                    dciterProposal.getRowSetIterator().insertRow(dupProposalRow);

                    // CHILD: Inserting Data Customer
                    if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                        // USER TYPE CREATOR == AREA
                        List<ListPromoCustomerArea> PromoCustomerAreaCollectData =
                            getListPromoCustomerArea();
                        if (PromoCustomerAreaCollectData.size() > 0) {
                            for (ListPromoCustomerArea rData :
                                 PromoCustomerAreaCollectData) {
                                Row dupPromoCustomerAreaRow =
                                    dciterPromoCustomerArea.getRowSetIterator().createRow();
                                dupPromoCustomerAreaRow.setAttribute("RegionCode",
                                                                     rData.getRegionCode());
                                dupPromoCustomerAreaRow.setAttribute("RegionDesc",
                                                                     rData.getRegionDesc());
                                dupPromoCustomerAreaRow.setAttribute("AreaCode",
                                                                     rData.getAreaCode());
                                dupPromoCustomerAreaRow.setAttribute("AreaDesc",
                                                                     rData.getAreaDesc());
                                dupPromoCustomerAreaRow.setAttribute("LocCode",
                                                                     rData.getLocCode());
                                dupPromoCustomerAreaRow.setAttribute("LocDesc",
                                                                     rData.getLocDesc());
                                dupPromoCustomerAreaRow.setAttribute("CusttypCode",
                                                                     rData.getCusttypCode());
                                dupPromoCustomerAreaRow.setAttribute("CusttypDesc",
                                                                     rData.getCusttypDesc());
                                dupPromoCustomerAreaRow.setAttribute("CustgrpCode",
                                                                     rData.getCustgrpCode());
                                dupPromoCustomerAreaRow.setAttribute("CustgrpDesc",
                                                                     rData.getCustgrpDesc());
                                dupPromoCustomerAreaRow.setAttribute("CustomerId",
                                                                     rData.getCustomerId());
                                dupPromoCustomerAreaRow.setAttribute("CustomerName",
                                                                     rData.getCustomerName());
                                dupPromoCustomerAreaRow.setAttribute("CustRegFlg",
                                                                     rData.getCustRegFlg());
                                dupPromoCustomerAreaRow.setAttribute("CustNregFlg",
                                                                     rData.getCustNregFlg());
                                dupPromoCustomerAreaRow.setAttribute("CreatedBy",
                                                                     rData.getCreatedBy());
                                dupPromoCustomerAreaRow.setAttribute("CreatedOn",
                                                                     rData.getCreatedOn());
                                dupPromoCustomerAreaRow.setAttribute("UserName",
                                                                     rData.getUserName());

                                //Inserting the duplicate proposal region row
                                dciterPromoCustomerArea.getRowSetIterator().insertRow(dupPromoCustomerAreaRow);
                            }
                        }
                    } else {
                        // USER TYPE CREATOR == HO
                        // DO NOTHING
                    }

                    // CHILD: Inserting Data Promo Produk
                    ArrayList<String> promoBonusVariantList =
                        new ArrayList<String>();
                    ArrayList<String> promoBonusItemList =
                        new ArrayList<String>();

                    if (promoProdList.size() > 0) {
                        for (int i = 0; i < promoProdList.size(); i++) {
                            Row dupPromoProdukRow =
                                dciterPromoProduk.getRowSetIterator().createRow();
                            Row promoProdSource = (Row)promoProdList.get(i);
                            String produkCustomer =
                                (String)promoProdSource.getAttribute("RegCustFlag");
                            String produkExclCust =
                                (String)promoProdSource.getAttribute("ExclCustBy") ==
                                null ? "" :
                                (String)promoProdSource.getAttribute("ExclCustBy");

                            /* BUGFIX: Ketika copy Product Category -> FOOD intermitten berubah jadi NON FOOD
                            dupPromoProdukRow.setAttribute("ProductCategory",
                                                           promoProdSource.getAttribute("ProductCategory"));
                            */
                            if (propType.equalsIgnoreCase(prodDescCodeFood)) {
                                dupPromoProdukRow.setAttribute("ProductCategory",
                                                               prodCatCodeFood);
                            } else {
                                dupPromoProdukRow.setAttribute("ProductCategory",
                                                               prodCatCodeNonFood);
                            }
                            dupPromoProdukRow.setAttribute("ProductCategoryDesc",
                                                           promoProdSource.getAttribute("ProductCategoryDesc"));
                            dupPromoProdukRow.setAttribute("ProductClass",
                                                           promoProdSource.getAttribute("ProductClass"));
                            dupPromoProdukRow.setAttribute("ProductClassDesc",
                                                           promoProdSource.getAttribute("ProductClassDesc"));
                            dupPromoProdukRow.setAttribute("ProductBrand",
                                                           promoProdSource.getAttribute("ProductBrand"));
                            dupPromoProdukRow.setAttribute("ProductBrandDesc",
                                                           promoProdSource.getAttribute("ProductBrandDesc"));
                            dupPromoProdukRow.setAttribute("ProductExt",
                                                           promoProdSource.getAttribute("ProductExt"));
                            dupPromoProdukRow.setAttribute("ProductExtDesc",
                                                           promoProdSource.getAttribute("ProductExtDesc"));
                            dupPromoProdukRow.setAttribute("ProductPack",
                                                           promoProdSource.getAttribute("ProductPack"));
                            dupPromoProdukRow.setAttribute("ProductPackDesc",
                                                           promoProdSource.getAttribute("ProductPackDesc"));
                            dupPromoProdukRow.setAttribute("Descr",
                                                           promoProdSource.getAttribute("Descr"));
                            dupPromoProdukRow.setAttribute("Mekanisme",
                                                           promoProdSource.getAttribute("Mekanisme"));
                            dupPromoProdukRow.setAttribute("AmountPromo",
                                                           promoProdSource.getAttribute("AmountPromo"));
                            dupPromoProdukRow.setAttribute("EstBudgetProp",
                                                           promoProdSource.getAttribute("EstBudgetProp"));
                            dupPromoProdukRow.setAttribute("RegCustFlag",
                                                           produkCustomer);
                            dupPromoProdukRow.setAttribute("BudgetBy",
                                                           promoProdSource.getAttribute("BudgetBy"));
                            dupPromoProdukRow.setAttribute("ExclCustBy",
                                                           promoProdSource.getAttribute("ExclCustBy"));
                            dupPromoProdukRow.setAttribute("DiscMf",
                                                           promoProdSource.getAttribute("DiscMf"));
                            dupPromoProdukRow.setAttribute("DiscOnTop",
                                                           promoProdSource.getAttribute("DiscOnTop"));
                            dupPromoProdukRow.setAttribute("DiscRasioMf",
                                                           promoProdSource.getAttribute("DiscRasioMf"));
                            dupPromoProdukRow.setAttribute("DiscRasioOnTop",
                                                           promoProdSource.getAttribute("DiscRasioOnTop"));
                            dupPromoProdukRow.setAttribute("DiscRasioTotal1",
                                                           promoProdSource.getAttribute("DiscRasioTotal1"));
                            dupPromoProdukRow.setAttribute("BrgBonusMf",
                                                           promoProdSource.getAttribute("BrgBonusMf"));
                            dupPromoProdukRow.setAttribute("BrgBonusOnTop",
                                                           promoProdSource.getAttribute("BrgBonusOnTop"));
                            dupPromoProdukRow.setAttribute("BrgBonusRasioMf",
                                                           promoProdSource.getAttribute("BrgBonusRasioMf"));
                            dupPromoProdukRow.setAttribute("BrgBonusRasioOnTop",
                                                           promoProdSource.getAttribute("BrgBonusRasioOnTop"));
                            dupPromoProdukRow.setAttribute("BrgBonusRasioTotal",
                                                           promoProdSource.getAttribute("BrgBonusRasioTotal"));
                            dupPromoProdukRow.setAttribute("BiaMf",
                                                           promoProdSource.getAttribute("BiaMf"));
                            dupPromoProdukRow.setAttribute("BiaOntop",
                                                           promoProdSource.getAttribute("BiaOntop"));
                            dupPromoProdukRow.setAttribute("BiaRasioMf",
                                                           promoProdSource.getAttribute("BiaRasioMf"));
                            dupPromoProdukRow.setAttribute("BiaRasionOntop",
                                                           promoProdSource.getAttribute("BiaRasionOntop"));
                            dupPromoProdukRow.setAttribute("BiaRasioTotal",
                                                           promoProdSource.getAttribute("BiaRasioTotal"));
                            dupPromoProdukRow.setAttribute("CloseFlag", "N");
                            dupPromoProdukRow.setAttribute("PaketFlag",
                                                           promoProdSource.getAttribute("PaketFlag"));

                            if (copyAs.equalsIgnoreCase("R")) {
                                dupPromoProdukRow.setAttribute("PpidRef",
                                                               promoProdSource.getAttribute("PromoProdukId"));
                            } else {
                                dupPromoProdukRow.setAttribute("PpidRef",
                                                               null);
                            }

                            //Inserting the duplicate proposal region row
                            dciterPromoProduk.getRowSetIterator().insertRow(dupPromoProdukRow);

                            String promoProdId =
                                String.valueOf(((DBSequence)promoProdSource.getAttribute("PromoProdukId")).getValue());

                            // SUB CHILD: Collect and Inserting Data Produk Variant
                            DuplicateProdukVariantViewImpl voDupProdukVariant =
                                promoProposalAM.getDuplicateProdukVariantView1();
                            voDupProdukVariant.setNamedWhereClauseParam("promoProdukId",
                                                                        promoProdId.trim());
                            voDupProdukVariant.executeQuery();

                            if (voDupProdukVariant.getEstimatedRowCount() >
                                0) {
                                while (voDupProdukVariant.hasNext()) {
                                    Row variantRow = voDupProdukVariant.next();
                                    String prodVariant =
                                        (String)variantRow.getAttribute("ProdVariant");
                                    String variantDesc =
                                        (String)variantRow.getAttribute("VariantDesc");
                                    DCIteratorBinding dciterProdukVariant =
                                        ADFUtils.findIterator("ProdukVariantView1Iterator");
                                    Row dupProdVariantRow =
                                        dciterProdukVariant.getRowSetIterator().createRow();
                                    dupProdVariantRow.setAttribute("ProdVariant",
                                                                   prodVariant);
                                    dupProdVariantRow.setAttribute("VariantDesc",
                                                                   variantDesc);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Item
                            DuplicateProdukItemViewImpl voDupProdukItem =
                                promoProposalAM.getDuplicateProdukItemView1();
                            voDupProdukItem.setNamedWhereClauseParam("promoProdukId",
                                                                     promoProdId.trim());
                            voDupProdukItem.executeQuery();

                            if (voDupProdukItem.getEstimatedRowCount() > 0) {
                                while (voDupProdukItem.hasNext()) {
                                    Row itemRow = voDupProdukItem.next();
                                    String prodItem =
                                        (String)itemRow.getAttribute("ProdItem");
                                    String itemDesc =
                                        (String)itemRow.getAttribute("ItemDesc");
                                    DCIteratorBinding dciterProdukItem =
                                        ADFUtils.findIterator("ProdukItemView1Iterator");
                                    Row dupProdVariantRow =
                                        dciterProdukItem.getRowSetIterator().createRow();
                                    dupProdVariantRow.setAttribute("ProdItem",
                                                                   prodItem);
                                    dupProdVariantRow.setAttribute("ItemDesc",
                                                                   itemDesc);
                                }
                            }
                            //set customer regional or non regional HO

                            // SUB CHILD: Duplicate customer

                            // SUB CHILD: Collect and Inserting Data Produk Customer by Region
                            DCIteratorBinding dciterPromoCustomerHO =
                                ADFUtils.findIterator("PromoCustomerHoView1Iterator");
                            DuplicatePromoCustomerHOImpl voDupPromoCustHo =
                                promoProposalAM.getDuplicatePromoCustomerHO1();
                            voDupPromoCustHo.setNamedWhereClauseParam("promoProdukId",
                                                                      promoProdId.trim());
                            voDupPromoCustHo.executeQuery();

                            if (voDupPromoCustHo.getEstimatedRowCount() > 0) {
                                while (voDupPromoCustHo.hasNext()) {
                                    Row promHoRow = voDupPromoCustHo.next();
                                    String RegionCode =
                                        (String)promHoRow.getAttribute("RegionCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("RegionCode");
                                    String RegionDesc =
                                        (String)promHoRow.getAttribute("RegionDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("RegionDesc");
                                    String AreaCode =
                                        (String)promHoRow.getAttribute("AreaCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("AreaCode");
                                    String AreaDesc =
                                        (String)promHoRow.getAttribute("AreaDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("AreaDesc");
                                    String LocCode =
                                        (String)promHoRow.getAttribute("LocCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("LocCode");
                                    String LocDesc =
                                        (String)promHoRow.getAttribute("LocDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("LocDesc");
                                    String CusttypCode =
                                        (String)promHoRow.getAttribute("CusttypCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CusttypCode");
                                    String CusttypDesc =
                                        (String)promHoRow.getAttribute("CusttypDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CusttypDesc");
                                    String CustgrpCode =
                                        (String)promHoRow.getAttribute("CustgrpCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustgrpCode");
                                    String CustgrpDesc =
                                        (String)promHoRow.getAttribute("CustgrpDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustgrpDesc");
                                    String CustomerId = "";
                                    oracle.jbo.domain.Number customerIdtemp =
                                        (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId") ==
                                        null ?
                                        new oracle.jbo.domain.Number(0) :
                                        (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId");
                                    if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                        CustomerId = customerIdtemp.toString();
                                    } else {
                                        CustomerId = customerIdtemp.toString();
                                    }
                                    String CustomerName =
                                        (String)promHoRow.getAttribute("CustomerName") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustomerName");
                                    String CustRegFlg =
                                        (String)promHoRow.getAttribute("CustRegFlg") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustRegFlg");
                                    String CustNregFlg =
                                        (String)promHoRow.getAttribute("CustNregFlg") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustNregFlg");

                                    DCIteratorBinding dciterPromoCustHo =
                                        ADFUtils.findIterator("PromoCustomerHoView1Iterator");
                                    Row dupPromoCustHoRow =
                                        dciterPromoCustHo.getRowSetIterator().createRow();

                                    dupPromoCustHoRow.setAttribute("RegionCode",
                                                                   RegionCode);
                                    dupPromoCustHoRow.setAttribute("RegionDesc",
                                                                   RegionDesc);
                                    dupPromoCustHoRow.setAttribute("AreaCode",
                                                                   AreaCode);
                                    dupPromoCustHoRow.setAttribute("AreaDesc",
                                                                   AreaDesc);
                                    dupPromoCustHoRow.setAttribute("LocCode",
                                                                   LocCode);
                                    dupPromoCustHoRow.setAttribute("LocDesc",
                                                                   LocDesc);
                                    dupPromoCustHoRow.setAttribute("CusttypCode",
                                                                   CusttypCode);
                                    dupPromoCustHoRow.setAttribute("CusttypDesc",
                                                                   CusttypDesc);
                                    dupPromoCustHoRow.setAttribute("CustgrpCode",
                                                                   CustgrpCode);
                                    dupPromoCustHoRow.setAttribute("CustgrpDesc",
                                                                   CustgrpDesc);
                                    dupPromoCustHoRow.setAttribute("CustomerId",
                                                                   CustomerId);
                                    dupPromoCustHoRow.setAttribute("CustomerName",
                                                                   CustomerName);
                                    dupPromoCustHoRow.setAttribute("CustRegFlg",
                                                                   CustRegFlg);
                                    dupPromoCustHoRow.setAttribute("CustNregFlg",
                                                                   CustNregFlg);

                                }
                            }

                            // SUB CHILD: Duplicate exclude customer
                            if (!produkExclCust.equalsIgnoreCase("")) {
                                if (srcUsrTypeCreator.equalsIgnoreCase(userHo)) {
                                    // USER TYPE CREATOR == HO

                                    DuplicatePromoCustomerExHOImpl voDupPromoExclHo =
                                        promoProposalAM.getDuplicatePromoCustomerExHO1();
                                    voDupPromoExclHo.setNamedWhereClauseParam("promoProdukId",
                                                                              promoProdId.trim());
                                    voDupPromoExclHo.executeQuery();

                                    if (voDupPromoExclHo.getEstimatedRowCount() >
                                        0) {
                                        while (voDupPromoExclHo.hasNext()) {
                                            Row promHoRow =
                                                voDupPromoExclHo.next();
                                            String RegionCode =
                                                (String)promHoRow.getAttribute("RegionCode") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("RegionCode");
                                            String RegionDesc =
                                                (String)promHoRow.getAttribute("RegionDesc") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("RegionDesc");
                                            String AreaCode =
                                                (String)promHoRow.getAttribute("AreaCode") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("AreaCode");
                                            String AreaDesc =
                                                (String)promHoRow.getAttribute("AreaDesc") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("AreaDesc");
                                            String LocCode =
                                                (String)promHoRow.getAttribute("LocCode") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("LocCode");
                                            String LocDesc =
                                                (String)promHoRow.getAttribute("LocDesc") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("LocDesc");
                                            String CusttypCode =
                                                (String)promHoRow.getAttribute("CusttypCode") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CusttypCode");
                                            String CusttypDesc =
                                                (String)promHoRow.getAttribute("CusttypDesc") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CusttypDesc");
                                            String CustgrpCode =
                                                (String)promHoRow.getAttribute("CustgrpCode") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CustgrpCode");
                                            String CustgrpDesc =
                                                (String)promHoRow.getAttribute("CustgrpDesc") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CustgrpDesc");
                                            String CustomerId = "";
                                            oracle.jbo.domain.Number customerIdtemp =
                                                (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId") ==
                                                null ?
                                                new oracle.jbo.domain.Number(0) :
                                                (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId");
                                            if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                                CustomerId =
                                                        customerIdtemp.toString();
                                            } else {
                                                CustomerId =
                                                        customerIdtemp.toString();
                                            }
                                            String CustomerName =
                                                (String)promHoRow.getAttribute("CustomerName") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CustomerName");
                                            String CustRegFlg =
                                                (String)promHoRow.getAttribute("CustxRegFlg") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CustxRegFlg");
                                            String CustNregFlg =
                                                (String)promHoRow.getAttribute("CustxNregFlg") ==
                                                null ? "" :
                                                (String)promHoRow.getAttribute("CustxNregFlg");


                                            DCIteratorBinding dciterPromoExHo =
                                                ADFUtils.findIterator("PromoCustxHoView1Iterator");

                                            Row dupPromoExHoRow =
                                                dciterPromoExHo.getRowSetIterator().createRow();
                                            dupPromoExHoRow.setAttribute("RegionCode",
                                                                         RegionCode);
                                            dupPromoExHoRow.setAttribute("RegionDesc",
                                                                         RegionDesc);
                                            dupPromoExHoRow.setAttribute("AreaCode",
                                                                         AreaCode);
                                            dupPromoExHoRow.setAttribute("AreaDesc",
                                                                         AreaDesc);
                                            dupPromoExHoRow.setAttribute("LocCode",
                                                                         LocCode);
                                            dupPromoExHoRow.setAttribute("LocDesc",
                                                                         LocDesc);
                                            dupPromoExHoRow.setAttribute("CusttypCode",
                                                                         CusttypCode);
                                            dupPromoExHoRow.setAttribute("CusttypDesc",
                                                                         CusttypDesc);
                                            dupPromoExHoRow.setAttribute("CustgrpCode",
                                                                         CustgrpCode);
                                            dupPromoExHoRow.setAttribute("CustgrpDesc",
                                                                         CustgrpDesc);
                                            dupPromoExHoRow.setAttribute("CustomerId",
                                                                         CustomerId);
                                            dupPromoExHoRow.setAttribute("CustomerName",
                                                                         CustomerName);
                                            dupPromoExHoRow.setAttribute("CustxRegFlg",
                                                                         CustRegFlg);
                                            dupPromoExHoRow.setAttribute("CustxNregFlg",
                                                                         CustNregFlg);

                                        }
                                    }

                                } else if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                                    // USER TYPE CREATOR == AREA
                                    DuplicatePromoCustomerExAreaImpl voDupPromoExclArea =
                                        promoProposalAM.getDuplicatePromoCustomerExArea1();
                                    voDupPromoExclArea.setNamedWhereClauseParam("promoProdukId",
                                                                                promoProdId.trim());
                                    voDupPromoExclArea.executeQuery();

                                    if (voDupPromoExclArea.getEstimatedRowCount() >
                                        0) {
                                        while (voDupPromoExclArea.hasNext()) {
                                            Row promAreaRow =
                                                voDupPromoExclArea.next();
                                            String RegionCode =
                                                (String)promAreaRow.getAttribute("RegionCode") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("RegionCode");
                                            String RegionDesc =
                                                (String)promAreaRow.getAttribute("RegionDesc") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("RegionDesc");
                                            String AreaCode =
                                                (String)promAreaRow.getAttribute("AreaCode") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("AreaCode");
                                            String AreaDesc =
                                                (String)promAreaRow.getAttribute("AreaDesc") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("AreaDesc");
                                            String LocCode =
                                                (String)promAreaRow.getAttribute("LocCode") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("LocCode");
                                            String LocDesc =
                                                (String)promAreaRow.getAttribute("LocDesc") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("LocDesc");
                                            String CusttypCode =
                                                (String)promAreaRow.getAttribute("CusttypCode") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CusttypCode");
                                            String CusttypDesc =
                                                (String)promAreaRow.getAttribute("CusttypDesc") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CusttypDesc");
                                            String CustgrpCode =
                                                (String)promAreaRow.getAttribute("CustgrpCode") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CustgrpCode");
                                            String CustgrpDesc =
                                                (String)promAreaRow.getAttribute("CustgrpDesc") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CustgrpDesc");
                                            String CustomerId = "";
                                            oracle.jbo.domain.Number customerIdtemp =
                                                (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId") ==
                                                null ?
                                                new oracle.jbo.domain.Number(0) :
                                                (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId");
                                            if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                                CustomerId =
                                                        customerIdtemp.toString();
                                            } else {
                                                CustomerId =
                                                        customerIdtemp.toString();
                                            }
                                            String CustomerName =
                                                (String)promAreaRow.getAttribute("CustomerName") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CustomerName");
                                            String CustRegFlg =
                                                (String)promAreaRow.getAttribute("CustxRegFlg") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CustxRegFlg");
                                            String CustNregFlg =
                                                (String)promAreaRow.getAttribute("CustxNregFlg") ==
                                                null ? "" :
                                                (String)promAreaRow.getAttribute("CustxNregFlg");


                                            DCIteratorBinding dciterPromoExArea =
                                                ADFUtils.findIterator("PromoCustxAreaView1Iterator");

                                            Row dupPromoExAreaRow =
                                                dciterPromoExArea.getRowSetIterator().createRow();
                                            dupPromoExAreaRow.setAttribute("RegionCode",
                                                                           RegionCode);
                                            dupPromoExAreaRow.setAttribute("RegionDesc",
                                                                           RegionDesc);
                                            dupPromoExAreaRow.setAttribute("AreaCode",
                                                                           AreaCode);
                                            dupPromoExAreaRow.setAttribute("AreaDesc",
                                                                           AreaDesc);
                                            dupPromoExAreaRow.setAttribute("LocCode",
                                                                           LocCode);
                                            dupPromoExAreaRow.setAttribute("LocDesc",
                                                                           LocDesc);
                                            dupPromoExAreaRow.setAttribute("CusttypCode",
                                                                           CusttypCode);
                                            dupPromoExAreaRow.setAttribute("CusttypDesc",
                                                                           CusttypDesc);
                                            dupPromoExAreaRow.setAttribute("CustgrpCode",
                                                                           CustgrpCode);
                                            dupPromoExAreaRow.setAttribute("CustgrpDesc",
                                                                           CustgrpDesc);
                                            dupPromoExAreaRow.setAttribute("CustomerId",
                                                                           CustomerId);
                                            dupPromoExAreaRow.setAttribute("CustomerName",
                                                                           CustomerName);
                                            dupPromoExAreaRow.setAttribute("CustxRegFlg",
                                                                           CustRegFlg);
                                            dupPromoExAreaRow.setAttribute("CustxNregFlg",
                                                                           CustNregFlg);

                                        }
                                    }
                                } else {
                                    // USER TYPE CREATOR == INVALID
                                }

                            } else {
                                // DONT COPY EXCLUDE CUSTOMER
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Target
                            DuplicateTargetViewImpl voDupTarget =
                                (DuplicateTargetViewImpl)promoProposalAM.getDuplicateTargetView1();
                            voDupTarget.setNamedWhereClauseParam("promoProdukId",
                                                                 promoProdId.trim());
                            voDupTarget.executeQuery();

                            if (voDupTarget.getEstimatedRowCount() > 0) {
                                while (voDupTarget.hasNext()) {
                                    Row targetRow = voDupTarget.next();
                                    Number avgQty =
                                        (Number)targetRow.getAttribute("AvgQty");
                                    Number price =
                                        (Number)targetRow.getAttribute("Price");
                                    String priceBased =
                                        (String)targetRow.getAttribute("PriceBased");
                                    String priceList =
                                        (String)targetRow.getAttribute("PriceList");
                                    Number qty =
                                        (Number)targetRow.getAttribute("Qty");
                                    String uom =
                                        (String)targetRow.getAttribute("Uom");
                                    Number value =
                                        (Number)targetRow.getAttribute("Value");

                                    DCIteratorBinding dciterTarget =
                                        ADFUtils.findIterator("TargetView1Iterator");
                                    Row dupTargetRow =
                                        dciterTarget.getRowSetIterator().createRow();
                                    dupTargetRow.setAttribute("AvgQty",
                                                              avgQty);
                                    dupTargetRow.setAttribute("Price", price);
                                    dupTargetRow.setAttribute("PriceBased",
                                                              priceBased);
                                    dupTargetRow.setAttribute("PriceList",
                                                              priceList);
                                    dupTargetRow.setAttribute("Qty", qty);
                                    dupTargetRow.setAttribute("Uom", uom);
                                    dupTargetRow.setAttribute("Value", value);
                                }
                            }

                            if (discountType1.equalsIgnoreCase(discTypePotongan)) {
                                // SUB CHILD: Collect and Inserting Data Produk Potongan / Discount
                                DuplicateDiscountViewImpl voDupDiscount =
                                    (DuplicateDiscountViewImpl)promoProposalAM.getDuplicateDiscountView1();
                                voDupDiscount.setNamedWhereClauseParam("promoProdukId",
                                                                       promoProdId.trim());
                                voDupDiscount.executeQuery();

                                if (voDupTarget.getEstimatedRowCount() > 0) {
                                    while (voDupDiscount.hasNext()) {
                                        Row discountRow = voDupDiscount.next();
                                        String tipePerhitungan =
                                            (String)discountRow.getAttribute("TipePerhitungan");
                                        String uom =
                                            (String)discountRow.getAttribute("Uom");
                                        Number qtyFrom =
                                            (Number)discountRow.getAttribute("QtyFrom");
                                        Number qtyTo =
                                            (Number)discountRow.getAttribute("QtyTo");
                                        String tipePotongan =
                                            (String)discountRow.getAttribute("TipePotongan");
                                        Number discNonYearly =
                                            (Number)discountRow.getAttribute("DiscNonYearly");
                                        Number discYearly =
                                            (Number)discountRow.getAttribute("DiscYearly");
                                        Number kelipatan =
                                            (Number)discountRow.getAttribute("Kelipatan");

                                        DCIteratorBinding dciterDiscount =
                                            ADFUtils.findIterator("DiscountView1Iterator");
                                        Row dupDiscountRow =
                                            dciterDiscount.getRowSetIterator().createRow();
                                        dupDiscountRow.setAttribute("TipePerhitungan",
                                                                    tipePerhitungan);
                                        dupDiscountRow.setAttribute("Uom",
                                                                    uom);
                                        dupDiscountRow.setAttribute("QtyFrom",
                                                                    qtyFrom);
                                        dupDiscountRow.setAttribute("QtyTo",
                                                                    qtyTo);
                                        dupDiscountRow.setAttribute("TipePotongan",
                                                                    tipePotongan);
                                        dupDiscountRow.setAttribute("DiscNonYearly",
                                                                    discNonYearly);
                                        dupDiscountRow.setAttribute("DiscYearly",
                                                                    discYearly);
                                        dupDiscountRow.setAttribute("Kelipatan",
                                                                    kelipatan);
                                    }
                                }
                            } else if (discountType1.equalsIgnoreCase(discTypeBiaya)) {
                                // SUB CHILD: Collect and Inserting Data Produk Biaya
                                DuplicateBiayaViewImpl voDupBiaya =
                                    promoProposalAM.getDuplicateBiayaView1();
                                voDupBiaya.setNamedWhereClauseParam("promoProdukId",
                                                                    promoProdId.trim());
                                voDupBiaya.executeQuery();

                                if (voDupBiaya.getEstimatedRowCount() > 0) {
                                    while (voDupBiaya.hasNext()) {
                                        Row biayaRow = voDupBiaya.next();
                                        String descr =
                                            (String)biayaRow.getAttribute("Descr");
                                        Number biayaNonYearly =
                                            (Number)biayaRow.getAttribute("BiayaNonYearly");
                                        Number biayaYearly =
                                            (Number)biayaRow.getAttribute("BiayaYearly");
                                        Number qty =
                                            (Number)biayaRow.getAttribute("BiayaQty");
                                        String uom =
                                            (String)biayaRow.getAttribute("BiayaUom");
                                        Number price =
                                            (Number)biayaRow.getAttribute("BiayaPrice");
                                        Number totAmt =
                                            (Number)biayaRow.getAttribute("BiayaTotAmt");

                                        DCIteratorBinding dciterBiaya =
                                            ADFUtils.findIterator("BiayaView1Iterator");
                                        Row dupBiayaRow =
                                            dciterBiaya.getRowSetIterator().createRow();
                                        dupBiayaRow.setAttribute("Descr",
                                                                 descr);
                                        dupBiayaRow.setAttribute("BiayaNonYearly",
                                                                 biayaNonYearly);
                                        dupBiayaRow.setAttribute("BiayaYearly",
                                                                 biayaYearly);
                                        dupBiayaRow.setAttribute("BiayaQty",
                                                                 null);
                                        dupBiayaRow.setAttribute("BiayaUom",
                                                                 null);
                                        dupBiayaRow.setAttribute("BiayaPrice",
                                                                 null);
                                        dupBiayaRow.setAttribute("BiayaTotAmt",
                                                                 totAmt);
                                    }
                                }
                            } else if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
                                // SUB CHILD: Collect and Inserting Data Produk Promo Bonus
                                DuplicatePromoBonusViewImpl voDupBonus =
                                    promoProposalAM.getDuplicatePromoBonusView1();
                                voDupBonus.setNamedWhereClauseParam("promoProdukId",
                                                                    promoProdId.trim());
                                voDupBonus.executeQuery();

                                if (voDupBonus.getEstimatedRowCount() > 0) {
                                    while (voDupBonus.hasNext()) {
                                        Row addBonus = voDupBonus.next();
                                        String productCategory =
                                            (String)addBonus.getAttribute("ProductCategory");
                                        String productCategoryDesc =
                                            (String)addBonus.getAttribute("ProductCategoryDesc");
                                        String productClass =
                                            (String)addBonus.getAttribute("ProductClass");
                                        String productClassDesc =
                                            (String)addBonus.getAttribute("ProductClassDesc");
                                        String productBrand =
                                            (String)addBonus.getAttribute("ProductBrand");
                                        String productBrandDesc =
                                            (String)addBonus.getAttribute("ProductBrandDesc");
                                        String productExt =
                                            (String)addBonus.getAttribute("ProductExt");
                                        String productExtDesc =
                                            (String)addBonus.getAttribute("ProductExtDesc");
                                        String productPack =
                                            (String)addBonus.getAttribute("ProductPack");
                                        String productPackDesc =
                                            (String)addBonus.getAttribute("ProductPackDesc");
                                        String uom =
                                            (String)addBonus.getAttribute("Uom");
                                        Number qtyFrom =
                                            (Number)addBonus.getAttribute("QtyFrom");
                                        String tipePotongan =
                                            (String)addBonus.getAttribute("TipePotongan");
                                        Number valuePotongan =
                                            (Number)addBonus.getAttribute("ValuePotongan");
                                        Number discYearly =
                                            (Number)addBonus.getAttribute("DiscYearly");
                                        Number discNonYearly =
                                            (Number)addBonus.getAttribute("DiscNonYearly");
                                        String prodVarBonus =
                                            (String)addBonus.getAttribute("ProductVariantBonus") ==
                                            null ? "" :
                                            (String)addBonus.getAttribute("ProductVariantBonus");
                                        String prodItemBonus =
                                            (String)addBonus.getAttribute("ProductItemBonus") ==
                                            null ? "" :
                                            (String)addBonus.getAttribute("ProductItemBonus");
                                        String inputPriceBy =
                                            (String)addBonus.getAttribute("InputPriceBy");
                                        Number priceVal =
                                            (Number)addBonus.getAttribute("PriceVal");
                                        Number qtyMulPrice =
                                            (Number)addBonus.getAttribute("QtyMulPrice");

                                        DCIteratorBinding dciterBonus =
                                            ADFUtils.findIterator("PromoBonusView1Iterator");
                                        Row dupBonusRow =
                                            dciterBonus.getRowSetIterator().createRow();
                                        dupBonusRow.setAttribute("ProductCategory",
                                                                 productCategory);
                                        dupBonusRow.setAttribute("ProductCategoryDesc",
                                                                 productCategoryDesc);
                                        dupBonusRow.setAttribute("ProductClass",
                                                                 productClass);
                                        dupBonusRow.setAttribute("ProductClassDesc",
                                                                 productClassDesc);
                                        dupBonusRow.setAttribute("ProductBrand",
                                                                 productBrand);
                                        dupBonusRow.setAttribute("ProductBrandDesc",
                                                                 productBrandDesc);
                                        dupBonusRow.setAttribute("ProductExt",
                                                                 productExt);
                                        dupBonusRow.setAttribute("ProductExtDesc",
                                                                 productExtDesc);
                                        dupBonusRow.setAttribute("ProductPack",
                                                                 productPack);
                                        dupBonusRow.setAttribute("ProductPackDesc",
                                                                 productPackDesc);
                                        dupBonusRow.setAttribute("Uom", uom);
                                        dupBonusRow.setAttribute("QtyFrom",
                                                                 qtyFrom);
                                        dupBonusRow.setAttribute("TipePotongan",
                                                                 tipePotongan);
                                        dupBonusRow.setAttribute("ValuePotongan",
                                                                 valuePotongan);
                                        dupBonusRow.setAttribute("DiscYearly",
                                                                 discYearly);
                                        dupBonusRow.setAttribute("DiscNonYearly",
                                                                 discNonYearly);
                                        dupBonusRow.setAttribute("InputPriceBy",
                                                                 inputPriceBy);
                                        dupBonusRow.setAttribute("PriceVal",
                                                                 priceVal);
                                        dupBonusRow.setAttribute("QtyMulPrice",
                                                                 qtyMulPrice);

                                        DBSequence promoBonusId =
                                            (DBSequence)dupBonusRow.getAttribute("PromoBonusId");

                                        promoBonusVariantList.add(promoBonusId.getValue() +
                                                                  ";" +
                                                                  prodVarBonus);
                                        promoBonusItemList.add(promoBonusId.getValue() +
                                                               ";" +
                                                               prodItemBonus);
                                    }
                                }
                            } else {
                                // OTHER SUB CHILD TYPE
                            }
                        }
                    }

                    OperationBinding operationBindingCommit =
                        bindings.getOperationBinding("Commit");
                    operationBindingCommit.execute();

                    if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
                        // SUB-SUB CHILD: Inserting Data Produk Promo Bonus Variant
                        if (promoBonusVariantList.size() > 0) {
                            for (String promoBonusVariant :
                                 promoBonusVariantList) {
                                String[] bonusVarArr =
                                    promoBonusVariant.split(";");

                                String promoBonusId = "";
                                try {
                                    promoBonusId = bonusVarArr[0].trim();
                                } catch (Exception e) {
                                    promoBonusId = "";
                                }

                                String bonusVariantList = "";
                                try {
                                    bonusVariantList = bonusVarArr[1].trim();
                                } catch (Exception e) {
                                    bonusVariantList = "";
                                }

                                if (!promoBonusId.equalsIgnoreCase("") &&
                                    !bonusVariantList.equalsIgnoreCase("")) {
                                    String[] bonVarArr =
                                        bonusVariantList.split("\\|", -1);
                                    for (int v = 0; v < bonVarArr.length;
                                         v++) {
                                        String bonusVariant =
                                            bonVarArr[v].trim();
                                        if (promoBonusId != null &&
                                            bonusVariant != null) {
                                            PreparedStatement addProdBonusVariantStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "INSERT INTO PROMO_BONUS_VARIANT (PROMO_BONUS_ID, PROD_VARIANT) " +
                                                    "VALUES (" + promoBonusId +
                                                    ", '" + bonusVariant +
                                                    "')";
                                                addProdBonusVariantStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                addProdBonusVariantStmt.executeUpdate();
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (addProdBonusVariantStmt !=
                                                    null) {
                                                    try {
                                                        addProdBonusVariantStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // SUB-SUB CHILD: Inserting Data Produk Promo Bonus Item
                        if (promoBonusItemList.size() > 0) {
                            for (String promoBonusItem : promoBonusItemList) {
                                String[] bonusItemArr =
                                    promoBonusItem.split(";");

                                String promoBonusId = "";
                                try {
                                    promoBonusId = bonusItemArr[0].trim();
                                } catch (Exception e) {
                                    promoBonusId = "";
                                }

                                String bonusItemList = "";
                                try {
                                    bonusItemList = bonusItemArr[1].trim();
                                } catch (Exception e) {
                                    bonusItemList = "";
                                }

                                if (!promoBonusId.equalsIgnoreCase("") &&
                                    !bonusItemList.equalsIgnoreCase("")) {
                                    String[] bonItemArr =
                                        bonusItemList.split("\\|", -1);
                                    for (int b = 0; b < bonItemArr.length;
                                         b++) {
                                        String prodItemCode =
                                            bonItemArr[b].trim();
                                        if (promoBonusId != null &&
                                            prodItemCode != null) {
                                            PreparedStatement addProdBonusItemStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "INSERT INTO PROMO_BONUS_PROD_ITEM (PROMO_BONUS_ID, PROD_ITEM) " +
                                                    "VALUES (" + promoBonusId +
                                                    ", '" + prodItemCode +
                                                    "')";
                                                addProdBonusItemStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                addProdBonusItemStmt.executeUpdate();
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (addProdBonusItemStmt !=
                                                    null) {
                                                    try {
                                                        addProdBonusItemStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    OperationBinding operationBinding =
                        bindings.getOperationBinding("ExecutePromoProduct");
                    operationBinding.execute();

                    //Set to draft mode
                    DCIteratorBinding parentIter =
                        (DCIteratorBinding)bindings.get("ProposalView1Iterator");
                    ProposalViewImpl propVo =
                        (ProposalViewImpl)parentIter.getViewObject();
                    //View Criteria without bind variable
                    ViewCriteria vc =
                        propVo.getViewCriteria("ProposalDraftVC");
                    propVo.applyViewCriteria(vc);
                    propVo.executeQuery();

                    //Set filter mode
                    ADFContext adfCtx = ADFContext.getCurrent();
                    Map sessionScope = adfCtx.getSessionScope();
                    sessionScope.put("filterMode", "DRAFT");

                    switchMain.setFacetName("dataavailable");
                    switchButtonMain.setFacetName("dataavailable");
                    AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);

                } else {
                    // DO NOTHING
                }
            }
        } else {
            if (dateValid) {
                // INSERT NEW PROMO DATE VALUE
                oracle.jbo.domain.Date newProgPromoStart =
                    ADFUtils.convertToJboDate("yyyy-MM-dd hh:mm:ss",
                                              dateTimeValueStart);
                oracle.jbo.domain.Date newProgPromoEnd =
                    ADFUtils.convertToJboDate("yyyy-MM-dd hh:mm:ss",
                                              dateTimeValueEnd);

                long numOfDaysPromo = 0;
                try {
                    numOfDaysPromo =
                            ADFUtils.diffInDays(dateTimeValueStart, dateTimeValueEnd);
                } catch (ParseException e) {
                    FacesMessage msg =
                        new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                         "Failed to parse date value.",
                                         "Failed to parse date value.");
                    fctx.addMessage(null, msg);
                }

                // ===== COLLECT DATA ==================================================
                // PARENT: Collect Data Proposal
                DCIteratorBinding dciterProposal =
                    ADFUtils.findIterator("ProposalView1Iterator");
                Row propCurrentRow = dciterProposal.getCurrentRow();
                String propType =
                    propCurrentRow.getAttribute("ProposalType") == null ? "" :
                    (String)propCurrentRow.getAttribute("ProposalType");
                String[] propAttrs = propCurrentRow.getAttributeNames();
                String[] skipPropAttrs =
                    new String[] { "ProposalId", "ProposalNo", "Status",
                                   "AddendumKe", "ConfirmNo", "CopySource",
                                   "PeriodeProgFrom", "PeriodeProgTo",
                                   "ProgDays", "HistTranDtTo",
                                   "HistTranDtFrom" };
                List skipPropAttrList = Arrays.asList(skipPropAttrs);
                // CHILD: Collect Data Customer
                if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                    // USER TYPE CREATOR == AREA
                    if (dciterPromoCustomerArea.getEstimatedRowCount() > 0) {
                        listPromoCustomerArea =
                                new ArrayList<ListPromoCustomerArea>();
                        for (Row r :
                             dciterPromoCustomerArea.getAllRowsInRange()) {
                            ListPromoCustomerArea promoCustomerAreaTemp =
                                new ListPromoCustomerArea();
                            //                            promoCustomerAreaTemp.setProposalId((String)r.getAttribute("ProposalId")==null ? "" :(String)r.getAttribute("ProposalId"));
                            promoCustomerAreaTemp.setRegionCode((String)r.getAttribute("RegionCode") ==
                                                                null ? "" :
                                                                (String)r.getAttribute("RegionCode"));
                            promoCustomerAreaTemp.setRegionDesc((String)r.getAttribute("RegionDesc") ==
                                                                null ? "" :
                                                                (String)r.getAttribute("RegionDesc"));
                            promoCustomerAreaTemp.setAreaCode((String)r.getAttribute("AreaCode") ==
                                                              null ? "" :
                                                              (String)r.getAttribute("AreaCode"));
                            promoCustomerAreaTemp.setAreaDesc((String)r.getAttribute("AreaDesc") ==
                                                              null ? "" :
                                                              (String)r.getAttribute("AreaDesc"));
                            promoCustomerAreaTemp.setLocCode((String)r.getAttribute("LocCode") ==
                                                             null ? "" :
                                                             (String)r.getAttribute("LocCode"));
                            promoCustomerAreaTemp.setLocDesc((String)r.getAttribute("LocDesc") ==
                                                             null ? "" :
                                                             (String)r.getAttribute("LocDesc"));
                            promoCustomerAreaTemp.setCusttypCode((String)r.getAttribute("CusttypCode") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("CusttypCode"));
                            promoCustomerAreaTemp.setCusttypDesc((String)r.getAttribute("CusttypDesc") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("CusttypDesc"));
                            promoCustomerAreaTemp.setCustgrpCode((String)r.getAttribute("CustgrpCode") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("CustgrpCode"));
                            promoCustomerAreaTemp.setCustgrpDesc((String)r.getAttribute("CustgrpDesc") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("CustgrpDesc"));
                            oracle.jbo.domain.Number customerIdtemp =
                                (oracle.jbo.domain.Number)r.getAttribute("CustomerId") ==
                                null ? new oracle.jbo.domain.Number(0) :
                                (oracle.jbo.domain.Number)r.getAttribute("CustomerId");
                            if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                promoCustomerAreaTemp.setCustomerId(BigDecimal.ZERO);
                            } else {
                                promoCustomerAreaTemp.setCustomerId(customerIdtemp.getBigDecimalValue());
                            }
                            promoCustomerAreaTemp.setCustomerName((String)r.getAttribute("CustomerName") ==
                                                                  null ? "" :
                                                                  (String)r.getAttribute("CustomerName"));
                            promoCustomerAreaTemp.setCustRegFlg((String)r.getAttribute("CustRegFlg") ==
                                                                null ? "" :
                                                                (String)r.getAttribute("CustRegFlg"));
                            promoCustomerAreaTemp.setCustNregFlg((String)r.getAttribute("CustNregFlg") ==
                                                                 null ? "" :
                                                                 (String)r.getAttribute("CustNregFlg"));
                            listPromoCustomerArea.add(promoCustomerAreaTemp);
                        }
                    }
                } else {
                    // USER TYPE CREATOR == HO
                    // DO NOTHING
                }

                // CHILD: Data Promo Produk
                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                List promoProdList = new ArrayList<Row>();
                if (dciterPromoProduk.getEstimatedRowCount() > 0) {
                    for (Row r : dciterPromoProduk.getAllRowsInRange()) {
                        promoProdList.add(r);
                    }
                }

                // SUB CHILD: Data Promo Bonus
                DCIteratorBinding dciterPromoBonus =
                    ADFUtils.findIterator("PromoBonusView1Iterator");
                List promoBonusList = new ArrayList<Row>();
                if (dciterPromoBonus.getEstimatedRowCount() > 0) {
                    for (Row r : dciterPromoBonus.getAllRowsInRange()) {
                        promoBonusList.add(r);
                    }
                }

                // ===== INSERTING DATA ============================================
                // PARENT: Insert Data Proposal
                Row dupProposalRow =
                    dciterProposal.getRowSetIterator().createRow();
                for (int i = 0; i < propAttrs.length; i++) {
                    String propAttrName = propAttrs[i];
                    if ("Status".equals(propAttrName))
                        dupProposalRow.setAttribute(propAttrName, "DRAFT");
                    if ("CopySource".equals(propAttrName) &&
                        copyAs.equalsIgnoreCase("R"))
                        dupProposalRow.setAttribute(propAttrName,
                                                    srcProposalNo);
                    if ("PeriodeProgFrom".equals(propAttrName)) {
                        dupProposalRow.setAttribute(propAttrName,
                                                    newProgPromoStart);
                    }
                    if ("PeriodeProgTo".equals(propAttrName)) {
                        dupProposalRow.setAttribute(propAttrName,
                                                    newProgPromoEnd);
                    }
                    if ("ProgDays".equals(propAttrName)) {
                        dupProposalRow.setAttribute(propAttrName,
                                                    numOfDaysPromo);
                    }
                    if ("HistTranDtFrom".equals(propAttrName)) {
                        java.util.Date date2 =
                            ADFUtils.convertOracleDateToJavaUtilDate(newProgPromoStart);

                        DateFormat dfMM = new SimpleDateFormat("MM");
                        String currMon = dfMM.format(date2);
                        Integer last3Mon = Integer.valueOf(currMon) - 3;
                        Integer last1Mon = Integer.valueOf(currMon) - 1;
                        DateFormat dfYY = new SimpleDateFormat("yyyy");
                        String currYear = dfYY.format(date2);
                        Integer thisYear = Integer.valueOf(currYear);

                        DateConversion.Measure last3MonCal =
                            new DateConversion.Measure().month(last3Mon).year(thisYear);
                        String DateTo =
                            thisYear.toString() + String.format("%02d",
                                                                last1Mon) +
                            getLastDay(thisYear.toString(),
                                       last1Mon.toString());
                        String d1HisF = last3MonCal.min().toString();
                        SimpleDateFormat formatterx =
                            new SimpleDateFormat("yyyyMMdd");
                        java.util.Date fr = formatterx.parse(d1HisF);
                        oracle.jbo.domain.Date histFrom =
                            ADFUtils.convertJavaUtilDateToOracleDate(fr);

                        dupProposalRow.setAttribute(propAttrName, histFrom);
                    }
                    if ("HistTranDtTo".equals(propAttrName)) {
                        java.util.Date date2 =
                            ADFUtils.convertOracleDateToJavaUtilDate(newProgPromoStart);

                        DateFormat dfMM = new SimpleDateFormat("MM");
                        String currMon = dfMM.format(date2);
                        Integer last1Mon = Integer.valueOf(currMon) - 1;
                        DateFormat dfYY = new SimpleDateFormat("yyyy");
                        String currYear = dfYY.format(date2);
                        Integer thisYear = Integer.valueOf(currYear);

                        String DateTo =
                            thisYear.toString() + String.format("%02d",
                                                                last1Mon) +
                            getLastDay(thisYear.toString(),
                                       last1Mon.toString());
                        SimpleDateFormat formatterx =
                            new SimpleDateFormat("yyyyMMdd");
                        java.util.Date to = formatterx.parse(DateTo);

                        oracle.jbo.domain.Date histTo =
                            ADFUtils.convertJavaUtilDateToOracleDate(to);

                        dupProposalRow.setAttribute(propAttrName, histTo);
                    }
                    int attrIndex =
                        dupProposalRow.getAttributeIndexOf(propAttrName);
                    //Checking if the attribute is in the skip attribute list and the attribute is updatable
                    if (!skipPropAttrList.contains(propAttrName) &&
                        dupProposalRow.isAttributeUpdateable(attrIndex))
                        //Setting the value for the attributes
                        dupProposalRow.setAttribute(propAttrName,
                                                    propCurrentRow.getAttribute(propAttrName));
                }
                //Inserting the duplicate proposal row
                dciterProposal.getRowSetIterator().insertRow(dupProposalRow);

                // CHILD: Inserting Data Customer
                if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                    // USER TYPE CREATOR == AREA
                    List<ListPromoCustomerArea> PromoCustomerAreaCollectData =
                        getListPromoCustomerArea();
                    if (PromoCustomerAreaCollectData.size() > 0) {
                        for (ListPromoCustomerArea rData :
                             PromoCustomerAreaCollectData) {
                            Row dupPromoCustomerAreaRow =
                                dciterPromoCustomerArea.getRowSetIterator().createRow();
                            //                            dupPromoCustomerAreaRow.setAttribute("ProposalId",proposalId);
                            dupPromoCustomerAreaRow.setAttribute("RegionCode",
                                                                 rData.getRegionCode());
                            dupPromoCustomerAreaRow.setAttribute("RegionDesc",
                                                                 rData.getRegionDesc());
                            dupPromoCustomerAreaRow.setAttribute("AreaCode",
                                                                 rData.getAreaCode());
                            dupPromoCustomerAreaRow.setAttribute("AreaDesc",
                                                                 rData.getAreaDesc());
                            dupPromoCustomerAreaRow.setAttribute("LocCode",
                                                                 rData.getLocCode());
                            dupPromoCustomerAreaRow.setAttribute("LocDesc",
                                                                 rData.getLocDesc());
                            dupPromoCustomerAreaRow.setAttribute("CusttypCode",
                                                                 rData.getCusttypCode());
                            dupPromoCustomerAreaRow.setAttribute("CusttypDesc",
                                                                 rData.getCusttypDesc());
                            dupPromoCustomerAreaRow.setAttribute("CustgrpCode",
                                                                 rData.getCustgrpCode());
                            dupPromoCustomerAreaRow.setAttribute("CustgrpDesc",
                                                                 rData.getCustgrpDesc());
                            dupPromoCustomerAreaRow.setAttribute("CustomerId",
                                                                 rData.getCustomerId());
                            dupPromoCustomerAreaRow.setAttribute("CustomerName",
                                                                 rData.getCustomerName());
                            dupPromoCustomerAreaRow.setAttribute("CustRegFlg",
                                                                 rData.getCustRegFlg());
                            dupPromoCustomerAreaRow.setAttribute("CustNregFlg",
                                                                 rData.getCustNregFlg());
                            //Inserting the duplicate proposal region row
                            dciterPromoCustomerArea.getRowSetIterator().insertRow(dupPromoCustomerAreaRow);
                        }
                    }
                } else {
                    // USER TYPE CREATOR == HO
                    // DO NOTHING
                }

                // CHILD: Inserting Data Promo Produk
                ArrayList<String> promoBonusVariantList =
                    new ArrayList<String>();
                ArrayList<String> promoBonusItemList = new ArrayList<String>();

                if (promoProdList.size() > 0) {
                    for (int i = 0; i < promoProdList.size(); i++) {
                        Row dupPromoProdukRow =
                            dciterPromoProduk.getRowSetIterator().createRow();
                        Row promoProdSource = (Row)promoProdList.get(i);

                        String produkCustomer =
                            (String)promoProdSource.getAttribute("RegCustFlag");
                        /*
                        String produkExclCust =
                            (String)promoProdSource.getAttribute("ExclCustBy") ==
                            null ? "" :
                            (String)promoProdSource.getAttribute("ExclCustBy");
                        */
                        if (propType.equalsIgnoreCase(prodDescCodeFood)) {
                            dupPromoProdukRow.setAttribute("ProductCategory",
                                                           prodCatCodeFood);
                        } else {
                            dupPromoProdukRow.setAttribute("ProductCategory",
                                                           prodCatCodeNonFood);
                        }
                        dupPromoProdukRow.setAttribute("ProductCategoryDesc",
                                                       promoProdSource.getAttribute("ProductCategoryDesc"));
                        dupPromoProdukRow.setAttribute("ProductClass",
                                                       promoProdSource.getAttribute("ProductClass"));
                        dupPromoProdukRow.setAttribute("ProductClassDesc",
                                                       promoProdSource.getAttribute("ProductClassDesc"));
                        dupPromoProdukRow.setAttribute("ProductBrand",
                                                       promoProdSource.getAttribute("ProductBrand"));
                        dupPromoProdukRow.setAttribute("ProductBrandDesc",
                                                       promoProdSource.getAttribute("ProductBrandDesc"));
                        dupPromoProdukRow.setAttribute("ProductExt",
                                                       promoProdSource.getAttribute("ProductExt"));
                        dupPromoProdukRow.setAttribute("ProductExtDesc",
                                                       promoProdSource.getAttribute("ProductExtDesc"));
                        dupPromoProdukRow.setAttribute("ProductPack",
                                                       promoProdSource.getAttribute("ProductPack"));
                        dupPromoProdukRow.setAttribute("ProductPackDesc",
                                                       promoProdSource.getAttribute("ProductPackDesc"));
                        dupPromoProdukRow.setAttribute("Descr",
                                                       promoProdSource.getAttribute("Descr"));
                        dupPromoProdukRow.setAttribute("Mekanisme",
                                                       promoProdSource.getAttribute("Mekanisme"));
                        dupPromoProdukRow.setAttribute("AmountPromo",
                                                       promoProdSource.getAttribute("AmountPromo"));
                        dupPromoProdukRow.setAttribute("EstBudgetProp",
                                                       promoProdSource.getAttribute("EstBudgetProp"));
                        dupPromoProdukRow.setAttribute("RegCustFlag",
                                                       produkCustomer);
                        dupPromoProdukRow.setAttribute("BudgetBy",
                                                       promoProdSource.getAttribute("BudgetBy"));
                        dupPromoProdukRow.setAttribute("ExclCustBy",
                                                       promoProdSource.getAttribute("ExclCustBy"));
                        dupPromoProdukRow.setAttribute("DiscMf",
                                                       promoProdSource.getAttribute("DiscMf"));
                        dupPromoProdukRow.setAttribute("DiscOnTop",
                                                       promoProdSource.getAttribute("DiscOnTop"));
                        dupPromoProdukRow.setAttribute("DiscRasioMf",
                                                       promoProdSource.getAttribute("DiscRasioMf"));
                        dupPromoProdukRow.setAttribute("DiscRasioOnTop",
                                                       promoProdSource.getAttribute("DiscRasioOnTop"));
                        dupPromoProdukRow.setAttribute("DiscRasioTotal1",
                                                       promoProdSource.getAttribute("DiscRasioTotal1"));
                        dupPromoProdukRow.setAttribute("BrgBonusMf",
                                                       promoProdSource.getAttribute("BrgBonusMf"));
                        dupPromoProdukRow.setAttribute("BrgBonusOnTop",
                                                       promoProdSource.getAttribute("BrgBonusOnTop"));
                        dupPromoProdukRow.setAttribute("BrgBonusRasioMf",
                                                       promoProdSource.getAttribute("BrgBonusRasioMf"));
                        dupPromoProdukRow.setAttribute("BrgBonusRasioOnTop",
                                                       promoProdSource.getAttribute("BrgBonusRasioOnTop"));
                        dupPromoProdukRow.setAttribute("BrgBonusRasioTotal",
                                                       promoProdSource.getAttribute("BrgBonusRasioTotal"));
                        dupPromoProdukRow.setAttribute("BiaMf",
                                                       promoProdSource.getAttribute("BiaMf"));
                        dupPromoProdukRow.setAttribute("BiaOntop",
                                                       promoProdSource.getAttribute("BiaOntop"));
                        dupPromoProdukRow.setAttribute("BiaRasioMf",
                                                       promoProdSource.getAttribute("BiaRasioMf"));
                        dupPromoProdukRow.setAttribute("BiaRasionOntop",
                                                       promoProdSource.getAttribute("BiaRasionOntop"));
                        dupPromoProdukRow.setAttribute("BiaRasioTotal",
                                                       promoProdSource.getAttribute("BiaRasioTotal"));
                        dupPromoProdukRow.setAttribute("CloseFlag", "N");
                        dupPromoProdukRow.setAttribute("PaketFlag",
                                                       promoProdSource.getAttribute("PaketFlag"));

                        //Inserting the duplicate proposal region row
                        dciterPromoProduk.getRowSetIterator().insertRow(dupPromoProdukRow);

                        String promoProdId =
                            String.valueOf(((DBSequence)promoProdSource.getAttribute("PromoProdukId")).getValue());

                        // SUB CHILD: Collect and Inserting Data Produk Variant
                        DuplicateProdukVariantViewImpl voDupProdukVariant =
                            promoProposalAM.getDuplicateProdukVariantView1();
                        voDupProdukVariant.setNamedWhereClauseParam("promoProdukId",
                                                                    promoProdId.trim());
                        voDupProdukVariant.executeQuery();

                        if (voDupProdukVariant.getEstimatedRowCount() > 0) {
                            while (voDupProdukVariant.hasNext()) {
                                Row variantRow = voDupProdukVariant.next();
                                String prodVariant =
                                    (String)variantRow.getAttribute("ProdVariant");
                                String variantDesc =
                                    (String)variantRow.getAttribute("VariantDesc");
                                DCIteratorBinding dciterProdukVariant =
                                    ADFUtils.findIterator("ProdukVariantView1Iterator");
                                Row dupProdVariantRow =
                                    dciterProdukVariant.getRowSetIterator().createRow();
                                dupProdVariantRow.setAttribute("ProdVariant",
                                                               prodVariant);
                                dupProdVariantRow.setAttribute("VariantDesc",
                                                               variantDesc);
                            }
                        }

                        // SUB CHILD: Collect and Inserting Data Produk Item
                        DuplicateProdukItemViewImpl voDupProdukItem =
                            promoProposalAM.getDuplicateProdukItemView1();
                        voDupProdukItem.setNamedWhereClauseParam("promoProdukId",
                                                                 promoProdId.trim());
                        voDupProdukItem.executeQuery();

                        if (voDupProdukItem.getEstimatedRowCount() > 0) {
                            while (voDupProdukItem.hasNext()) {
                                Row itemRow = voDupProdukItem.next();
                                String prodItem =
                                    (String)itemRow.getAttribute("ProdItem");
                                String itemDesc =
                                    (String)itemRow.getAttribute("ItemDesc");
                                DCIteratorBinding dciterProdukItem =
                                    ADFUtils.findIterator("ProdukItemView1Iterator");
                                Row dupProdVariantRow =
                                    dciterProdukItem.getRowSetIterator().createRow();
                                dupProdVariantRow.setAttribute("ProdItem",
                                                               prodItem);
                                dupProdVariantRow.setAttribute("ItemDesc",
                                                               itemDesc);
                            }
                        }

                        // SUB CHILD: Duplicate customer
                        // SUB CHILD: Collect and Inserting Data Produk Customer by Region

                        DuplicatePromoCustomerHOImpl voDupPromoCustHo =
                            promoProposalAM.getDuplicatePromoCustomerHO1();
                        voDupPromoCustHo.setNamedWhereClauseParam("promoProdukId",
                                                                  promoProdId.trim());
                        voDupPromoCustHo.executeQuery();

                        if (voDupPromoCustHo.getEstimatedRowCount() > 0) {
                            while (voDupPromoCustHo.hasNext()) {
                                Row promHoRow = voDupPromoCustHo.next();
                                //                           String PromoCustomerId=(String)promHoRow.getAttribute("PromoCustomerId");
                                //                           String ProposalId=(String)promHoRow.getAttribute("ProposalId");
                                String RegionCode =
                                    (String)promHoRow.getAttribute("RegionCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("RegionCode");
                                String RegionDesc =
                                    (String)promHoRow.getAttribute("RegionDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("RegionDesc");
                                String AreaCode =
                                    (String)promHoRow.getAttribute("AreaCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("AreaCode");
                                String AreaDesc =
                                    (String)promHoRow.getAttribute("AreaDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("AreaDesc");
                                String LocCode =
                                    (String)promHoRow.getAttribute("LocCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("LocCode");
                                String LocDesc =
                                    (String)promHoRow.getAttribute("LocDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("LocDesc");
                                String CusttypCode =
                                    (String)promHoRow.getAttribute("CusttypCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CusttypCode");
                                String CusttypDesc =
                                    (String)promHoRow.getAttribute("CusttypDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CusttypDesc");
                                String CustgrpCode =
                                    (String)promHoRow.getAttribute("CustgrpCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustgrpCode");
                                String CustgrpDesc =
                                    (String)promHoRow.getAttribute("CustgrpDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustgrpDesc");
                                String CustomerId = "";
                                oracle.jbo.domain.Number customerIdtemp =
                                    (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId") ==
                                    null ? new oracle.jbo.domain.Number(0) :
                                    (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId");
                                if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                    CustomerId = customerIdtemp.toString();
                                } else {
                                    CustomerId = customerIdtemp.toString();
                                }
                                String CustomerName =
                                    (String)promHoRow.getAttribute("CustomerName") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustomerName");
                                String CustRegFlg =
                                    (String)promHoRow.getAttribute("CustRegFlg") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustRegFlg");
                                String CustNregFlg =
                                    (String)promHoRow.getAttribute("CustNregFlg") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustNregFlg");


                                DCIteratorBinding dciterPromoCustHo =
                                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");
                                Row dupPromoCustHoRow =
                                    dciterPromoCustHo.getRowSetIterator().createRow();

                                dupPromoCustHoRow.setAttribute("RegionCode",
                                                               RegionCode);
                                dupPromoCustHoRow.setAttribute("RegionDesc",
                                                               RegionDesc);
                                dupPromoCustHoRow.setAttribute("AreaCode",
                                                               AreaCode);
                                dupPromoCustHoRow.setAttribute("AreaDesc",
                                                               AreaDesc);
                                dupPromoCustHoRow.setAttribute("LocCode",
                                                               LocCode);
                                dupPromoCustHoRow.setAttribute("LocDesc",
                                                               LocDesc);
                                dupPromoCustHoRow.setAttribute("CusttypCode",
                                                               CusttypCode);
                                dupPromoCustHoRow.setAttribute("CusttypDesc",
                                                               CusttypDesc);
                                dupPromoCustHoRow.setAttribute("CustgrpCode",
                                                               CustgrpCode);
                                dupPromoCustHoRow.setAttribute("CustgrpDesc",
                                                               CustgrpDesc);
                                dupPromoCustHoRow.setAttribute("CustomerId",
                                                               CustomerId);
                                dupPromoCustHoRow.setAttribute("CustomerName",
                                                               CustomerName);
                                dupPromoCustHoRow.setAttribute("CustRegFlg",
                                                               CustRegFlg);
                                dupPromoCustHoRow.setAttribute("CustNregFlg",
                                                               CustNregFlg);
                            }
                        }
                        
                        // SUB CHILD: Duplicate exclude customer
                        if (srcUsrTypeCreator.equalsIgnoreCase(userHo)) {
                            // USER TYPE CREATOR == HO
                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Region
                            DuplicatePromoCustomerExHOImpl voDupPromoExclHo =
                                promoProposalAM.getDuplicatePromoCustomerExHO1();
                            voDupPromoExclHo.setNamedWhereClauseParam("promoProdukId",
                                                                      promoProdId.trim());
                            voDupPromoExclHo.executeQuery();

                            if (voDupPromoExclHo.getEstimatedRowCount() > 0) {
                                while (voDupPromoExclHo.hasNext()) {
                                    Row promHoRow = voDupPromoExclHo.next();
                                    String RegionCode =
                                        (String)promHoRow.getAttribute("RegionCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("RegionCode");
                                    String RegionDesc =
                                        (String)promHoRow.getAttribute("RegionDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("RegionDesc");
                                    String AreaCode =
                                        (String)promHoRow.getAttribute("AreaCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("AreaCode");
                                    String AreaDesc =
                                        (String)promHoRow.getAttribute("AreaDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("AreaDesc");
                                    String LocCode =
                                        (String)promHoRow.getAttribute("LocCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("LocCode");
                                    String LocDesc =
                                        (String)promHoRow.getAttribute("LocDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("LocDesc");
                                    String CusttypCode =
                                        (String)promHoRow.getAttribute("CusttypCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CusttypCode");
                                    String CusttypDesc =
                                        (String)promHoRow.getAttribute("CusttypDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CusttypDesc");
                                    String CustgrpCode =
                                        (String)promHoRow.getAttribute("CustgrpCode") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustgrpCode");
                                    String CustgrpDesc =
                                        (String)promHoRow.getAttribute("CustgrpDesc") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustgrpDesc");
                                    String CustomerId = "";
                                    oracle.jbo.domain.Number customerIdtemp =
                                        (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId") ==
                                        null ?
                                        new oracle.jbo.domain.Number(0) :
                                        (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId");
                                    if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                        CustomerId = customerIdtemp.toString();
                                    } else {
                                        CustomerId = customerIdtemp.toString();
                                    }
                                    String CustomerName =
                                        (String)promHoRow.getAttribute("CustomerName") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustomerName");
                                    String CustRegFlg =
                                        (String)promHoRow.getAttribute("CustxRegFlg") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustxRegFlg");
                                    String CustNregFlg =
                                        (String)promHoRow.getAttribute("CustxNregFlg") ==
                                        null ? "" :
                                        (String)promHoRow.getAttribute("CustxNregFlg");


                                    DCIteratorBinding dciterPromoExHo =
                                        ADFUtils.findIterator("PromoCustxHoView1Iterator");

                                    Row dupPromoExHoRow =
                                        dciterPromoExHo.getRowSetIterator().createRow();
                                    dupPromoExHoRow.setAttribute("RegionCode",
                                                                 RegionCode);
                                    dupPromoExHoRow.setAttribute("RegionDesc",
                                                                 RegionDesc);
                                    dupPromoExHoRow.setAttribute("AreaCode",
                                                                 AreaCode);
                                    dupPromoExHoRow.setAttribute("AreaDesc",
                                                                 AreaDesc);
                                    dupPromoExHoRow.setAttribute("LocCode",
                                                                 LocCode);
                                    dupPromoExHoRow.setAttribute("LocDesc",
                                                                 LocDesc);
                                    dupPromoExHoRow.setAttribute("CusttypCode",
                                                                 CusttypCode);
                                    dupPromoExHoRow.setAttribute("CusttypDesc",
                                                                 CusttypDesc);
                                    dupPromoExHoRow.setAttribute("CustgrpCode",
                                                                 CustgrpCode);
                                    dupPromoExHoRow.setAttribute("CustgrpDesc",
                                                                 CustgrpDesc);
                                    dupPromoExHoRow.setAttribute("CustomerId",
                                                                 CustomerId);
                                    dupPromoExHoRow.setAttribute("CustomerName",
                                                                 CustomerName);
                                    dupPromoExHoRow.setAttribute("CustxRegFlg",
                                                                 CustRegFlg);
                                    dupPromoExHoRow.setAttribute("CustxNregFlg",
                                                                 CustNregFlg);
                                }
                            }
                        } else if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                            // USER TYPE CREATOR == AREA

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Region
                            DuplicatePromoCustomerExAreaImpl voDupPromoExclArea =
                                promoProposalAM.getDuplicatePromoCustomerExArea1();
                            voDupPromoExclArea.setNamedWhereClauseParam("promoProdukId",
                                                                        promoProdId.trim());
                            voDupPromoExclArea.executeQuery();

                            if (voDupPromoExclArea.getEstimatedRowCount() >
                                0) {
                                while (voDupPromoExclArea.hasNext()) {
                                    Row promAreaRow =
                                        voDupPromoExclArea.next();
                                    String RegionCode =
                                        (String)promAreaRow.getAttribute("RegionCode") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("RegionCode");
                                    String RegionDesc =
                                        (String)promAreaRow.getAttribute("RegionDesc") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("RegionDesc");
                                    String AreaCode =
                                        (String)promAreaRow.getAttribute("AreaCode") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("AreaCode");
                                    String AreaDesc =
                                        (String)promAreaRow.getAttribute("AreaDesc") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("AreaDesc");
                                    String LocCode =
                                        (String)promAreaRow.getAttribute("LocCode") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("LocCode");
                                    String LocDesc =
                                        (String)promAreaRow.getAttribute("LocDesc") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("LocDesc");
                                    String CusttypCode =
                                        (String)promAreaRow.getAttribute("CusttypCode") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CusttypCode");
                                    String CusttypDesc =
                                        (String)promAreaRow.getAttribute("CusttypDesc") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CusttypDesc");
                                    String CustgrpCode =
                                        (String)promAreaRow.getAttribute("CustgrpCode") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CustgrpCode");
                                    String CustgrpDesc =
                                        (String)promAreaRow.getAttribute("CustgrpDesc") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CustgrpDesc");
                                    String CustomerId = "";
                                    oracle.jbo.domain.Number customerIdtemp =
                                        (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId") ==
                                        null ?
                                        new oracle.jbo.domain.Number(0) :
                                        (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId");
                                    if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                        CustomerId = customerIdtemp.toString();
                                    } else {
                                        CustomerId = customerIdtemp.toString();
                                    }
                                    String CustomerName =
                                        (String)promAreaRow.getAttribute("CustomerName") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CustomerName");
                                    String CustRegFlg =
                                        (String)promAreaRow.getAttribute("CustxRegFlg") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CustxRegFlg");
                                    String CustNregFlg =
                                        (String)promAreaRow.getAttribute("CustxNregFlg") ==
                                        null ? "" :
                                        (String)promAreaRow.getAttribute("CustxNregFlg");


                                    DCIteratorBinding dciterPromoExArea =
                                        ADFUtils.findIterator("PromoCustxAreaView1Iterator");

                                    Row dupPromoExAreaRow =
                                        dciterPromoExArea.getRowSetIterator().createRow();
                                    dupPromoExAreaRow.setAttribute("RegionCode",
                                                                   RegionCode);
                                    dupPromoExAreaRow.setAttribute("RegionDesc",
                                                                   RegionDesc);
                                    dupPromoExAreaRow.setAttribute("AreaCode",
                                                                   AreaCode);
                                    dupPromoExAreaRow.setAttribute("AreaDesc",
                                                                   AreaDesc);
                                    dupPromoExAreaRow.setAttribute("LocCode",
                                                                   LocCode);
                                    dupPromoExAreaRow.setAttribute("LocDesc",
                                                                   LocDesc);
                                    dupPromoExAreaRow.setAttribute("CusttypCode",
                                                                   CusttypCode);
                                    dupPromoExAreaRow.setAttribute("CusttypDesc",
                                                                   CusttypDesc);
                                    dupPromoExAreaRow.setAttribute("CustgrpCode",
                                                                   CustgrpCode);
                                    dupPromoExAreaRow.setAttribute("CustgrpDesc",
                                                                   CustgrpDesc);
                                    dupPromoExAreaRow.setAttribute("CustomerId",
                                                                   CustomerId);
                                    dupPromoExAreaRow.setAttribute("CustomerName",
                                                                   CustomerName);
                                    dupPromoExAreaRow.setAttribute("CustxRegFlg",
                                                                   CustRegFlg);
                                    dupPromoExAreaRow.setAttribute("CustxNregFlg",
                                                                   CustNregFlg);
                                }
                            }
                        } else {
                            // USER TYPE CREATOR == INVALID
                        }

                        // SUB CHILD: Collect and Inserting Data Produk Target
                        DuplicateTargetViewImpl voDupTarget =
                            (DuplicateTargetViewImpl)promoProposalAM.getDuplicateTargetView1();
                        voDupTarget.setNamedWhereClauseParam("promoProdukId",
                                                             promoProdId.trim());
                        voDupTarget.executeQuery();

                        if (voDupTarget.getEstimatedRowCount() > 0) {
                            while (voDupTarget.hasNext()) {
                                Row targetRow = voDupTarget.next();
                                Number avgQty =
                                    (Number)targetRow.getAttribute("AvgQty");
                                Number price =
                                    (Number)targetRow.getAttribute("Price");
                                String priceBased =
                                    (String)targetRow.getAttribute("PriceBased");
                                String priceList =
                                    (String)targetRow.getAttribute("PriceList");
                                Number qty =
                                    (Number)targetRow.getAttribute("Qty");
                                String uom =
                                    (String)targetRow.getAttribute("Uom");
                                Number value =
                                    (Number)targetRow.getAttribute("Value");

                                DCIteratorBinding dciterTarget =
                                    ADFUtils.findIterator("TargetView1Iterator");
                                Row dupTargetRow =
                                    dciterTarget.getRowSetIterator().createRow();
                                dupTargetRow.setAttribute("AvgQty", avgQty);
                                dupTargetRow.setAttribute("Price", price);
                                dupTargetRow.setAttribute("PriceBased",
                                                          priceBased);
                                dupTargetRow.setAttribute("PriceList",
                                                          priceList);
                                dupTargetRow.setAttribute("Qty", qty);
                                dupTargetRow.setAttribute("Uom", uom);
                                dupTargetRow.setAttribute("Value", value);
                            }
                        }

                        if (discountType1.equalsIgnoreCase(discTypePotongan)) {
                            // SUB CHILD: Collect and Inserting Data Produk Potongan / Discount
                            DuplicateDiscountViewImpl voDupDiscount =
                                (DuplicateDiscountViewImpl)promoProposalAM.getDuplicateDiscountView1();
                            voDupDiscount.setNamedWhereClauseParam("promoProdukId",
                                                                   promoProdId.trim());
                            voDupDiscount.executeQuery();

                            if (voDupTarget.getEstimatedRowCount() > 0) {
                                while (voDupDiscount.hasNext()) {
                                    Row discountRow = voDupDiscount.next();
                                    String tipePerhitungan =
                                        (String)discountRow.getAttribute("TipePerhitungan");
                                    String uom =
                                        (String)discountRow.getAttribute("Uom");
                                    Number qtyFrom =
                                        (Number)discountRow.getAttribute("QtyFrom");
                                    Number qtyTo =
                                        (Number)discountRow.getAttribute("QtyTo");
                                    String tipePotongan =
                                        (String)discountRow.getAttribute("TipePotongan");
                                    Number discNonYearly =
                                        (Number)discountRow.getAttribute("DiscNonYearly");
                                    Number discYearly =
                                        (Number)discountRow.getAttribute("DiscYearly");
                                    Number kelipatan =
                                        (Number)discountRow.getAttribute("Kelipatan");

                                    DCIteratorBinding dciterDiscount =
                                        ADFUtils.findIterator("DiscountView1Iterator");
                                    Row dupDiscountRow =
                                        dciterDiscount.getRowSetIterator().createRow();
                                    dupDiscountRow.setAttribute("TipePerhitungan",
                                                                tipePerhitungan);
                                    dupDiscountRow.setAttribute("Uom", uom);
                                    dupDiscountRow.setAttribute("QtyFrom",
                                                                qtyFrom);
                                    dupDiscountRow.setAttribute("QtyTo",
                                                                qtyTo);
                                    dupDiscountRow.setAttribute("TipePotongan",
                                                                tipePotongan);
                                    dupDiscountRow.setAttribute("DiscNonYearly",
                                                                discNonYearly);
                                    dupDiscountRow.setAttribute("DiscYearly",
                                                                discYearly);
                                    dupDiscountRow.setAttribute("Kelipatan",
                                                                kelipatan);
                                }
                            }
                        } else if (discountType1.equalsIgnoreCase(discTypeBiaya)) {
                            // SUB CHILD: Collect and Inserting Data Produk Biaya
                            DuplicateBiayaViewImpl voDupBiaya =
                                promoProposalAM.getDuplicateBiayaView1();
                            voDupBiaya.setNamedWhereClauseParam("promoProdukId",
                                                                promoProdId.trim());
                            voDupBiaya.executeQuery();

                            if (voDupBiaya.getEstimatedRowCount() > 0) {
                                while (voDupBiaya.hasNext()) {
                                    Row biayaRow = voDupBiaya.next();
                                    String descr =
                                        (String)biayaRow.getAttribute("Descr");
                                    Number biayaNonYearly =
                                        (Number)biayaRow.getAttribute("BiayaNonYearly");
                                    Number biayaYearly =
                                        (Number)biayaRow.getAttribute("BiayaYearly");
                                    Number qty =
                                        (Number)biayaRow.getAttribute("BiayaQty");
                                    String uom =
                                        (String)biayaRow.getAttribute("BiayaUom");
                                    Number price =
                                        (Number)biayaRow.getAttribute("BiayaPrice");
                                    Number totAmt =
                                        (Number)biayaRow.getAttribute("BiayaTotAmt");

                                    DCIteratorBinding dciterBiaya =
                                        ADFUtils.findIterator("BiayaView1Iterator");
                                    Row dupBiayaRow =
                                        dciterBiaya.getRowSetIterator().createRow();
                                    dupBiayaRow.setAttribute("Descr", descr);
                                    dupBiayaRow.setAttribute("BiayaNonYearly",
                                                             biayaNonYearly);
                                    dupBiayaRow.setAttribute("BiayaYearly",
                                                             biayaYearly);
                                    dupBiayaRow.setAttribute("BiayaQty", null);
                                    dupBiayaRow.setAttribute("BiayaUom", null);
                                    dupBiayaRow.setAttribute("BiayaPrice",
                                                             null);
                                    dupBiayaRow.setAttribute("BiayaTotAmt",
                                                             totAmt);
                                }
                            }
                        } else if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
                            // SUB CHILD: Collect and Inserting Data Produk Promo Bonus
                            DuplicatePromoBonusViewImpl voDupBonus =
                                promoProposalAM.getDuplicatePromoBonusView1();
                            voDupBonus.setNamedWhereClauseParam("promoProdukId",
                                                                promoProdId.trim());
                            voDupBonus.executeQuery();

                            if (voDupBonus.getEstimatedRowCount() > 0) {
                                while (voDupBonus.hasNext()) {
                                    Row addBonus = voDupBonus.next();
                                    String productCategory =
                                        (String)addBonus.getAttribute("ProductCategory");
                                    String productCategoryDesc =
                                        (String)addBonus.getAttribute("ProductCategoryDesc");
                                    String productClass =
                                        (String)addBonus.getAttribute("ProductClass");
                                    String productClassDesc =
                                        (String)addBonus.getAttribute("ProductClassDesc");
                                    String productBrand =
                                        (String)addBonus.getAttribute("ProductBrand");
                                    String productBrandDesc =
                                        (String)addBonus.getAttribute("ProductBrandDesc");
                                    String productExt =
                                        (String)addBonus.getAttribute("ProductExt");
                                    String productExtDesc =
                                        (String)addBonus.getAttribute("ProductExtDesc");
                                    String productPack =
                                        (String)addBonus.getAttribute("ProductPack");
                                    String productPackDesc =
                                        (String)addBonus.getAttribute("ProductPackDesc");
                                    String uom =
                                        (String)addBonus.getAttribute("Uom");
                                    Number qtyFrom =
                                        (Number)addBonus.getAttribute("QtyFrom");
                                    String tipePotongan =
                                        (String)addBonus.getAttribute("TipePotongan");
                                    Number valuePotongan =
                                        (Number)addBonus.getAttribute("ValuePotongan");
                                    Number discYearly =
                                        (Number)addBonus.getAttribute("DiscYearly");
                                    Number discNonYearly =
                                        (Number)addBonus.getAttribute("DiscNonYearly");
                                    String prodVarBonus =
                                        (String)addBonus.getAttribute("ProductVariantBonus") ==
                                        null ? "" :
                                        (String)addBonus.getAttribute("ProductVariantBonus");
                                    String prodItemBonus =
                                        (String)addBonus.getAttribute("ProductItemBonus") ==
                                        null ? "" :
                                        (String)addBonus.getAttribute("ProductItemBonus");
                                    String inputPriceBy =
                                        (String)addBonus.getAttribute("InputPriceBy");
                                    Number priceVal =
                                        (Number)addBonus.getAttribute("PriceVal");
                                    Number qtyMulPrice =
                                        (Number)addBonus.getAttribute("QtyMulPrice");

                                    DCIteratorBinding dciterBonus =
                                        ADFUtils.findIterator("PromoBonusView1Iterator");
                                    Row dupBonusRow =
                                        dciterBonus.getRowSetIterator().createRow();

                                    dupBonusRow.setAttribute("ProductCategory",
                                                             productCategory);
                                    dupBonusRow.setAttribute("ProductCategoryDesc",
                                                             productCategoryDesc);
                                    dupBonusRow.setAttribute("ProductClass",
                                                             productClass);
                                    dupBonusRow.setAttribute("ProductClassDesc",
                                                             productClassDesc);
                                    dupBonusRow.setAttribute("ProductBrand",
                                                             productBrand);
                                    dupBonusRow.setAttribute("ProductBrandDesc",
                                                             productBrandDesc);
                                    dupBonusRow.setAttribute("ProductExt",
                                                             productExt);
                                    dupBonusRow.setAttribute("ProductExtDesc",
                                                             productExtDesc);
                                    dupBonusRow.setAttribute("ProductPack",
                                                             productPack);
                                    dupBonusRow.setAttribute("ProductPackDesc",
                                                             productPackDesc);
                                    dupBonusRow.setAttribute("Uom", uom);
                                    dupBonusRow.setAttribute("QtyFrom",
                                                             qtyFrom);
                                    dupBonusRow.setAttribute("TipePotongan",
                                                             tipePotongan);
                                    dupBonusRow.setAttribute("ValuePotongan",
                                                             valuePotongan);
                                    dupBonusRow.setAttribute("DiscYearly",
                                                             discYearly);
                                    dupBonusRow.setAttribute("DiscNonYearly",
                                                             discNonYearly);
                                    dupBonusRow.setAttribute("InputPriceBy",
                                                             inputPriceBy);
                                    dupBonusRow.setAttribute("PriceVal",
                                                             priceVal);
                                    dupBonusRow.setAttribute("QtyMulPrice",
                                                             qtyMulPrice);

                                    DBSequence promoBonusId =
                                        (DBSequence)dupBonusRow.getAttribute("PromoBonusId");

                                    promoBonusVariantList.add(promoBonusId.getValue() +
                                                              ";" +
                                                              prodVarBonus);
                                    promoBonusItemList.add(promoBonusId.getValue() +
                                                           ";" +
                                                           prodItemBonus);
                                }
                            }
                        } else {
                            // OTHER SUB CHILD TYPE
                        }
                    }
                }

                OperationBinding operationBindingCommit =
                    bindings.getOperationBinding("Commit");
                operationBindingCommit.execute();

                if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
                    // SUB-SUB CHILD: Inserting Data Produk Promo Bonus Variant
                    if (promoBonusVariantList.size() > 0) {
                        for (String promoBonusVariant :
                             promoBonusVariantList) {
                            String[] bonusVarArr =
                                promoBonusVariant.split(";");

                            String promoBonusId = "";
                            try {
                                promoBonusId = bonusVarArr[0].trim();
                            } catch (Exception e) {
                                promoBonusId = "";
                            }

                            String bonusVariantList = "";
                            try {
                                bonusVariantList = bonusVarArr[1].trim();
                            } catch (Exception e) {
                                bonusVariantList = "";
                            }

                            if (!promoBonusId.equalsIgnoreCase("") &&
                                !bonusVariantList.equalsIgnoreCase("")) {
                                String[] bonVarArr =
                                    bonusVariantList.split("\\|", -1);
                                for (int v = 0; v < bonVarArr.length; v++) {
                                    String bonusVariant = bonVarArr[v].trim();
                                    if (promoBonusId != null &&
                                        bonusVariant != null) {
                                        PreparedStatement addProdBonusVariantStmt =
                                            null;
                                        try {
                                            String SQL =
                                                "INSERT INTO PROMO_BONUS_VARIANT (PROMO_BONUS_ID, PROD_VARIANT) " +
                                                "VALUES (" + promoBonusId +
                                                ", '" + bonusVariant + "')";
                                            addProdBonusVariantStmt =
                                                    promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                               1);
                                            addProdBonusVariantStmt.executeUpdate();
                                        } catch (SQLException e) {
                                            throw new JboException(e.getMessage());
                                        } finally {
                                            promoProposalAM.getDBTransaction().commit();
                                            if (addProdBonusVariantStmt !=
                                                null) {
                                                try {
                                                    addProdBonusVariantStmt.close();
                                                } catch (Exception e) {
                                                    throw new JboException(e.getMessage());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // SUB-SUB CHILD: Inserting Data Produk Promo Bonus Item
                    if (promoBonusItemList.size() > 0) {
                        for (String promoBonusItem : promoBonusItemList) {
                            String[] bonusItemArr = promoBonusItem.split(";");

                            String promoBonusId = "";
                            try {
                                promoBonusId = bonusItemArr[0].trim();
                            } catch (Exception e) {
                                promoBonusId = "";
                            }

                            String bonusItemList = "";
                            try {
                                bonusItemList = bonusItemArr[1].trim();
                            } catch (Exception e) {
                                bonusItemList = "";
                            }

                            if (!promoBonusId.equalsIgnoreCase("") &&
                                !bonusItemList.equalsIgnoreCase("")) {
                                String[] bonItemArr =
                                    bonusItemList.split("\\|", -1);
                                for (int b = 0; b < bonItemArr.length; b++) {
                                    String prodItemCode = bonItemArr[b].trim();
                                    if (promoBonusId != null &&
                                        prodItemCode != null) {
                                        PreparedStatement addProdBonusItemStmt =
                                            null;
                                        try {
                                            String SQL =
                                                "INSERT INTO PROMO_BONUS_PROD_ITEM (PROMO_BONUS_ID, PROD_ITEM) " +
                                                "VALUES (" + promoBonusId +
                                                ", '" + prodItemCode + "')";
                                            addProdBonusItemStmt =
                                                    promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                               1);
                                            addProdBonusItemStmt.executeUpdate();
                                        } catch (SQLException e) {
                                            throw new JboException(e.getMessage());
                                        } finally {
                                            promoProposalAM.getDBTransaction().commit();
                                            if (addProdBonusItemStmt != null) {
                                                try {
                                                    addProdBonusItemStmt.close();
                                                } catch (Exception e) {
                                                    throw new JboException(e.getMessage());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                OperationBinding operationBinding =
                    bindings.getOperationBinding("ExecutePromoProduct");
                operationBinding.execute();

                //Set to draft mode
                DCIteratorBinding parentIter =
                    (DCIteratorBinding)bindings.get("ProposalView1Iterator");
                ProposalViewImpl propVo =
                    (ProposalViewImpl)parentIter.getViewObject();
                //View Criteria without bind variable
                ViewCriteria vc = propVo.getViewCriteria("ProposalDraftVC");
                propVo.applyViewCriteria(vc);
                propVo.executeQuery();

                //Set filter mode
                ADFContext adfCtx = ADFContext.getCurrent();
                Map sessionScope = adfCtx.getSessionScope();
                sessionScope.put("filterMode", "DRAFT");

                switchMain.setFacetName("dataavailable");
                switchButtonMain.setFacetName("dataavailable");
                AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
                AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
                AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
                AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);
                
                Key proposalKey = propCurrentRow.getKey();
                dciterProposal.setCurrentRowWithKey(proposalKey.toStringFormat(true));
            } else {
                // DO NOTHING
            }
        }
    }

    public void setCopyAsFlag(RichSelectOneChoice copyAsFlag) {
        this.copyAsFlag = copyAsFlag;
    }

    public RichSelectOneChoice getCopyAsFlag() {
        return copyAsFlag;
    }

    public void setPromoAddBuyIdvar(String promoAddBuyIdvar) {
        this.promoAddBuyIdvar = promoAddBuyIdvar;
    }

    public String getPromoAddBuyIdvar() {
        return promoAddBuyIdvar;
    }

    public void setPromoBonusIdvar(String promoBonusIdvar) {
        this.promoBonusIdvar = promoBonusIdvar;
    }

    public String getPromoBonusIdvar() {
        return promoBonusIdvar;
    }

    public void setSocMekPenagihan(RichSelectOneChoice socMekPenagihan) {
        this.socMekPenagihan = socMekPenagihan;
    }

    public RichSelectOneChoice getSocMekPenagihan() {
        return socMekPenagihan;
    }

    public void setTblListProposal(RichTable tblListProposal) {
        this.tblListProposal = tblListProposal;
    }

    public RichTable getTblListProposal() {
        return tblListProposal;
    }

    public void btnOkDetailProduct(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();

        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

        AttributeBinding discTypeAttr =
            (AttributeBinding)bindings.getControlBinding("DiscountType1");
        String discType = (String)discTypeAttr.getInputValue();

        AttributeBinding ppidRefAttr =
            (AttributeBinding)bindings.getControlBinding("PpidRef");
        Number ppidRef =
            (Number)ppidRefAttr.getInputValue() == null ? zeroNum :
            (Number)ppidRefAttr.getInputValue();

        Boolean isIterValid = true;
        String sIterMsg = "";
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String userType = userData.getUserType();
        if (discType.equalsIgnoreCase(discTypeBiaya)) {
            DCIteratorBinding dciterBiaya =
                ADFUtils.findIterator("BiayaView1Iterator");
            if (dciterBiaya.getEstimatedRowCount() < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "Tab Biaya masih kosong, harus diisi.";
                isIterValid = false;
            }
        } else if (discType.equalsIgnoreCase(discTypePromoBarang)) {
            DCIteratorBinding dciterPromoBonus =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            if (dciterPromoBonus.getEstimatedRowCount() < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "Tab Barang Bonus masih kosong, harus diisi.";
                isIterValid = false;
            }
        } else if (discType.equalsIgnoreCase(discTypePotongan)) {
            DCIteratorBinding dciterDiscount =
                ADFUtils.findIterator("DiscountView1Iterator");
            if (dciterDiscount.getEstimatedRowCount() < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "Tab Potongan masih kosong, harus diisi.";
                isIterValid = false;
            }
        }

        if (userType.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterCustHo =
                ADFUtils.findIterator("PromoCustomerHoView1Iterator");

            Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

            if (!(cekCustHo > 0)) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "Tab Customer masih kosong, harus diisi.";
                isIterValid = false;
            }
        }

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        for (Row r : dciterTarget.getAllRowsInRange()) {
            BigDecimal price =
                new BigDecimal(r.getAttribute("Price") == null ? "0" :
                               (df.format(((Number)r.getAttribute("Price")).getValue())).toString());
            BigDecimal Qty =
                new BigDecimal(r.getAttribute("Qty") == null ? "0" :
                               r.getAttribute("Qty").toString());
            //            System.out.println("price = " + price);
            if (price.compareTo(BigDecimal.ZERO) <= 0 ||
                Qty.compareTo(BigDecimal.ZERO) <= 0) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg +=
                        "\"Qty. Target\" atau \"Harga\" masih kosong, harus diisi.";
                isIterValid = false;
            }
        }

        if (isIterValid) {
            Boolean isInputValid = true;
            String sErrMsg = "";
            if (discType.equalsIgnoreCase(discTypeBiaya)) {
                AttributeBinding biaMfAttr =
                    (AttributeBinding)bindings.getControlBinding("BiaMf");
                String totalMfStr =
                    biaMfAttr.getInputValue() == null ? "0" : biaMfAttr.getInputValue() ==
                                                              "" ? "0" :
                                                              biaMfAttr.getInputValue().toString().replaceAll(",",
                                                                                                              "");
                Number totalMf;
                try {
                    totalMf = new Number(totalMfStr);
                } catch (SQLException e) {
                    totalMf = zeroNum;
                }

                AttributeBinding biaOntopAttr =
                    (AttributeBinding)bindings.getControlBinding("BiaOntop");
                String totalOnTopStr =
                    biaOntopAttr.getInputValue() == null ? "0" :
                    biaOntopAttr.getInputValue() == "" ? "0" :
                    biaOntopAttr.getInputValue().toString().replaceAll(",",
                                                                       "");
                Number totalOnTop;
                try {
                    totalOnTop = new Number(totalOnTopStr);
                } catch (SQLException e) {
                    totalOnTop = zeroNum;
                }

                DCIteratorBinding dciterBiaya =
                    ADFUtils.findIterator("BiayaView1Iterator");
                for (Row r : dciterBiaya.getAllRowsInRange()) {
                    BigDecimal ontop = BigDecimal.ZERO;
                    BigDecimal mf = BigDecimal.ZERO;
                    BigDecimal totAmt = BigDecimal.ZERO;
                    BigDecimal totalmfOntop = BigDecimal.ZERO;
                    String BNY =
                        r.getAttribute("BiayaNonYearly") == null ? "0" :
                        r.getAttribute("BiayaNonYearly") == "" ? "0" :
                        r.getAttribute("BiayaNonYearly").toString();
                    String BN =
                        r.getAttribute("BiayaYearly") == null ? "0" : r.getAttribute("BiayaYearly") ==
                                                                      "" ?
                                                                      "0" :
                                                                      r.getAttribute("BiayaYearly").toString();
                    String value =
                        r.getAttribute("BiayaTotAmt") == null ? "0" :
                        r.getAttribute("BiayaTotAmt") == "" ? "0" :
                        r.getAttribute("BiayaTotAmt").toString();

                    ontop = new BigDecimal(BNY);
                    mf = new BigDecimal(BN);
                    totAmt = new BigDecimal(value);
                    totalmfOntop = ontop.add(mf);

                    if (BNY.length() == 0 && BN.length() == 0 ||
                        totAmt.compareTo(totalmfOntop) != 0) {
                        if (!isInputValid) {
                            sErrMsg += "<nr> ";
                        }
                        sErrMsg +=
                                "Tab Biaya : Nilai pada kolom \"Tdk Potong Budget / On Top\" atau \"Potong Budget / MF\" harus diisi sama dengan total nilai \"Value\".";
                        isInputValid = false;
                    } else {
                        // DO NOTHING, DATA IS VALID
                    }
                }

                // Validasi GR On Top dan MF terhadap realisasi per line
                Number realisasiGrMfLine = zeroNum;
                Number realisasiGrOnTopLine = zeroNum;

                ValidateRealisasiGrImpl valRealGrVo =
                    promoProposalAM.getValidateRealisasiGr1();
                valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                valRealGrVo.executeQuery();

                if (valRealGrVo.getEstimatedRowCount() > 0) {
                    ValidateRealisasiGrRowImpl valRealGrRow =
                        (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                    realisasiGrMfLine = valRealGrRow.getRealisasiGrMfByLine();
                    realisasiGrOnTopLine =
                            valRealGrRow.getRealisasiGrOnTopByLine();
                } else {
                    //Just keep realization number zero
                }

                /*
                System.out.println("==================================");
                System.out.println("Biaya - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                System.out.println("Biaya - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                System.out.println("==================================");
                */

                if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                    totalOnTop.compareTo(realisasiGrOnTopLine) >= 0) {
                    double realValMf = realisasiGrMfLine.getValue();
                    String realValMfFmt = numFmt.format(realValMf);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount MF tidak boleh kurang dari realisasi (MF: " +
                            realValMfFmt + ").";
                    isInputValid = false;
                } else if (totalMf.compareTo(realisasiGrMfLine) >= 0 &&
                           totalOnTop.compareTo(realisasiGrOnTopLine) < 0) {
                    double realValOt = realisasiGrOnTopLine.getValue();
                    String realValOtFmt = numFmt.format(realValOt);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount On Top tidak boleh kurang dari realisasi (On Top: " +
                            realValOtFmt + ").";
                    isInputValid = false;
                } else if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                           totalOnTop.compareTo(realisasiGrOnTopLine) < 0) {
                    double realValMf = realisasiGrMfLine.getValue();
                    String realValMfFmt = numFmt.format(realValMf);
                    double realValOt = realisasiGrOnTopLine.getValue();
                    String realValOtFmt = numFmt.format(realValOt);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount On Top dan MF tidak boleh kurang dari realisasi (On Top: " +
                            realValOtFmt + " , MF: " + realValMfFmt + ").";
                    isInputValid = false;
                } else {
                    // DO NOTHING, DATA VALID
                }

                if (isInputValid) {
                    eventOk();
                } else {
                    showPopup(sErrMsg, potmessage);
                    tabProdBiaya.setDisclosed(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tabProdBiaya);
                }
            } else if (discType.equalsIgnoreCase(discTypePromoBarang)) {
                AttributeBinding brgBonusMfAttr =
                    (AttributeBinding)bindings.getControlBinding("BrgBonusMf");
                String totalMfStr =
                    brgBonusMfAttr.getInputValue() == null ? "0" :
                    brgBonusMfAttr.getInputValue() == "" ? "0" :
                    brgBonusMfAttr.getInputValue().toString().replaceAll(",",
                                                                         "");
                Number totalMf;
                try {
                    totalMf = new Number(totalMfStr);
                } catch (SQLException e) {
                    totalMf = zeroNum;
                }

                AttributeBinding brgBonusOnTopAttr =
                    (AttributeBinding)bindings.getControlBinding("BrgBonusOnTop");
                String totalOnTopStr =
                    brgBonusOnTopAttr.getInputValue() == null ? "0" :
                    brgBonusOnTopAttr.getInputValue() == "" ? "0" :
                    brgBonusOnTopAttr.getInputValue().toString().replaceAll(",",
                                                                            "");
                Number totalOnTop;
                try {
                    totalOnTop = new Number(totalOnTopStr);
                } catch (SQLException e) {
                    totalOnTop = zeroNum;
                }

                DCIteratorBinding dciterPromoBonus =
                    ADFUtils.findIterator("PromoBonusView1Iterator");
                for (Row r : dciterPromoBonus.getAllRowsInRange()) {
                    BigDecimal ontop = BigDecimal.ZERO;
                    BigDecimal mf = BigDecimal.ZERO;
                    BigDecimal QtyMulPrice = BigDecimal.ZERO;
                    BigDecimal totalmfOntop = BigDecimal.ZERO;
                    String BNY =
                        r.getAttribute("DiscNonYearly") == null ? "0" :
                        r.getAttribute("DiscNonYearly") == "" ? "0" :
                        r.getAttribute("DiscNonYearly").toString();
                    String BN =
                        r.getAttribute("DiscYearly") == null ? "0" : r.getAttribute("DiscYearly") ==
                                                                     "" ? "0" :
                                                                     r.getAttribute("DiscYearly").toString();
                    String value =
                        r.getAttribute("QtyMulPrice") == null ? "0" :
                        r.getAttribute("QtyMulPrice") == "" ? "0" :
                        r.getAttribute("QtyMulPrice").toString();

                    ontop = new BigDecimal(BNY);
                    mf = new BigDecimal(BN);
                    QtyMulPrice = new BigDecimal(value);
                    totalmfOntop = ontop.add(mf);

                    if (BNY.length() == 0 && BN.length() == 0 ||
                        QtyMulPrice.compareTo(totalmfOntop) != 0) {
                        if (!isInputValid) {
                            sErrMsg += "<nr> ";
                        }
                        sErrMsg +=
                                "Tab Barang Bonus : Nilai pada kolom \"Tdk Potong Budget / On Top\" atau \"Potong Budget / MF\" harus diisi sama dengan total nilai \"Value\".";
                        isInputValid = false;
                    } else {
                        // DO NOTHING, DATA IS VALID
                    }
                }

                // Validasi GR On Top dan MF terhadap realisasi per line
                Number realisasiGrMfLine = zeroNum;
                Number realisasiGrOnTopLine = zeroNum;

                ValidateRealisasiGrImpl valRealGrVo =
                    promoProposalAM.getValidateRealisasiGr1();
                valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                valRealGrVo.executeQuery();

                if (valRealGrVo.getEstimatedRowCount() > 0) {
                    ValidateRealisasiGrRowImpl valRealGrRow =
                        (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                    realisasiGrMfLine = valRealGrRow.getRealisasiGrMfByLine();
                    realisasiGrOnTopLine =
                            valRealGrRow.getRealisasiGrOnTopByLine();
                } else {
                    //Just keep realization number zero
                }

                /*
                System.out.println("==================================");
                System.out.println("PromoBarang - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                System.out.println("PromoBarang - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                System.out.println("==================================");
                */

                if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                    totalOnTop.compareTo(realisasiGrOnTopLine) >= 0) {
                    double realValMf = realisasiGrMfLine.getValue();
                    String realValMfFmt = numFmt.format(realValMf);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount MF tidak boleh kurang dari realisasi (MF: " +
                            realValMfFmt + ").";
                    isInputValid = false;
                } else if (totalMf.compareTo(realisasiGrMfLine) >= 0 &&
                           totalOnTop.compareTo(realisasiGrOnTopLine) < 0) {
                    double realValOt = realisasiGrOnTopLine.getValue();
                    String realValOtFmt = numFmt.format(realValOt);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount On Top tidak boleh kurang dari realisasi (On Top: " +
                            realValOtFmt + ").";
                    isInputValid = false;
                } else if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                           totalOnTop.compareTo(realisasiGrOnTopLine) < 0) {
                    double realValMf = realisasiGrMfLine.getValue();
                    String realValMfFmt = numFmt.format(realValMf);
                    double realValOt = realisasiGrOnTopLine.getValue();
                    String realValOtFmt = numFmt.format(realValOt);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount On Top dan MF tidak boleh kurang dari realisasi (On Top: " +
                            realValOtFmt + " , MF: " + realValMfFmt + ").";
                    isInputValid = false;
                } else {
                    // DO NOTHING, DATA VALID
                }

                if (isInputValid) {
                    eventOk();
                } else {
                    showPopup(sErrMsg, potmessage);
                    tabProdPromoBarang.setDisclosed(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tabProdPromoBarang);
                }
            } else if (discType.equalsIgnoreCase(discTypePotongan)) {
                AttributeBinding discMfAttr =
                    (AttributeBinding)bindings.getControlBinding("DiscMf");
                String totalMfStr =
                    discMfAttr.getInputValue() == null ? "0" : discMfAttr.getInputValue() ==
                                                               "" ? "0" :
                                                               discMfAttr.getInputValue().toString().replaceAll(",",
                                                                                                                "");
                Number totalMf;
                try {
                    totalMf = new Number(totalMfStr);
                } catch (SQLException e) {
                    totalMf = zeroNum;
                }

                AttributeBinding discOnTopAttr =
                    (AttributeBinding)bindings.getControlBinding("DiscOnTop");
                String totalOnTopStr =
                    discOnTopAttr.getInputValue() == null ? "0" :
                    discOnTopAttr.getInputValue() == "" ? "0" :
                    discOnTopAttr.getInputValue().toString().replaceAll(",",
                                                                        "");
                Number totalOnTop;
                try {
                    totalOnTop = new Number(totalOnTopStr);
                } catch (SQLException e) {
                    totalOnTop = zeroNum;
                }

                DCIteratorBinding dciterDiscount1 =
                    ADFUtils.findIterator("DiscountView1Iterator");
                for (Row r : dciterDiscount1.getAllRowsInRange()) {
                    BigDecimal ontop = BigDecimal.ZERO;
                    BigDecimal mf = BigDecimal.ZERO;
                    BigDecimal totalmfOntop = BigDecimal.ZERO;

                    String BNY =
                        r.getAttribute("DiscNonYearly") == null ? "0" :
                        r.getAttribute("DiscNonYearly") == "" ? "0" :
                        r.getAttribute("DiscNonYearly").toString();
                    String BN =
                        r.getAttribute("DiscYearly") == null ? "0" : r.getAttribute("DiscYearly") ==
                                                                     "" ? "0" :
                                                                     r.getAttribute("DiscYearly").toString();

                    ontop = new BigDecimal(BNY);
                    mf = new BigDecimal(BN);
                    totalmfOntop = ontop.add(mf);

                    if (BNY.length() == 0 && BN.length() == 0) {
                        if (!isInputValid) {
                            sErrMsg += "<nr> ";
                        }
                        sErrMsg +=
                                "Tab Potongan : Kolom \"Tdk Potong Budget / On Top\" atau Discount \"Potong Budget / MF\" harus diisi.";
                        isInputValid = false;
                    } else {
                        // DO NOTHING, DATA IS VALID
                    }
                }

                // Validasi GR On Top dan MF terhadap realisasi per line
                Number realisasiGrMfLine = zeroNum;
                Number realisasiGrOnTopLine = zeroNum;

                ValidateRealisasiGrImpl valRealGrVo =
                    promoProposalAM.getValidateRealisasiGr1();
                valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                valRealGrVo.executeQuery();

                if (valRealGrVo.getEstimatedRowCount() > 0) {
                    ValidateRealisasiGrRowImpl valRealGrRow =
                        (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                    realisasiGrMfLine = valRealGrRow.getRealisasiGrMfByLine();
                    realisasiGrOnTopLine =
                            valRealGrRow.getRealisasiGrOnTopByLine();
                } else {
                    //Just keep realization number zero
                }

                /*
                System.out.println("==================================");
                System.out.println("Potongan - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                System.out.println("Potongan - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                System.out.println("==================================");
                */

                if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                    totalOnTop.compareTo(realisasiGrOnTopLine) >= 0) {
                    double realValMf = realisasiGrMfLine.getValue();
                    String realValMfFmt = numFmt.format(realValMf);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount MF tidak boleh kurang dari realisasi (MF: " +
                            realValMfFmt + ").";
                    isInputValid = false;
                } else if (totalMf.compareTo(realisasiGrMfLine) >= 0 &&
                           totalOnTop.compareTo(realisasiGrOnTopLine) < 0) {
                    double realValOt = realisasiGrOnTopLine.getValue();
                    String realValOtFmt = numFmt.format(realValOt);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount On Top tidak boleh kurang dari realisasi (On Top: " +
                            realValOtFmt + ").";
                    isInputValid = false;
                } else if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                           totalOnTop.compareTo(realisasiGrOnTopLine) < 0) {
                    double realValMf = realisasiGrMfLine.getValue();
                    String realValMfFmt = numFmt.format(realValMf);
                    double realValOt = realisasiGrOnTopLine.getValue();
                    String realValOtFmt = numFmt.format(realValOt);
                    if (!isInputValid) {
                        sErrMsg += "<nr> ";
                    }
                    sErrMsg +=
                            "Amount On Top dan MF tidak boleh kurang dari realisasi (On Top: " +
                            realValOtFmt + " , MF: " + realValMfFmt + ").";
                    isInputValid = false;
                } else {
                    // DO NOTHING, DATA VALID
                }

                if (isInputValid) {
                    eventOk();
                } else {
                    showPopup(sErrMsg, potmessage);
                    tabProdPotongan.setDisclosed(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tabProdPotongan);
                }
            }

            tabProdCustomer.setDisclosed(true);
            AdfFacesContext.getCurrentInstance().addPartialTarget(tabProdCustomer);
        } else {
            showPopup(sIterMsg, potmessage);
        }
    }

    private void eventOk() {
        BindingContainer bindings = getBindings();
        OperationBinding operationBindingCommit =
            bindings.getOperationBinding("Commit");
        operationBindingCommit.execute();

        pdetailProduct.hide();

        DCIteratorBinding dcIterPromoProduk =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        Key parentKey = dcIterPromoProduk.getCurrentRow().getKey();

        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePromoProduct");
        operationBinding.execute();

        dcIterPromoProduk.setCurrentRowWithKey(parentKey.toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);
    }

    public void tabTargetEvent(DisclosureEvent disclosureEvent) {
        BindingContainer bindings = getBindings();

        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

        AttributeBinding paketFlagAttr =
            (AttributeBinding)bindings.getControlBinding("PaketFlag1");
        String paketFlag =
            (String)paketFlagAttr.getInputValue() == null ? "" : (String)paketFlagAttr.getInputValue();

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row targetRow = dciterTarget.getCurrentRow();
        String currTargetUom =
            (String)targetRow.getAttribute("Uom") == null ? "" :
            (String)targetRow.getAttribute("Uom");


        //Set Target UOM
        String targetUom = targetUomNonPaket;
        if (paketFlag.equalsIgnoreCase(prodPaketFlag) &&
            !currTargetUom.equalsIgnoreCase(targetUomPaket)) {
            targetRow.setAttribute("Uom", targetUomPaket);
            //promoProposalAM.getDBTransaction().commit();
        }

        if (disclosureEvent.isExpanded()) {
            UserData userData =
                (UserData)JSFUtils.resolveExpression("#{UserData}");
            String userType = userData.getUserType();

            if (userType.equalsIgnoreCase(userHo)) {
                DCIteratorBinding dciterCustHo =
                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");

                Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

                if (cekCustHo < 1) {
                    showPopup("Tab customer harus diisi", potmessage);
                    tabProdCustomer.setDisclosed(true);
                }
            }
        }
    }


    public void tabProdBiayaEvent(DisclosureEvent disclosureEvent) {
        if (disclosureEvent.isExpanded()) {
            UserData userData =
                (UserData)JSFUtils.resolveExpression("#{UserData}");
            String userType = userData.getUserType();
            if (userType.equalsIgnoreCase(userHo)) {
                DCIteratorBinding dciterCustHo =
                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");

                Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

                if (cekCustHo < 1) {
                    showPopup("Tab customer harus diisi", potmessage);
                    tabProdCustomer.setDisclosed(true);
                }
            }
        }
    }

    public void tabProdPromoBarang(DisclosureEvent disclosureEvent) {
        if (disclosureEvent.isExpanded()) {
            BindingContainer bindings = getBindings();
            UserData userData =
                (UserData)JSFUtils.resolveExpression("#{UserData}");
            String userType = userData.getUserType();
            if (userType.equalsIgnoreCase(userHo)) {
                DCIteratorBinding dciterCustHo =
                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");

                Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

                if (cekCustHo < 1) {
                    showPopup("Tab customer harus diisi", potmessage);
                    tabProdCustomer.setDisclosed(true);
                }
            }

            DCIteratorBinding dciterPromoBonus =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            DCIteratorBinding dciterUOMTarget =
                ADFUtils.findIterator("TargetView1Iterator");
            Row rTarget = dciterUOMTarget.getCurrentRow();
            String uomTar = (String)rTarget.getAttribute("Uom");
            if (dciterPromoBonus.getEstimatedRowCount() > 0) {
                boolean uomChanged = false;
                for (Row r : dciterPromoBonus.getAllRowsInRange()) {
                    String currUom =
                        r.getAttribute("Uom") == null ? "" : r.getAttribute("Uom").toString();
                    if (!currUom.equalsIgnoreCase(uomTar) && uomTar != null) {
                        r.setAttribute("Uom", uomTar);
                        uomChanged = true;
                    }
                }

                if (uomChanged) {
                    try {
                        OperationBinding operationBinding =
                            bindings.getOperationBinding("Commit");
                        operationBinding.execute();
                    } catch (Exception e) {
                        JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                    }
                    dciterPromoBonus.executeQuery();
                }
            }
        }
    }

    public void tabProdPotonganEvent(DisclosureEvent disclosureEvent) {
        if (disclosureEvent.isExpanded()) {
            BindingContainer bindings = getBindings();
            UserData userData =
                (UserData)JSFUtils.resolveExpression("#{UserData}");
            String userType = userData.getUserType();
            if (userType.equalsIgnoreCase(userHo)) {
                DCIteratorBinding dciterCustHo =
                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");

                Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

                if (cekCustHo < 1) {
                    showPopup("Tab customer harus diisi", potmessage);
                    tabProdCustomer.setDisclosed(true);
                }
            }

            DCIteratorBinding dciterDisc =
                ADFUtils.findIterator("DiscountView1Iterator");
            DCIteratorBinding dciterTarget =
                ADFUtils.findIterator("TargetView1Iterator");
            Row rTarget = dciterTarget.getCurrentRow();
            String uomTar = (String)rTarget.getAttribute("Uom");
            if (dciterDisc.getEstimatedRowCount() > 0) {
                boolean uomChanged = false;
                for (Row r : dciterDisc.getAllRowsInRange()) {
                    String currUom =
                        r.getAttribute("Uom") == null ? "" : r.getAttribute("Uom").toString();
                    if (!currUom.equalsIgnoreCase(uomTar) && uomTar != null) {
                        r.setAttribute("Uom", uomTar);
                        uomChanged = true;
                    }
                }

                if (uomChanged) {
                    try {
                        OperationBinding operationBinding =
                            bindings.getOperationBinding("Commit");
                        operationBinding.execute();
                    } catch (Exception e) {
                        JSFUtils.addFacesErrorMessage(e.getLocalizedMessage());
                    }
                    dciterDisc.executeQuery();
                }
            }
        }
    }

    public void setPdetailProduct(RichPopup pdetailProduct) {
        this.pdetailProduct = pdetailProduct;
    }

    public RichPopup getPdetailProduct() {
        return pdetailProduct;
    }

    public void cancelDetailProduct(ActionEvent actionEvent) {
        pdetailProduct.hide();
        tabProdCustomer.setDisclosed(true);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tabProdCustomer);
    }

    public void setPotmessage(RichPopup potmessage) {
        this.potmessage = potmessage;
    }

    public RichPopup getPotmessage() {
        return potmessage;
    }

    public void setOtpesan(RichOutputFormatted otpesan) {
        this.otpesan = otpesan;
    }

    public RichOutputFormatted getOtpesan() {
        return otpesan;
    }

    public void settabProdTargetBudget(RichShowDetailItem tabProdTargetBudget) {
        this.tabProdTargetBudget = tabProdTargetBudget;
    }

    public RichShowDetailItem gettabProdTargetBudget() {
        return tabProdTargetBudget;
    }

    public void settabProdCustomer(RichShowDetailItem tabProdCustomer) {
        this.tabProdCustomer = tabProdCustomer;
    }

    public RichShowDetailItem gettabProdCustomer() {
        return tabProdCustomer;
    }

    public void setTabProdBiaya(RichShowDetailItem tabProdBiaya) {
        this.tabProdBiaya = tabProdBiaya;
    }

    public RichShowDetailItem getTabProdBiaya() {
        return tabProdBiaya;
    }

    public void setBiayaNonYearly(String BiayaNonYearly) {
        this.BiayaNonYearly = BiayaNonYearly;
    }

    public String getBiayaNonYearly() {
        return BiayaNonYearly;
    }

    public void setBiayaYearly(String BiayaYearly) {
        this.BiayaYearly = BiayaYearly;
    }

    public String getBiayaYearly() {
        return BiayaYearly;
    }

    public void setUserTypeCreator(String UserTypeCreator) {
        this.UserTypeCreator = UserTypeCreator;
    }

    public String getUserTypeCreator() {
        return UserTypeCreator;
    }

    public void setTabProdPromoBarang(RichShowDetailItem tabProdPromoBarang) {
        this.tabProdPromoBarang = tabProdPromoBarang;
    }

    public RichShowDetailItem getTabProdPromoBarang() {
        return tabProdPromoBarang;
    }

    public void setTabProdPotongan(RichShowDetailItem tabProdPotongan) {
        this.tabProdPotongan = tabProdPotongan;
    }

    public RichShowDetailItem getTabProdPotongan() {
        return tabProdPotongan;
    }

    public void setTabTargetAndBudget(RichShowDetailItem tabTargetAndBudget) {
        this.tabTargetAndBudget = tabTargetAndBudget;
    }

    public RichShowDetailItem getTabTargetAndBudget() {
        return tabTargetAndBudget;
    }

    public void setItVariant(RichInputText itVariant) {
        this.itVariant = itVariant;
    }

    public RichInputText getItVariant() {
        return itVariant;
    }

    public void setLinkVariant(RichCommandImageLink linkVariant) {
        this.linkVariant = linkVariant;
    }

    public RichCommandImageLink getLinkVariant() {
        return linkVariant;
    }

    public void setPsubmitProposal(RichPopup psubmitProposal) {
        this.psubmitProposal = psubmitProposal;
    }

    public RichPopup getPsubmitProposal() {
        return psubmitProposal;
    }

    public void submitEvent(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();

        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

        AdfFacesContext context = AdfFacesContext.getCurrentInstance();
        Map vScope = context.getViewScope();
        vScope.put("Action", null);

        boolean backDateOk = false;
        boolean validateH1H7 = true;

        AttributeBinding propIdAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalId");
        DBSequence proposalId = (DBSequence)propIdAttr.getInputValue();

        AttributeBinding discTypeAttr =
            (AttributeBinding)bindings.getControlBinding("DiscountType1");
        String discType = (String)discTypeAttr.getInputValue();

        // Flag customer user AREA
        AttributeBinding custTypeAreaAttr =
            (AttributeBinding)bindings.getControlBinding("CustRegFlag");
        String custTypeArea = (String)custTypeAreaAttr.getInputValue();

        AttributeBinding copySourceAttr =
            (AttributeBinding)bindings.getControlBinding("CopySource");
        String copySource = (String)copySourceAttr.getInputValue();

        AttributeBinding mekPenagihanAttr =
            (AttributeBinding)bindings.getControlBinding("MekanismePenagihan");
        Integer mekPenagihan = (Integer)mekPenagihanAttr.getInputValue();

        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String userType = userData.getUserType();
        String custRegionPriv = userData.getUserCustRegion();
        String custAreaPriv = userData.getUserCustArea();
        String custLocPriv = userData.getUserCustLocation();
        String custTypePriv = userData.getUserCustType();
        String custGroupPriv = userData.getUserCustGroup();
        String custNamePriv = userData.getUserCustName();

        Key keyRow = (Key)vScope.get("ProdRowKey");

        DCIteratorBinding dciterPromoProduk =
            ADFUtils.findIterator("PromoProdukView1Iterator");

        Key promoProdKey = null;
        Integer rowStatus = null;
        String rowProdVariant = "";
        if (dciterPromoProduk.getEstimatedRowCount() > 0) {
            rowStatus =
                    (Integer)dciterPromoProduk.getCurrentRow().getAttribute("CheckRowStatus");
            rowProdVariant =
                    dciterPromoProduk.getCurrentRow().getAttribute("ProductVariant") ==
                    null ? "" :
                    dciterPromoProduk.getCurrentRow().getAttribute("ProductVariant").toString();

            if (keyRow != null) {
                promoProdKey = keyRow;
            } else {
                promoProdKey = dciterPromoProduk.getCurrentRow().getKey();
            }
        }

        if (userType.equalsIgnoreCase(userHo)) {
            Boolean isSavedValid = true;
            String sSavedMsg = "";

            PromoProdukViewImpl promoProdukVo =
                (PromoProdukViewImpl)promoProposalAM.getPromoProdukView1();
            promoProdukVo.setWhereClause("PromoProduk.PROPOSAL_ID = " +
                                         proposalId.getValue());
            promoProdukVo.executeQuery();

            ViewObject produkVo = dciterPromoProduk.getViewObject();
            RowSetIterator rsiProduk = produkVo.createRowSetIterator(null);
            int i = 1;
            while (rsiProduk.hasNext()) {
                Row produkRow = rsiProduk.next();
                DBSequence promoProdukId =
                    (DBSequence)produkRow.getAttribute("PromoProdukId");
                String hoCustType =
                    (String)produkRow.getAttribute("RegCustFlag");
                String validComb = (String)produkRow.getAttribute("ValidComb");
                Number ppidRef = (Number)produkRow.getAttribute("PpidRef");

                Number realisasiGrMfLine = zeroNum;
                Number realisasiGrOnTopLine = zeroNum;

                ValidateRealisasiGrImpl valRealGrVo =
                    promoProposalAM.getValidateRealisasiGr1();
                valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                valRealGrVo.executeQuery();

                if (valRealGrVo.getEstimatedRowCount() > 0) {
                    ValidateRealisasiGrRowImpl valRealGrRow =
                        (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                    realisasiGrMfLine = valRealGrRow.getRealisasiGrMfByLine();
                    realisasiGrOnTopLine =
                            valRealGrRow.getRealisasiGrOnTopByLine();
                } else {
                    //Just keep realization number zero
                }

                //Validasi produk combination
                if (validComb.equalsIgnoreCase("N")) {
                    if (!isSavedValid) {
                        sSavedMsg += "<nr> ";
                    }
                    sSavedMsg +=
                            "Kombinasi produk pada baris (" + i + ") belum valid.";
                    isSavedValid = false;
                }

                // VALIDASI CUSTOMER

                DCIteratorBinding dciterCustHo =
                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");

                Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

                /*
                // *** REGIONAL: REGION VALIDATION
                ProdRegionValidationImpl prodRegionVo =
                    promoProposalAM.getProdRegionValidation1();
                prodRegionVo.setWhereClause("ProdRegion.PROMO_PRODUK_ID = " +
                                            promoProdukId.getValue());
                prodRegionVo.executeQuery();

                // *** REGIONAL: AREA VALIDATION
                ProdRegionAreaValidationImpl prodRegionAreaVo =
                    promoProposalAM.getProdRegionAreaValidation1();
                prodRegionAreaVo.setWhereClause("ProdRegionArea.PROMO_PRODUK_ID = " +
                                                promoProdukId.getValue());
                prodRegionAreaVo.executeQuery();

                // *** REGIONAL: LOCATION VALIDATION
                ProdRegionLocValidationImpl prodRegionLocVo =
                    promoProposalAM.getProdRegionLocValidation1();
                prodRegionLocVo.setWhereClause("ProdRegionLoc.PROMO_PRODUK_ID = " +
                                               promoProdukId.getValue());
                prodRegionLocVo.executeQuery();
                */
                /*
                if ((custRegionPriv.equalsIgnoreCase(yesFlag) && prodRegionVo.getEstimatedRowCount() < 1 && prodRegionAreaVo.getEstimatedRowCount() < 1 && prodRegionLocVo.getEstimatedRowCount() < 1) ||
                    (custAreaPriv.equalsIgnoreCase(yesFlag) && prodRegionAreaVo.getEstimatedRowCount() < 1 && prodRegionLocVo.getEstimatedRowCount() < 1) ||
                    (custLocPriv.equalsIgnoreCase(yesFlag) && prodRegionLocVo.getEstimatedRowCount() < 1)) {*/
                if (!(cekCustHo > 0)) {
                    if (!isSavedValid) {
                        sSavedMsg += "<nr> ";
                    }
                    sSavedMsg +=
                            "Customer pada produk baris (" + i + ") belum diisi.";
                    isSavedValid = false;
                }
                /*
                if (custTypePriv.equalsIgnoreCase(yesFlag)) {
                    ProdRegionCustTypeValidationImpl prodRegionCustTypeVo =
                        promoProposalAM.getProdRegionCustTypeValidation1();
                    prodRegionCustTypeVo.setWhereClause("ProdRegionCustType.PROMO_PRODUK_ID = " +
                                                        promoProdukId.getValue());
                    prodRegionCustTypeVo.executeQuery();
                    if (prodRegionCustTypeVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            sSavedMsg += "<nr> ";
                        }
                        sSavedMsg +=
                                "\"Customer Type\" pada produk baris (" +
                                i + ") belum diisi.";
                        isSavedValid = false;
                    }
                }

                if (custGroupPriv.equalsIgnoreCase(yesFlag)) {
                    ProdRegionCustGroupValidationImpl prodRegionCustGroupVo =
                        promoProposalAM.getProdRegionCustGroupValidation1();
                    prodRegionCustGroupVo.setWhereClause("ProdRegionCustGroup.PROMO_PRODUK_ID = " +
                                                         promoProdukId.getValue());
                    prodRegionCustGroupVo.executeQuery();
                    if (prodRegionCustGroupVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            sSavedMsg += "<nr> ";
                        }
                        sSavedMsg +=
                                "\"Customer Group\" pada produk baris (" + i +
                                ") belum diisi.";
                        isSavedValid = false;
                    }
                }

                if (custNamePriv.equalsIgnoreCase(yesFlag)) {
                    ProdRegionCustomerValidationImpl prodRegionCustomerVo =
                        promoProposalAM.getProdRegionCustomerValidation1();
                    prodRegionCustomerVo.setWhereClause("ProdRegionCustomer.PROMO_PRODUK_ID = " +
                                                        promoProdukId.getValue());
                    prodRegionCustomerVo.executeQuery();
                    if (prodRegionCustomerVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            sSavedMsg += "<nr> ";
                        }
                        sSavedMsg +=
                                "\"Customer Name\" pada produk baris (" +
                                i + ") belum diisi.";
                        isSavedValid = false;
                    }
                }
                */
                // Validasi Tab "Biaya" / "Promo Barang" / "Potongan"
                if (discType.equalsIgnoreCase(discTypeBiaya)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            sSavedMsg += "<nr> ";
                        }
                        sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number biayaNonYearly =
                            (Number)produkRow.getAttribute("BiaOntop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BiaOntop");
                        Number biayaYearly =
                            (Number)produkRow.getAttribute("BiaMf") == null ?
                            zeroNum : (Number)produkRow.getAttribute("BiaMf");
                        if ((biayaNonYearly == null && biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly.compareTo(zeroNum) == 0) ||
                            (biayaNonYearly == null &&
                             biayaYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                sSavedMsg += "<nr> ";
                            }
                            sSavedMsg +=
                                    "Value Target atau Biaya \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" +
                                    i + ") belum diisi.";
                            isSavedValid = false;
                        } else {
                            // Validasi GR On Top dan MF terhadap realisasi per line
                            Number totalMf = biayaYearly;
                            Number totalOnTop = biayaNonYearly;

                            /*
                            System.out.println("==================================");
                            System.out.println("Biaya - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                            System.out.println("Biaya - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                            System.out.println("==================================");
                            */

                            if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                                totalOnTop.compareTo(realisasiGrOnTopLine) >=
                                0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount MF produk baris ke-" + i + " tidak boleh kurang dari realisasi (MF: " +
                                        realValMfFmt + ").";
                                isSavedValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) >=
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount On Top produk baris ke-" + i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + ").";
                                isSavedValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) <
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount On Top dan MF produk baris ke-" +
                                        i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + " , MF: " +
                                        realValMfFmt + ").";
                                isSavedValid = false;
                            } else {
                                // DO NOTHING, DATA VALID
                            }
                        }
                    }
                } else if (discType.equalsIgnoreCase(discTypePromoBarang)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            sSavedMsg += "<nr> ";
                        }
                        sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number promoNonYearly =
                            (Number)produkRow.getAttribute("BrgBonusOnTop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BrgBonusOnTop");
                        Number promoYearly =
                            (Number)produkRow.getAttribute("BrgBonusMf") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("BrgBonusMf");
                        if ((promoNonYearly == null && promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly.compareTo(zeroNum) == 0) ||
                            (promoNonYearly == null &&
                             promoYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                sSavedMsg += "<nr> ";
                            }
                            sSavedMsg +=
                                    "Value Target atau Promo Bonus \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" +
                                    i + ") belum diisi.";
                            isSavedValid = false;
                        } else {
                            // Validasi GR On Top dan MF terhadap realisasi per line
                            Number totalMf = promoYearly;
                            Number totalOnTop = promoNonYearly;

                            /*
                            System.out.println("==================================");
                            System.out.println("PromoBarang - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                            System.out.println("PromoBarang - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                            System.out.println("==================================");
                            */

                            if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                                totalOnTop.compareTo(realisasiGrOnTopLine) >=
                                0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount MF produk baris ke-" + i + " tidak boleh kurang dari realisasi (MF: " +
                                        realValMfFmt + ").";
                                isSavedValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) >=
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount On Top produk baris ke-" + i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + ").";
                                isSavedValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) <
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount On Top dan MF produk baris ke-" +
                                        i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + " , MF: " +
                                        realValMfFmt + ").";
                                isSavedValid = false;
                            } else {
                                // DO NOTHING, DATA VALID
                            }
                        }
                    }
                } else if (discType.equalsIgnoreCase(discTypePotongan)) {
                    if (promoProdukVo.getEstimatedRowCount() < 1) {
                        if (!isSavedValid) {
                            sSavedMsg += "<nr> ";
                        }
                        sSavedMsg += "List produk pada proposal belum diisi.";
                        isSavedValid = false;
                    } else {
                        Number discNonYearly =
                            (Number)produkRow.getAttribute("DiscOnTop") ==
                            null ? zeroNum :
                            (Number)produkRow.getAttribute("DiscOnTop");
                        Number discYearly =
                            (Number)produkRow.getAttribute("DiscMf") == null ?
                            zeroNum : (Number)produkRow.getAttribute("DiscMf");
                        if ((discNonYearly == null && discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly.compareTo(zeroNum) == 0) ||
                            (discNonYearly == null &&
                             discYearly.compareTo(zeroNum) == 0)) {
                            if (!isSavedValid) {
                                sSavedMsg += "<nr> ";
                            }
                            sSavedMsg +=
                                    "Value Target atau Potongan \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" +
                                    i + ") belum diisi.";
                            isSavedValid = false;
                        } else {
                            // Validasi GR On Top dan MF terhadap realisasi per line
                            Number totalMf = discYearly;
                            Number totalOnTop = discNonYearly;

                            /*
                            System.out.println("==================================");
                            System.out.println("Potongan - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                            System.out.println("Potongan - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                            System.out.println("==================================");
                            */

                            if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                                totalOnTop.compareTo(realisasiGrOnTopLine) >=
                                0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount MF produk baris ke-" + i + " tidak boleh kurang dari realisasi (MF: " +
                                        realValMfFmt + ").";
                                isSavedValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) >=
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount On Top produk baris ke-" + i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + ").";
                                isSavedValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) <
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isSavedValid) {
                                    sSavedMsg += "<nr> ";
                                }
                                sSavedMsg +=
                                        "Amount On Top dan MF produk baris ke-" +
                                        i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + " , MF: " +
                                        realValMfFmt + ").";
                                isSavedValid = false;
                            } else {
                                // DO NOTHING, DATA VALID
                            }
                        }
                    }
                }
                i = i + 1;
            }
            //rsiProduk.closeRowSetIterator();

            if (isSavedValid) {
                java.util.Date date2 =
                    new java.util.Date(idPeriodProgFrom.getValue().toString());
                java.util.Date today = new java.util.Date();
                Integer valFoodDate = 0;

                Calendar calTodayAdd1 = Calendar.getInstance();
                calTodayAdd1.setTime(today);
                // Set time fields to zero
                calTodayAdd1.set(Calendar.HOUR_OF_DAY, 0);
                calTodayAdd1.set(Calendar.MINUTE, 0);
                calTodayAdd1.set(Calendar.SECOND, 0);
                calTodayAdd1.set(Calendar.MILLISECOND, 0);
                calTodayAdd1.add(Calendar.DATE, 1);

                if (mekPenagihan.equals(onInvoice)) {
                    Date todayAdd1 = calTodayAdd1.getTime();
                    if (date2.compareTo(todayAdd1) < 0) {
                        valFoodDate = 3;
                    } else {
                        valFoodDate = 0;
                    }
                } else {
                    valFoodDate = 0;
                }

                if (valFoodDate.compareTo(0) == 0) {
                    RichPopup.PopupHints hints = new RichPopup.PopupHints();
                    psubmitProposal.show(hints);
                } else if (valFoodDate.compareTo(3) == 0) {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                                   potmessage);
                } else {
                    // DO NOTHING
                }
            } else {
                showPopup(sSavedMsg, potmessage);
            }

            promoProdukVo.setWhereClause(null);
            promoProdukVo.executeQuery();
        } else {
            // *** USER AREA ***
            DCIteratorBinding dciterCustArea =
                ADFUtils.findIterator("PromoCustomerAreaView1Iterator");
            Boolean isIterValid = true;
            String sIterMsg = "";

            PromoProdukViewImpl promoProdukVo =
                (PromoProdukViewImpl)promoProposalAM.getPromoProdukView1();
            promoProdukVo.setWhereClause("PromoProduk.PROPOSAL_ID = " +
                                         proposalId.getValue());
            promoProdukVo.executeQuery();

            // Validasi Tab "Biaya" / "Promo Barang" / "Potongan"
            if (discType.equalsIgnoreCase(discTypeBiaya)) {
                if (promoProdukVo.getEstimatedRowCount() < 1) {
                    if (!isIterValid) {
                        sIterMsg += "<nr> ";
                    }
                    sIterMsg += "List produk pada proposal belum diisi.";
                    isIterValid = false;
                } else {
                    int i = 1;
                    for (Row r : promoProdukVo.getAllRowsInRange()) {
                        Number biayaNonYearly =
                            (Number)r.getAttribute("BiaOntop") == null ?
                            zeroNum : (Number)r.getAttribute("BiaOntop");
                        Number biayaYearly =
                            (Number)r.getAttribute("BiaMf") == null ? zeroNum :
                            (Number)r.getAttribute("BiaMf");

                        Number ppidRef = (Number)r.getAttribute("PpidRef");
                        Number realisasiGrTotalByLine =
                            (Number)r.getAttribute("RealisasiPpGrTotByLine") ==
                            null ? zeroNum :
                            (Number)r.getAttribute("RealisasiPpGrTotByLine");

                        Number realisasiGrMfLine = zeroNum;
                        Number realisasiGrOnTopLine = zeroNum;

                        ValidateRealisasiGrImpl valRealGrVo =
                            promoProposalAM.getValidateRealisasiGr1();
                        valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                        valRealGrVo.executeQuery();

                        if (valRealGrVo.getEstimatedRowCount() > 0) {
                            ValidateRealisasiGrRowImpl valRealGrRow =
                                (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                            realisasiGrMfLine =
                                    valRealGrRow.getRealisasiGrMfByLine();
                            realisasiGrOnTopLine =
                                    valRealGrRow.getRealisasiGrOnTopByLine();
                        } else {
                            //Just keep realization number zero
                        }

                        if ((biayaNonYearly == null && biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly == null) ||
                            (biayaNonYearly.compareTo(zeroNum) == 0 &&
                             biayaYearly.compareTo(zeroNum) == 0) ||
                            (biayaNonYearly == null &&
                             biayaYearly.compareTo(zeroNum) == 0)) {
                            if (!isIterValid) {
                                sIterMsg += "<nr> ";
                            }
                            sIterMsg +=
                                    "Value Target atau Biaya \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" +
                                    i + ") belum diisi.";
                            isIterValid = false;
                        } else {
                            // Validasi GR On Top dan MF terhadap realisasi per line
                            Number totalMf = biayaYearly;
                            Number totalOnTop = biayaNonYearly;

                            if (realisasiGrTotalByLine.compareTo(totalMf) >=
                                0) {
                                realisasiGrMfLine = totalMf;
                                realisasiGrOnTopLine =
                                        (Number)realisasiGrTotalByLine.minus(totalMf);
                            } else {
                                realisasiGrMfLine = realisasiGrTotalByLine;
                                realisasiGrOnTopLine = zeroNum;
                            }

                            /*
                            System.out.println("==================================");
                            System.out.println("Biaya - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                            System.out.println("Biaya - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                            System.out.println("==================================");
                            */

                            if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                                totalOnTop.compareTo(realisasiGrOnTopLine) >=
                                0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount MF produk baris ke-" + i + " tidak boleh kurang dari realisasi (MF: " +
                                        realValMfFmt + ").";
                                isIterValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) >=
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount On Top produk baris ke-" + i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + ").";
                                isIterValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) <
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount On Top dan MF produk baris ke-" +
                                        i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + " , MF: " +
                                        realValMfFmt + ").";
                                isIterValid = false;
                            } else {
                                // DO NOTHING, DATA VALID
                            }
                        }
                        i = i + 1;
                    }
                }
            } else if (discType.equalsIgnoreCase(discTypePromoBarang)) {
                if (promoProdukVo.getEstimatedRowCount() < 1) {
                    if (!isIterValid) {
                        sIterMsg += "<nr> ";
                    }
                    sIterMsg += "List produk pada proposal belum diisi.";
                    isIterValid = false;
                } else {
                    int i = 1;
                    for (Row r : promoProdukVo.getAllRowsInRange()) {
                        Number promoNonYearly =
                            (Number)r.getAttribute("BrgBonusOnTop") == null ?
                            zeroNum : (Number)r.getAttribute("BrgBonusOnTop");
                        Number promoYearly =
                            (Number)r.getAttribute("BrgBonusMf") == null ?
                            zeroNum : (Number)r.getAttribute("BrgBonusMf");

                        Number ppidRef = (Number)r.getAttribute("PpidRef");
                        Number realisasiGrTotalByLine =
                            (Number)r.getAttribute("RealisasiPpGrTotByLine") ==
                            null ? zeroNum :
                            (Number)r.getAttribute("RealisasiPpGrTotByLine");

                        Number realisasiGrMfLine = zeroNum;
                        Number realisasiGrOnTopLine = zeroNum;

                        ValidateRealisasiGrImpl valRealGrVo =
                            promoProposalAM.getValidateRealisasiGr1();
                        valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                        valRealGrVo.executeQuery();

                        if (valRealGrVo.getEstimatedRowCount() > 0) {
                            ValidateRealisasiGrRowImpl valRealGrRow =
                                (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                            realisasiGrMfLine =
                                    valRealGrRow.getRealisasiGrMfByLine();
                            realisasiGrOnTopLine =
                                    valRealGrRow.getRealisasiGrOnTopByLine();
                        } else {
                            //Just keep realization number zero
                        }

                        if ((promoNonYearly == null && promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly == null) ||
                            (promoNonYearly.compareTo(zeroNum) == 0 &&
                             promoYearly.compareTo(zeroNum) == 0) ||
                            (promoNonYearly == null &&
                             promoYearly.compareTo(zeroNum) == 0)) {
                            if (!isIterValid) {
                                sIterMsg += "<nr> ";
                            }
                            sIterMsg +=
                                    "Value Target atau Promo Bonus \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" +
                                    i + ") belum diisi.";
                            isIterValid = false;
                        } else {
                            // Validasi GR On Top dan MF terhadap realisasi per line
                            Number totalMf = promoYearly;
                            Number totalOnTop = promoNonYearly;

                            if (realisasiGrTotalByLine.compareTo(totalMf) >=
                                0) {
                                realisasiGrMfLine = totalMf;
                                realisasiGrOnTopLine =
                                        (Number)realisasiGrTotalByLine.minus(totalMf);
                            } else {
                                realisasiGrMfLine = realisasiGrTotalByLine;
                                realisasiGrOnTopLine = zeroNum;
                            }

                            /*
                            System.out.println("==================================");
                            System.out.println("PromoBarang - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                            System.out.println("PromoBarang - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                            System.out.println("==================================");
                            */

                            if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                                totalOnTop.compareTo(realisasiGrOnTopLine) >=
                                0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount MF produk baris ke-" + i + " tidak boleh kurang dari realisasi (MF: " +
                                        realValMfFmt + ").";
                                isIterValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) >=
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount On Top produk baris ke-" + i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + ").";
                                isIterValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) <
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount On Top dan MF produk baris ke-" +
                                        i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + " , MF: " +
                                        realValMfFmt + ").";
                                isIterValid = false;
                            } else {
                                // DO NOTHING, DATA VALID
                            }
                        }
                        i = i + 1;
                    }
                }
            } else if (discType.equalsIgnoreCase(discTypePotongan)) {
                if (promoProdukVo.getEstimatedRowCount() < 1) {
                    if (!isIterValid) {
                        sIterMsg += "<nr> ";
                    }
                    sIterMsg += "List produk pada proposal belum diisi.";
                    isIterValid = false;
                } else {
                    int i = 1;
                    for (Row r : promoProdukVo.getAllRowsInRange()) {
                        Number discNonYearly =
                            (Number)r.getAttribute("DiscMf") == null ?
                            zeroNum : (Number)r.getAttribute("DiscMf");
                        Number discYearly =
                            (Number)r.getAttribute("DiscOnTop") == null ?
                            zeroNum : (Number)r.getAttribute("DiscOnTop");

                        Number ppidRef = (Number)r.getAttribute("PpidRef");
                        Number realisasiGrTotalByLine =
                            (Number)r.getAttribute("RealisasiPpGrTotByLine") ==
                            null ? zeroNum :
                            (Number)r.getAttribute("RealisasiPpGrTotByLine");

                        Number realisasiGrMfLine = zeroNum;
                        Number realisasiGrOnTopLine = zeroNum;

                        ValidateRealisasiGrImpl valRealGrVo =
                            promoProposalAM.getValidateRealisasiGr1();
                        valRealGrVo.setNamedWhereClauseParam("ppid", ppidRef);
                        valRealGrVo.executeQuery();

                        if (valRealGrVo.getEstimatedRowCount() > 0) {
                            ValidateRealisasiGrRowImpl valRealGrRow =
                                (ValidateRealisasiGrRowImpl)valRealGrVo.first();
                            realisasiGrMfLine =
                                    valRealGrRow.getRealisasiGrMfByLine();
                            realisasiGrOnTopLine =
                                    valRealGrRow.getRealisasiGrOnTopByLine();
                        } else {
                            //Just keep realization number zero
                        }

                        if ((discNonYearly == null && discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly == null) ||
                            (discNonYearly.compareTo(zeroNum) == 0 &&
                             discYearly.compareTo(zeroNum) == 0) ||
                            (discNonYearly == null &&
                             discYearly.compareTo(zeroNum) == 0)) {
                            if (!isIterValid) {
                                sIterMsg += "<nr> ";
                            }
                            sIterMsg +=
                                    "Value Target atau Potongan \"Tdk Potong Budget / On Top\" , \"Potong Budget / MF\" produk baris (" +
                                    i + ") belum diisi.";
                            isIterValid = false;
                        } else {
                            // Validasi GR On Top dan MF terhadap realisasi per line
                            Number totalMf =
                                discYearly == null ? zeroNum : discYearly;
                            Number totalOnTop =
                                discNonYearly == null ? zeroNum :
                                discNonYearly;

                            if (realisasiGrTotalByLine.compareTo(totalMf) >=
                                0) {
                                realisasiGrMfLine = totalMf;
                                realisasiGrOnTopLine =
                                        (Number)realisasiGrTotalByLine.minus(totalMf);
                            } else {
                                realisasiGrMfLine = realisasiGrTotalByLine;
                                realisasiGrOnTopLine = zeroNum;
                            }

                            /*
                            System.out.println("==================================");
                            System.out.println("Potongan - realisasiGrMfLine   : " + realisasiGrMfLine.getBigDecimalValue() + " -- TOTAL MF: " + totalMf.getBigDecimalValue());
                            System.out.println("Potongan - realisasiGrOnTopLine: " + realisasiGrOnTopLine.getBigDecimalValue() + "-- TOTAL OT: " + totalOnTop.getBigDecimalValue());
                            System.out.println("==================================");
                            */

                            if (totalMf.compareTo(realisasiGrMfLine) < 0 &&
                                totalOnTop.compareTo(realisasiGrOnTopLine) >=
                                0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount MF produk baris ke-" + i + " tidak boleh kurang dari realisasi (MF: " +
                                        realValMfFmt + ").";
                                isIterValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) >=
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount On Top produk baris ke-" + i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + ").";
                                isIterValid = false;
                            } else if (totalMf.compareTo(realisasiGrMfLine) <
                                       0 &&
                                       totalOnTop.compareTo(realisasiGrOnTopLine) <
                                       0) {
                                double realValMf =
                                    realisasiGrMfLine.getValue();
                                String realValMfFmt = numFmt.format(realValMf);
                                double realValOt =
                                    realisasiGrOnTopLine.getValue();
                                String realValOtFmt = numFmt.format(realValOt);
                                if (!isIterValid) {
                                    sIterMsg += "<nr> ";
                                }
                                sIterMsg +=
                                        "Amount On Top dan MF produk baris ke-" +
                                        i +
                                        " tidak boleh kurang dari realisasi (On Top: " +
                                        realValOtFmt + " , MF: " +
                                        realValMfFmt + ").";
                                isIterValid = false;
                            } else {
                                // DO NOTHING, DATA VALID
                            }
                        }
                        i = i + 1;
                    }
                }
            }

            promoProdukVo.setWhereClause(null);
            promoProdukVo.executeQuery();

            // VALIDASI CUSTOMER
            // *** REGIONAL: REGION VALIDATION
            Integer cekCustArea = (int)dciterCustArea.getEstimatedRowCount();
            if (cekCustArea < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "\"Customer\" masih kosong, harus diisi.";
                isIterValid = false;
            }
            /*
            if ((custRegionPriv.equalsIgnoreCase(yesFlag) && cekRegion1 < 1 && cekArea1 < 1 && cekLoc1 < 1) ||
                (custAreaPriv.equalsIgnoreCase(yesFlag) && cekArea1 < 1 && cekLoc1 < 1) ||
                (custLocPriv.equalsIgnoreCase(yesFlag) && cekLoc1 < 1)) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "Customer dengan tipe \"Regional\", harus diisi.";
                isIterValid = false;
            }

            if (custTypePriv.equalsIgnoreCase(yesFlag) && cekCustType1 < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "\"Customer Type\" masih kosong, harus diisi.";
                isIterValid = false;
            }

            if (custGroupPriv.equalsIgnoreCase(yesFlag) && cekCustGroup1 < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "\"Customer Group\" masih kosong, harus diisi.";
                isIterValid = false;
            }

            if (custNamePriv.equalsIgnoreCase(yesFlag) && cekCustomer1 < 1) {
                if (!isIterValid) {
                    sIterMsg += "<nr> ";
                }
                sIterMsg += "\"Customer Name\" masih kosong, harus diisi.";
                isIterValid = false;
            }
            */
            if (isIterValid) {
                java.util.Date date2 =
                    new java.util.Date(idPeriodProgFrom.getValue().toString());
                java.util.Date today = new java.util.Date();

                AttributeBinding proposalTypeAttr =
                    (AttributeBinding)bindings.getControlBinding("ProposalType");
                Integer propTypeIdx =
                    (Integer)proposalTypeAttr.getInputValue();

                Calendar calYesterday = Calendar.getInstance();
                calYesterday.setTime(today);
                calYesterday.add(Calendar.DATE, -1);
                Date yesterday = calYesterday.getTime();
                Integer valFoodDate = 0;

                ArrayList<String> custRegCodeList = new ArrayList<String>();
                custRegCodeList = validateBlockRegion(custTypeArea);

                if (date2.before(yesterday) &&
                    userType.equalsIgnoreCase(userArea)) {
                    if (custRegCodeList.contains(backDateBlockRegion) &&
                        custRegCodeList.size() == 1) {
                        backDateOk = true;
                    } else {
                        backDateOk = false;
                    }
                } else {
                    backDateOk = true;
                }

                if (userType.equalsIgnoreCase(userArea)) {
                    if (custRegCodeList.contains(backDateBlockRegion) &&
                        custRegCodeList.size() == 1) {
                        validateH1H7 = false;
                    } else {
                        validateH1H7 = true;
                    }
                } else {
                    validateH1H7 = true;
                }

                Calendar calTodayAdd7 = Calendar.getInstance();
                calTodayAdd7.setTime(today);
                calTodayAdd7.add(Calendar.DATE, 6);

                Calendar calTodayAdd1 = Calendar.getInstance();
                calTodayAdd1.setTime(today);
                // Set time fields to zero
                calTodayAdd1.set(Calendar.HOUR_OF_DAY, 0);
                calTodayAdd1.set(Calendar.MINUTE, 0);
                calTodayAdd1.set(Calendar.SECOND, 0);
                calTodayAdd1.set(Calendar.MILLISECOND, 0);
                calTodayAdd1.add(Calendar.DATE, 1);

                Calendar calTodayAdd10 = Calendar.getInstance();
                calTodayAdd10.setTime(today);
                calTodayAdd10.add(Calendar.DATE, 9);

                if (backDateOk) {
                    if (propTypeIdx.compareTo(idxFood) == 0) {
                        Date todayAdd7 = calTodayAdd7.getTime();
                        if (copySource == null &&
                            userType.equalsIgnoreCase(userArea) &&
                            validateH1H7) {
                            if (date2.after(yesterday) &&
                                date2.compareTo(todayAdd7) < 0) {
                                valFoodDate = 1;
                            } else {
                                valFoodDate = 0;
                            }
                        } else {
                            if (mekPenagihan.equals(onInvoice)) {
                                Date todayAdd1 = calTodayAdd1.getTime();
                                if (date2.compareTo(todayAdd1) < 0) {
                                    valFoodDate = 3;
                                } else {
                                    valFoodDate = 0;
                                }
                            } else {
                                valFoodDate = 0;
                            }
                        }
                    } else if (propTypeIdx.compareTo(idxNonFood) == 0) {
                        Date todayAdd10 = calTodayAdd10.getTime();

                        if (copySource == null &&
                            userType.equalsIgnoreCase(userArea) &&
                            validateH1H7) {
                            if (date2.after(yesterday) &&
                                date2.compareTo(todayAdd10) < 0) {
                                valFoodDate = 2;
                            } else {
                                valFoodDate = 0;
                            }
                        } else {
                            if (mekPenagihan.equals(onInvoice)) {
                                Date todayAdd1 = calTodayAdd1.getTime();
                                if (date2.compareTo(todayAdd1) < 0) {
                                    valFoodDate = 3;
                                } else {
                                    valFoodDate = 0;
                                }
                            } else {
                                valFoodDate = 0;
                            }
                        }
                    } else {
                        valFoodDate = 0;
                    }

                    if (valFoodDate.compareTo(0) == 0) {
                        RichPopup.PopupHints hints =
                            new RichPopup.PopupHints();
                        psubmitProposal.show(hints);
                    } else if (valFoodDate.compareTo(1) == 0) {
                        idPeriodProgFrom.setSubmittedValue(null);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                        this.showPopup("Pengajuan proposal periode promo FOOD minimal harus untuk H+7",
                                       potmessage);
                    } else if (valFoodDate.compareTo(2) == 0) {
                        idPeriodProgFrom.setSubmittedValue(null);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                        this.showPopup("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10",
                                       potmessage);
                    } else if (valFoodDate.compareTo(3) == 0) {
                        idPeriodProgFrom.setSubmittedValue(null);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                        this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                                       potmessage);
                    } else {
                        // DO NOTHING
                    }
                } else {
                    idPeriodProgFrom.setSubmittedValue(null);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                    if (custTypeArea.equalsIgnoreCase("")) {
                        this.showPopup("Customer harus diisi terlebih dahulu untuk pengajuan proposal \"Back Date\".",
                                       potmessage);
                    } else {
                        this.showPopup("Pengajuan proposal ini tidak diperkenankan untuk \"Back Date\"",
                                       potmessage);
                    }
                }
            } else {
                showPopup(sIterMsg, potmessage);
            }
        }

        if (promoProdKey != null) {
            dciterPromoProduk.setCurrentRowWithKey(promoProdKey.toStringFormat(true));
        }

        // Destroy view scope
        if (keyRow != null) {
            AdfFacesContext.getCurrentInstance().getViewScope().put("ProdRowKey",
                                                                    null);
        }
    }

    public void setLinkProduct(RichCommandImageLink linkProduct) {
        this.linkProduct = linkProduct;
    }

    public RichCommandImageLink getLinkProduct() {
        return linkProduct;
    }

    public void addPromoAddBuy(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();

        DCIteratorBinding dciter =
            (DCIteratorBinding)bindings.get("PromoAddBuyView1Iterator");
        RowSetIterator rsi = dciter.getRowSetIterator();
        Row lastRow = rsi.last();

        int lastRowIndex = rsi.getRangeIndexOf(lastRow);
        Row newRow = rsi.createRow();
        newRow.setNewRowState(Row.STATUS_INITIALIZED);
        //add row to last index + 1 so it becomes last in the range set
        rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
        //make row the current row so it is displayed correctly
        rsi.setCurrentRow(newRow);
    }

    public void addPromoBonus(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dciter =
            (DCIteratorBinding)bindings.get("PromoBonusView1Iterator");
        RowSetIterator rsi = dciter.getRowSetIterator();
        Row lastRow = rsi.last();

        DCIteratorBinding dciterUOMTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row rTarget = dciterUOMTarget.getCurrentRow();
        String uomTar = (String)rTarget.getAttribute("Uom");

        int lastRowIndex = rsi.getRangeIndexOf(lastRow);
        Row newRow = rsi.createRow();
        newRow.setNewRowState(Row.STATUS_INITIALIZED);
        newRow.setAttribute("Uom", uomTar);
        //add row to last index + 1 so it becomes last in the range set
        rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
        //make row the current row so it is displayed correctly
        rsi.setCurrentRow(newRow);
    }

    public void addDiscount(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dciter =
            (DCIteratorBinding)bindings.get("DiscountView1Iterator");
        RowSetIterator rsi = dciter.getRowSetIterator();
        Row firstRow = rsi.first();
        Row lastRow = rsi.last();

        DCIteratorBinding dciterUOMTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row rTarget = dciterUOMTarget.getCurrentRow();
        String uomTar = (String)rTarget.getAttribute("Uom");

        if (dciter.getEstimatedRowCount() > 0) {
            int lastRowIndex = rsi.getRangeIndexOf(lastRow);

            //Get first tipe potongan
            String tipePotongan =
                firstRow.getAttribute("TipePotongan") == null ? "" :
                firstRow.getAttribute("TipePotongan").toString();

            //Get last inserted row qty to
            Number lastRowQtyTo =
                lastRow.getAttribute("QtyTo") == null ? maxNumber :
                (Number)lastRow.getAttribute("QtyTo");
            Number lastRowKelipatan =
                lastRow.getAttribute("Kelipatan") == null ? new Number(0) :
                (Number)lastRow.getAttribute("Kelipatan");

            String TipePerhitungan =
                lastRow.getAttribute("TipePerhitungan") == null ? "" :
                lastRow.getAttribute("TipePerhitungan").toString();
            Integer getCheckRowStatus =
                Integer.parseInt(lastRow.getAttribute("CheckRowStatus").toString());
            String rowKelipatan = lastRowKelipatan.toString();
            //                        System.out.println("lastRowKelipatan "+lastRowKelipatan);
            //                        System.out.println("TipePerhitungan "+TipePerhitungan);
            if (rowKelipatan.equalsIgnoreCase("0") &&
                TipePerhitungan.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                if (lastRowQtyTo.compareTo(maxNumber) == 0) {
                    JSFUtils.addFacesWarningMessage("Nilai \"Qty To\" harus diisi dan kurang dari " +
                                                    maxNumber);
                } else {
                    Row newRow = rsi.createRow();
                    newRow.setNewRowState(Row.STATUS_INITIALIZED);
                    newRow.setAttribute("Uom", uomTar);
                    newRow.setAttribute("QtyFrom", lastRowQtyTo.add(1));
                    newRow.setAttribute("QtyTo", maxNumber);
                    newRow.setAttribute("TipePotongan", tipePotongan);

                    //add row to last index + 1 so it becomes last in the range set
                    rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
                    //make row the current row so it is displayed correctly
                    rsi.setCurrentRow(newRow);
                    newRow.validate();
                    //                    lovTipePerhitungan.setDisabled(true);
                    itqtyFromDisc.setReadOnly(true);
                    //                    AdfFacesContext.getCurrentInstance().addPartialTarget(lovTipePerhitungan);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(itqtyFromDisc);

                }
            } else {
                if (lastRowQtyTo.compareTo(maxNumber) == 0) {
                    JSFUtils.addFacesWarningMessage("Nilai \"Qty To\" harus diisi dan kurang dari " +
                                                    maxNumber);
                } else {
                    Row newRow = rsi.createRow();
                    newRow.setNewRowState(Row.STATUS_INITIALIZED);
                    newRow.setAttribute("Uom", uomTar);
                    newRow.setAttribute("QtyFrom", lastRowQtyTo.add(1));
                    newRow.setAttribute("QtyTo", maxNumber);
                    newRow.setAttribute("Kelipatan", lastRowKelipatan);
                    newRow.setAttribute("TipePerhitungan",
                                        tipeHitungKelipatan);
                    newRow.setAttribute("TipePotongan", tipePotongan);
                    //add row to last index + 1 so it becomes last in the range set
                    rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
                    //make row the current row so it is displayed correctly
                    rsi.setCurrentRow(newRow);
                    newRow.validate();
                    //                    lovTipePerhitungan.setDisabled(true);
                    itqtyFromDisc.setReadOnly(true);
                    //                    AdfFacesContext.getCurrentInstance().addPartialTarget(lovTipePerhitungan);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(itqtyFromDisc);
                }
            }
        } else {
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            newRow.setAttribute("Uom", uomTar);
            newRow.setAttribute("QtyFrom", new Number(1));
            newRow.setAttribute("QtyTo", maxNumber);
            newRow.validate();
        }
    }

    public void setAvgQty(RichInputText avgQty) {
        this.avgQty = avgQty;
    }

    public void setItVariantAddBuy(RichInputText itVariantAddBuy) {
        this.itVariantAddBuy = itVariantAddBuy;
    }

    public RichInputText getItVariantAddBuy() {
        return itVariantAddBuy;
    }

    public RichInputText getAvgQty() {
        return avgQty;
    }

    public void setItProdukAddBuy(RichInputText itProdukAddBuy) {
        this.itProdukAddBuy = itProdukAddBuy;
    }

    public void calcAvgQtyEbs(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
        CallableStatement cst = null;
        BigDecimal responQty = new BigDecimal(0);
        BigDecimal responPrice = new BigDecimal(0);
        String pItemNumber = "";

        AttributeBinding usrTypeCreatorAttr =
            (AttributeBinding)bindings.getControlBinding("PromoProdukId");
        DBSequence ppidSeq = (DBSequence)usrTypeCreatorAttr.getInputValue();

        AttributeBinding uomAttr =
            (AttributeBinding)bindings.getControlBinding("Uom1");
        String pUomPppc = (String)uomAttr.getInputValue();

        AttributeBinding progDaysPppcAttr =
            (AttributeBinding)bindings.getControlBinding("ProgDays");
        oracle.jbo.domain.Number progDaysPppc =
            (oracle.jbo.domain.Number)progDaysPppcAttr.getInputValue();
        Integer pProgDaysPppc = progDaysPppc.getBigDecimalValue().intValue();

        AttributeBinding prodNameAttr =
            (AttributeBinding)bindings.getControlBinding("ProductCombination");
        String prodName =
            (String)prodNameAttr.getInputValue() == null ? "" : (String)prodNameAttr.getInputValue();

        AttributeBinding prodItemCodeAttr =
            (AttributeBinding)bindings.getControlBinding("ProductItemCode");
        String prodItemCode =
            (String)prodItemCodeAttr.getInputValue() == null ? "" :
            (String)prodItemCodeAttr.getInputValue();

        if (prodItemCode.trim().equalsIgnoreCase("")) {
            AttributeBinding prodVarCodeAttr =
                (AttributeBinding)bindings.getControlBinding("ProductVarCode");
            String prodVarCode = (String)prodVarCodeAttr.getInputValue();

            String[] arrayProdVar = prodVarCode.split("\\,", -1);
            for (int i = 0; i < arrayProdVar.length; i++) {
                pItemNumber =
                        pItemNumber + prodName + "." + arrayProdVar[i] + ";";
            }
        } else {
            String[] arrayProdItem = prodItemCode.split("\\,", -1);
            for (int i = 0; i < arrayProdItem.length; i++) {
                pItemNumber = pItemNumber + arrayProdItem[i] + ";";
            }
        }
        /*
        System.out.println("=================================================");
        System.out.println("PPID       : " + ppidSeq.getSequenceNumber());
        System.out.println("ITEM NUMBER: " + pItemNumber);
        System.out.println("UOM PPPC   : " + pUomPppc);
        System.out.println("DAYS PPPC  : " + pProgDaysPppc);
        System.out.println("=================================================");
        */
        try {
            cst =
promoProposalAM.getDBTransaction().createCallableStatement("BEGIN APPS.FCS_PPPC_OVERAGE_QTY ('" +
                                                           ppidSeq.getSequenceNumber() + 
                                                           "', '" +
                                                           pItemNumber +
                                                           "', '" + pUomPppc +
                                                           "', '" +
                                                           pProgDaysPppc +
                                                           "', ?, ?); END;",
                                                           0);
            cst.registerOutParameter(1, Types.NUMERIC);
            cst.registerOutParameter(2, Types.NUMERIC);
            cst.executeUpdate();
            responQty = cst.getBigDecimal(1);
            responPrice = cst.getBigDecimal(2);
        } catch (SQLException e) {
            JSFUtils.addFacesErrorMessage(e.getMessage());
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        avgQty.setSubmittedValue(responQty);

        AdfFacesContext.getCurrentInstance().addPartialTarget(avgQty);
    }

    public RichInputText getItProdukAddBuy() {
        return itProdukAddBuy;
    }

    public void priceListPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        String prodCombItem = "";
        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        AttributeBinding prodCombAttr =
            (AttributeBinding)bindings.getControlBinding("ProductCombination");
        String prodComb = (String)prodCombAttr.getInputValue();
        AttributeBinding promoStartDtAttr =
            (AttributeBinding)bindings.getControlBinding("PeriodeProgFrom");
        String promoStartDt = (String)promoStartDtAttr.getInputValue();
        AttributeBinding promoProdukIdAttr =
            (AttributeBinding)bindings.getControlBinding("PromoProdukId");
        DBSequence promoProdukId =
            (DBSequence)promoProdukIdAttr.getInputValue();

        // Get variant list
        ArrayList<String> prodVariantList = new ArrayList<String>();

        ProdukVariantViewImpl dciterProdVariant =
            (ProdukVariantViewImpl)promoProposalAM.getProdukVariantView1();
        dciterProdVariant.setNamedWhereClauseParam("ppid", promoProdukId);
        dciterProdVariant.executeQuery();

        long rowCountVariant = dciterProdVariant.getEstimatedRowCount();
        if (rowCountVariant > 0) {
            for (Row r : dciterProdVariant.getAllRowsInRange()) {
                String variantCode = (String)r.getAttribute("ProdVariant");
                prodVariantList.add(variantCode);
            }
        }

        // Get item code list
        String prodItemCodeList = "";
        ProdukItemViewImpl dciterProdItem =
            (ProdukItemViewImpl)promoProposalAM.getProdukItemView1();
        dciterProdItem.setNamedWhereClauseParam("ppid", promoProdukId);
        dciterProdItem.executeQuery();

        long rowCountItem = dciterProdItem.getEstimatedRowCount();
        if (rowCountItem > 0) {
            int i = 1;
            for (Row r : dciterProdItem.getAllRowsInRange()) {
                String itemCode = (String)r.getAttribute("ProdItem");
                if (i < rowCountItem) {
                    prodItemCodeList = prodItemCodeList + itemCode + ";";
                } else {
                    prodItemCodeList = prodItemCodeList + itemCode;
                }
                i = i + 1;
            }
        }

        int variantSize = prodVariantList.size();
        /*
        String currVariant = prodVariantList.get(0);
        if ((currVariant.equalsIgnoreCase(variantAll) && rowCountItem > 0) ||
           (!currVariant.equalsIgnoreCase(variantAll) && rowCountItem == 0)) {
        */
        prodCombItem = prodItemCodeList;
        int i = 1;
        for (String varCode : prodVariantList) {
            if (i < variantSize) {
                prodCombItem = prodCombItem + prodComb + "." + varCode + ";";
            } else {
                prodCombItem = prodCombItem + prodComb + "." + varCode;
            }
            i = i + 1;
        }
        /*
        } else {
            //prodCombItem = prodComb + "." + currVariant;
            showPopup("\"Product Name\" pada kombinasi produk harus diisi apabila variant \"ALL\".", potmessage);
        }
        */

        CallableStatement cst = null;
        String Uom = itlovUomTarget.getValue().toString();
        String loggedUserName = userData.getUserNameLogin();
        /*
        System.out.println("\n================  TAB TARGET  ===================\n" +
                "PROD COMB     : " + prodCombItem + "\n" +
                "PPID          : " + promoProdukId.getSequenceNumber() + "\n" +
                "USER NAME     : " + loggedUserName + "\n" +
                "UOM           : " + Uom + "\n" +
                "PROMO START DT: " + promoStartDt.toUpperCase() + "\n" +
                "=================================================");
        */
        if (!prodCombItem.equalsIgnoreCase(null)) {
            try {
                cst =
promoProposalAM.getDBTransaction().createCallableStatement("BEGIN APPS.FCS_PPPC_GET_PRICE_LIST.INSERT_TABLE_PRICE_LIST('" +
                                                           prodCombItem +
                                                           "', '" +
                                                           promoProdukId.getSequenceNumber() +
                                                           "', '" +
                                                           loggedUserName +
                                                           "', '" + Uom +
                                                           "', '" +
                                                           promoStartDt.toUpperCase() +
                                                           "'); END;", 0);
                cst.executeUpdate();
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage(e.getMessage());
            } finally {
                if (cst != null) {
                    try {
                        cst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePriceList");
        operationBinding.execute();
    }

    public void setItBonusVariant(RichInputText itBonusVariant) {
        this.itBonusVariant = itBonusVariant;
    }

    public void custTypeReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();

        AttributeBinding exclCustByAttr =
            (AttributeBinding)bindings.getControlBinding("ExclCustBy");
        exclCustByAttr.setInputValue(null);

        AttributeBinding promoProdukIdAttr =
            (AttributeBinding)bindings.getControlBinding("PromoProdukId");
        DBSequence promoProdukId =
            (DBSequence)promoProdukIdAttr.getInputValue();
        /*
        DCIteratorBinding dciter =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        PromoProdukViewImpl promoProdView =
            (PromoProdukViewImpl)dciter.getViewObject();
        promoProdView.setWhereClause("PromoProduk.PROMO_PRODUK_ID = " +
                                     df.format(promoProdukId.getValue()));
        promoProdView.executeQuery();
        */
        itlovExclCustBy.setValue(null);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itlovExclCustBy);
    }

    public RichInputText getItBonusVariant() {
        return itBonusVariant;
    }

    public RichSelectOneChoice getItLovProposalType() {
        return itLovProposalType;
    }

    public void setItLovProposalType(RichSelectOneChoice itLovProposalType) {
        this.itLovProposalType = itLovProposalType;
    }

    public void setItlovExclCustBy(RichInputListOfValues itlovExclCustBy) {
        this.itlovExclCustBy = itlovExclCustBy;
    }

    public RichInputListOfValues getItlovExclCustBy() {
        return itlovExclCustBy;
    }

    public void newProposalEvent(ActionEvent actionEvent) {
        boolean canCreateNew = true;
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String usrDivId = userData.getUserDivision();
        String usrType = userData.getUserType();
        String usrCustomer =
            userData.getUserCustomer() == null ? "" : userData.getUserCustomer();

        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dciterProposal =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        for (Row proposalRow : dciterProposal.getAllRowsInRange()) {
            Integer rowStatus =
                (Integer)proposalRow.getAttribute("CheckRowStatus");
            if (rowStatus == 0) {
                canCreateNew = false;
            }
        }

        if (canCreateNew) {
            //Set to DRAFT filter mode
            DCIteratorBinding parentIter =
                (DCIteratorBinding)bindings.get("ProposalView1Iterator");
            ProposalViewImpl propVo =
                (ProposalViewImpl)parentIter.getViewObject();
            //View Criteria without bind variable
            ViewCriteria vc = propVo.getViewCriteria("ProposalDraftVC");
            propVo.applyViewCriteria(vc);
            propVo.executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);

            RowSetIterator rsi = dciterProposal.getRowSetIterator();
            //Row lastRow = rsi.last(); //ERROR: If using view page ranging to increase performance
            //int lastRowIndex = rsi.getRangeIndexOf(lastRow); //ERROR: If using view page ranging to increase performance
            int firstRowIndex = 0;
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);

            if (usrDivId.equalsIgnoreCase("NONFOOD")) {
                newRow.setAttribute("ProposalType", "NONFOOD");
            } else if (usrDivId.equalsIgnoreCase("FOOD")) {
                newRow.setAttribute("ProposalType", "FOOD");
            } else {
                newRow.setAttribute("ProposalType", null);
            }

            if (usrCustomer.equalsIgnoreCase(userCustInvalid)) {
                JSFUtils.addFacesWarningMessage("Anda tidak memiliki hak akses memilih customer.");
            }

            newRow.setAttribute("UserTypeCreator", usrType);

            //add row to last index + 1 so it becomes last in the range set
            //rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow); //ERROR: If using view page ranging to increase performance
            rsi.insertRowAtRangeIndex(firstRowIndex, newRow);
            //make row the current row so it is displayed correctly
            rsi.setCurrentRow(newRow);

            //Set filter mode
            ADFContext adfCtx = ADFContext.getCurrent();
            Map sessionScope = adfCtx.getSessionScope();
            sessionScope.put("filterMode", "DRAFT");

            switchMain.setFacetName("dataavailable");
            switchButtonMain.setFacetName("dataavailable");
            AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
            AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        } else {
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>Masih ada proposal baru yang belum dilengkapi dan belum tersimpan.</p>");
            message.append("<p>Proses penambahan proposal baru tidak dapat dilanjutkan.</p>");
            message.append("</body></html>");
            JSFUtils.addFacesWarningMessage(message.toString());
        }
    }

    public void setSelectItSocProposalType(UISelectItems selectItSocProposalType) {
        this.selectItSocProposalType = selectItSocProposalType;
    }

    public UISelectItems getSelectItSocProposalType() {
        return selectItSocProposalType;
    }

    public void setCustomLovproposalType(RichSelectOneChoice customLovproposalType) {
        this.customLovproposalType = customLovproposalType;
    }

    public RichSelectOneChoice getCustomLovproposalType() {
        return customLovproposalType;
    }

    public void setListProposalType(ArrayList listProposalType) {
        this.listProposalType = listProposalType;
    }

    public ArrayList getListProposalType() {
        return listProposalType;
    }

    public void setItLovProdCategory(RichInputListOfValues itLovProdCategory) {
        this.itLovProdCategory = itLovProdCategory;
    }

    public RichInputListOfValues getItLovProdCategory() {
        return itLovProdCategory;
    }

    public void setItCategory(RichOutputText itCategory) {
        this.itCategory = itCategory;
    }

    public RichOutputText getItCategory() {
        return itCategory;
    }

    public void setSocLovDiv(RichSelectOneChoice socLovDiv) {
        this.socLovDiv = socLovDiv;
    }

    public RichSelectOneChoice getSocLovDiv() {
        return socLovDiv;
    }

    public void setSwitchExclCust(UIXSwitcher switchExclCust) {
        this.switchExclCust = switchExclCust;
    }

    public UIXSwitcher getSwitchExclCust() {
        return switchExclCust;
    }

    public void itlovExcludePilih(ValueChangeEvent valueChangeEvent) {
        BindingContainer bindings = this.getBindings();
        AttributeBinding usrTypeCreatorAttr =
            (AttributeBinding)bindings.getControlBinding("UserTypeCreator");
        String usrTypeCreator = (String)usrTypeCreatorAttr.getInputValue();

        String chgNewVal = (String)valueChangeEvent.getNewValue();
        if (chgNewVal.equalsIgnoreCase(prodRegion) &&
            usrTypeCreator.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();


        } else if (chgNewVal.equalsIgnoreCase(prodArea) &&
                   usrTypeCreator.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodLocation) &&
                   usrTypeCreator.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodCustType) &&
                   usrTypeCreator.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodCustGroup) &&
                   usrTypeCreator.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(prodCustomer) &&
                   usrTypeCreator.equalsIgnoreCase(userHo)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(propRegion) &&
                   usrTypeCreator.equalsIgnoreCase(userArea)) {
            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclPropCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclPropCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclPropCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : rsiCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclPropCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(propArea) &&
                   usrTypeCreator.equalsIgnoreCase(userArea)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclPropCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclPropCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclPropCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : rsiCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclPropCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(propLocation) &&
                   usrTypeCreator.equalsIgnoreCase(userArea)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclPropCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclPropCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclPropCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclPropCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : rsiCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclPropCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(propCustType) &&
                   usrTypeCreator.equalsIgnoreCase(userArea)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclPropCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclPropCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclPropCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : rsiCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclPropCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(propCustGroup) &&
                   usrTypeCreator.equalsIgnoreCase(userArea)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclPropCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclPropCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclPropCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclPropCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (chgNewVal.equalsIgnoreCase(propCustomer) &&
                   usrTypeCreator.equalsIgnoreCase(userArea)) {
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclPropCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclPropCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclPropCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclPropCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : rsiCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

        } else {
            JSFUtils.addFacesErrorMessage("Error",
                                          "\"Tipe Customer\" tidak dikenali.");
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchExclCust);
    }

    public void setPgMainDetail(RichPanelSplitter pgMainDetail) {
        this.pgMainDetail = pgMainDetail;
    }

    public RichPanelSplitter getPgMainDetail() {
        return pgMainDetail;
    }

    public void setUserDivision(String userDivision) {
        this.userDivision = userDivision;
    }

    public String getUserDivision() {
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String usrDivId = userData.getUserDivision();
        Integer propTypeIdx = (Integer)itLovProposalType.getValue();
        DCIteratorBinding dciterProposal =
            ADFUtils.findIterator("ProposalView1Iterator");
        if (dciterProposal.getEstimatedRowCount() > 0) {
            if ((usrDivId.equalsIgnoreCase("NONFOOD") &&
                 propTypeIdx.compareTo(idxNonFood) == 0) ||
                (usrDivId.equalsIgnoreCase("NONFOOD") &&
                 propTypeIdx.compareTo(idxNonFood) != 0)) {
                itLovProposalType.setSubmittedValue("1");
                AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                userDivision = "NONFOOD";
            } else if ((usrDivId.equalsIgnoreCase("FOOD") &&
                        propTypeIdx.compareTo(idxFood) == 0) ||
                       (usrDivId.equalsIgnoreCase("FOOD") &&
                        propTypeIdx.compareTo(idxFood) != 0)) {
                itLovProposalType.setSubmittedValue("0");
                AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                userDivision = "FOOD";
            } else if (usrDivId.equalsIgnoreCase("ALL") &&
                       propTypeIdx.compareTo(idxNonFood) == 0) {
                itLovProposalType.setSubmittedValue("1");
                AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                userDivision = "NONFOOD";
            } else if (usrDivId.equalsIgnoreCase("ALL") &&
                       propTypeIdx.compareTo(idxFood) == 0) {
                itLovProposalType.setSubmittedValue("0");
                AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                userDivision = "FOOD";
            } else {
                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                RowSetIterator rsiPromoProduk =
                    dciterPromoProduk.getRowSetIterator();
                if (dciterPromoProduk.getEstimatedRowCount() > 0) {
                    Row promoProdukRow = rsiPromoProduk.first();
                    String kodeCategory =
                        (String)promoProdukRow.getAttribute("ProductCategory");
                    if (kodeCategory.equalsIgnoreCase(prodCatCodeFood)) {
                        itLovProposalType.setSubmittedValue("0");
                        AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                        userDivision = "FOOD";
                    } else {
                        itLovProposalType.setSubmittedValue("1");
                        AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                        userDivision = "NONFOOD";
                    }
                } else {
                    itLovProposalType.setSubmittedValue("0");
                    AdfFacesContext.getCurrentInstance().addPartialTarget(itLovProposalType);
                    userDivision = "FOOD";
                }
            }
        }
        return userDivision;
    }

    public void refreshOntop(ValueChangeEvent valueChangeEvent) {
        String socType = socTypePotongan.getValue().toString();
        String socTipeHitung = lovTipePerhitungan.getValue().toString();

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row row = dciterTarget.getCurrentRow();
        BigDecimal ontop = BigDecimal.ZERO;
        BigDecimal rOntop = BigDecimal.ZERO;
        BigDecimal maxOntop = BigDecimal.ZERO;
        BigDecimal RasioOntop = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;
        Number qty =
            (Number)row.getAttribute("Qty") == null ? new Number(0) : (Number)row.getAttribute("Qty");
        Number value =
            (Number)row.getAttribute("Value") == null ? new Number(0) :
            (Number)row.getAttribute("Value");
        Number price =
            (Number)row.getAttribute("Price") == null ? new Number(0) :
            (Number)row.getAttribute("Price");

        if (value.compareTo(zeroNum) < 0 || value.compareTo(zeroNum) > 0) {

            if (socType.equalsIgnoreCase(tipePotonganPercent)) {
                if (socTipeHitung.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                    rOntop =
                            new BigDecimal(rowOntop.getValue().toString().replaceAll(",",
                                                                                     ""));
                    String rasio =
                        otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                           null ? "0" :
                                                           otRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    ontop =
                            (value.multiply(rOntop)).getBigDecimalValue().divide(bdHundred).setScale(2,
                                                                                                     RoundingMode.HALF_UP);
                    otOnTop.setSubmittedValue(ontop);

                    RasioOntop =
                            ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                          RoundingMode.HALF_UP);
                    //                        ontop.divide(value.getBigDecimalValue()).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                    String rasOntop = RasioOntop.toString();
                    //            System.out.println("rasOntop = "+rasOntop);
                    otRasioOntop.setSubmittedValue(rasOntop);
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(total);
                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscOnTop", ontop);
                    r.setAttribute("DiscRasioOnTop", rasOntop);
                    r.setAttribute("DiscRasioTotal1", total);
                    //dciterPromoProduk.getDataControl().commitTransaction();
                } else if (socTipeHitung.equalsIgnoreCase(tipeHitungKelipatan)) {
                    // BY PERCENT ON TOP - KELIPATAN
                    BigDecimal newChangedOnTopValue =
                        new BigDecimal(valueChangeEvent.getNewValue() == "" ?
                                       "0" :
                                       valueChangeEvent.getNewValue() == null ?
                                       "0" :
                                       valueChangeEvent.getNewValue().toString());

                    Number kelipatanVal =
                        itKelipatanDisc.getValue() == "" ? new Number(0) :
                        itKelipatanDisc.getValue() == null ? new Number(0) :
                        (Number)itKelipatanDisc.getValue();
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY            : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN      : " + kelipatanVal.getBigDecimalValue());
                    System.out.println("PERCENT OT DISC: " + newChangedOnTopValue);
                    System.out.println("PRICE          : " + price.getBigDecimalValue());
                    System.out.println("-------------------------------------");
                    */
                    BigDecimal roundTgtDivKelipatan =
                        qty.getBigDecimalValue().divide(kelipatanVal.getBigDecimalValue(),
                                                        0, RoundingMode.DOWN);
                    BigDecimal priceMulPercentDisc =
                        price.getBigDecimalValue().multiply(newChangedOnTopValue.divide(new BigDecimal(100)));
                    ontop =
                            roundTgtDivKelipatan.multiply(kelipatanVal.getBigDecimalValue()).multiply(priceMulPercentDisc);
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatan);
                    System.out.println("PRICE PERCENT   : " + priceMulPercentDisc);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL ONTOP AMOUNT: " + ontop);
                    System.out.println("=====================================");
                    */
                    otOnTop.setSubmittedValue(ontop);
                    RasioOntop =
                            ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                          RoundingMode.HALF_UP);
                    String rasOntop = RasioOntop.toString();
                    otRasioOntop.setSubmittedValue(rasOntop);
                    String rasio =
                        otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                           null ? "0" :
                                                           otRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(total);
                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscOnTop", ontop);
                    r.setAttribute("DiscRasioOnTop", rasOntop);
                    r.setAttribute("DiscRasioTotal1", total);
                    //dciterPromoProduk.getDataControl().commitTransaction();
                }

                AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            } else {
                if (socTipeHitung.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                    String discId = "";
                    DCBindingContainer bindings =
                        (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
                    DCIteratorBinding dcItteratorBindings =
                        bindings.findIteratorBinding("DiscountView1Iterator");
                    ViewObject voTableData =
                        dcItteratorBindings.getViewObject();
                    Row rowSelected = voTableData.getCurrentRow();
                    if (rowSelected.getAttribute("DiscountId") != null) {
                        discId =
                                rowSelected.getAttribute("DiscountId").toString();
                    }
                    DCIteratorBinding dciterDiscount1 =
                        ADFUtils.findIterator("DiscountView1Iterator");
                    for (Row r : dciterDiscount1.getAllRowsInRange()) {
                        String discIdComp =
                            r.getAttribute("DiscountId").toString();
                        if (!discId.equalsIgnoreCase(discIdComp)) {
                            String valueTop =
                                r.getAttribute("DiscNonYearly") == null ? "0" :
                                r.getAttribute("DiscNonYearly") == "" ? "0" :
                                r.getAttribute("DiscNonYearly").toString().replaceAll(",",
                                                                                      "");
                            BigDecimal newChangedOnTopValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            BigDecimal ontopValue =
                                new BigDecimal(valueTop) == null ?
                                new BigDecimal(0) : new BigDecimal(valueTop);

                            if (maxOntop.compareTo(ontopValue) < 0) {
                                maxOntop = ontopValue;
                            }

                            if (maxOntop.compareTo(newChangedOnTopValue) < 0) {
                                maxOntop = newChangedOnTopValue;
                            }
                        } else {
                            BigDecimal newChangedOnTopValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            if (maxOntop.compareTo(newChangedOnTopValue) < 0) {
                                maxOntop = newChangedOnTopValue;
                            }
                        }
                    }
                    ontop = qty.getBigDecimalValue().multiply(maxOntop);
                    otOnTop.setSubmittedValue(ontop);
                    RasioOntop =
                            ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                          RoundingMode.HALF_UP);
                    String rasOntop = RasioOntop.toString();
                    otRasioOntop.setSubmittedValue(rasOntop);
                    String rasio =
                        otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                           null ? "0" :
                                                           otRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(total);
                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscOnTop", ontop);
                    r.setAttribute("DiscRasioOnTop", rasOntop);
                    r.setAttribute("DiscRasioTotal1", total);
                    //dciterPromoProduk.getDataControl().commitTransaction();
                } else if (socTipeHitung.equalsIgnoreCase(tipeHitungKelipatan)) {
                    // BY AMOUNT ON TOP - KELIPATAN
                    BigDecimal newChangedOnTopValue =
                        new BigDecimal(valueChangeEvent.getNewValue() == "" ?
                                       "0" :
                                       valueChangeEvent.getNewValue() == null ?
                                       "0" :
                                       valueChangeEvent.getNewValue().toString());

                    Number kelipatanVal =
                        itKelipatanDisc.getValue() == "" ? new Number(0) :
                        itKelipatanDisc.getValue() == null ? new Number(0) :
                        (Number)itKelipatanDisc.getValue();
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY           : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN     : " + kelipatanVal.getBigDecimalValue());
                    System.out.println("AMOUNT OT DISC: " + newChangedOnTopValue);
                    System.out.println("-------------------------------------");
                    */
                    try {
                        BigDecimal roundTgtDivKelipatan =
                            qty.getBigDecimalValue().divide(kelipatanVal.getBigDecimalValue(),
                                                            0,
                                                            RoundingMode.DOWN);
                        ontop =
                                roundTgtDivKelipatan.multiply(kelipatanVal.getBigDecimalValue()).multiply(newChangedOnTopValue);
                    } catch (java.lang.ArithmeticException ae) {
                        JSFUtils.addFacesWarningMessage("Nilai kelipatan harus diisi.");
                    } catch (Exception e) {
                        JSFUtils.addFacesErrorMessage("Error",
                                                      e.getLocalizedMessage());
                    }
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatan);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL ONTOP AMOUNT: " + ontop);
                    System.out.println("=====================================");
                    */
                    otOnTop.setSubmittedValue(ontop);
                    RasioOntop =
                            ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                          RoundingMode.HALF_UP);
                    String rasOntop = RasioOntop.toString();
                    otRasioOntop.setSubmittedValue(rasOntop);
                    String rasio =
                        otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                           null ? "0" :
                                                           otRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(total);
                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscOnTop", ontop);
                    r.setAttribute("DiscRasioOnTop", rasOntop);
                    r.setAttribute("DiscRasioTotal1", total);
                    //dciterPromoProduk.getDataControl().commitTransaction();
                }

                AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            }
            //            AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
        } else {
            JSFUtils.addFacesWarningMessage("Nilai \"Qty. Target\", \"Harga\"  dan nilai \"Tdk Potong Budget / On Top\" tidak boleh 0 (nol) atau kosong.");
        }
    }

    public void refreshMf(ValueChangeEvent valueChangeEvent) {
        String socType = socTypePotongan.getValue().toString();
        String socTipeHitung = lovTipePerhitungan.getValue().toString();

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row row = dciterTarget.getCurrentRow();
        BigDecimal mf = BigDecimal.ZERO;
        BigDecimal rMf = BigDecimal.ZERO;
        BigDecimal maxMf = BigDecimal.ZERO;
        BigDecimal RasioMf = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;
        Number qty =
            (Number)row.getAttribute("Qty") == null ? new Number(0) : (Number)row.getAttribute("Qty");
        Number value =
            (Number)row.getAttribute("Value") == null ? new Number(0) :
            (Number)row.getAttribute("Value");
        Number price =
            (Number)row.getAttribute("Price") == null ? new Number(0) :
            (Number)row.getAttribute("Price");

        if (value.compareTo(zeroNum) < 0 || value.compareTo(zeroNum) > 0) {

            if (socType.equalsIgnoreCase(tipePotonganPercent)) {
                if (socTipeHitung.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                    rMf =
new BigDecimal(rowMf.getValue().toString().replaceAll(",", ""));
                    mf =
 ((value.multiply(rMf)).getBigDecimalValue()).divide(bdHundred).setScale(2,
                                                                         RoundingMode.HALF_UP);
                    otMF.setSubmittedValue(mf);
                    RasioMf =
                            mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                       RoundingMode.HALF_UP);
                    String rasMf = RasioMf.toString();
                    otRasioMf.setSubmittedValue(rasMf);
                    rasioT =
                            new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                         "").replaceAll("%",
                                                                                                        ""));
                    rasioTotal = RasioMf.add(rasioT);
                    String Total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(Total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscMf", mf);
                    r.setAttribute("DiscRasioMf", rasMf);
                    r.setAttribute("DiscRasioTotal1", Total);
                    // dciterPromoProduk.getDataControl().commitTransaction();
                } else if (socTipeHitung.equalsIgnoreCase(tipeHitungKelipatan)) {
                    // BY PERCENT MF - KELIPATAN
                    BigDecimal newChangedMfValue =
                        new BigDecimal(valueChangeEvent.getNewValue() == "" ?
                                       "0" :
                                       valueChangeEvent.getNewValue() == null ?
                                       "0" :
                                       valueChangeEvent.getNewValue().toString());

                    Number kelipatanVal =
                        itKelipatanDisc.getValue() == "" ? new Number(0) :
                        itKelipatanDisc.getValue() == null ? new Number(0) :
                        (Number)itKelipatanDisc.getValue();
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY            : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN      : " + kelipatanVal.getBigDecimalValue());
                    System.out.println("PERCENT MF DISC: " + newChangedMfValue);
                    System.out.println("PRICE          : " + price.getBigDecimalValue());
                    System.out.println("-------------------------------------");
                    */
                    BigDecimal roundTgtDivKelipatan =
                        qty.getBigDecimalValue().divide(kelipatanVal.getBigDecimalValue(),
                                                        0, RoundingMode.DOWN);
                    BigDecimal priceMulPercentDisc =
                        price.getBigDecimalValue().multiply(newChangedMfValue.divide(new BigDecimal(100)));
                    mf =
 (roundTgtDivKelipatan.multiply(kelipatanVal.getBigDecimalValue())).multiply(priceMulPercentDisc);
                    /*
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatan);
                    System.out.println("PRICE PERCENT   : " + priceMulPercentDisc);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL MF AMOUNT   : " + mf);
                    System.out.println("=====================================");
                    */
                    otOnTop.setSubmittedValue(mf);
                    otMF.setSubmittedValue(mf);
                    RasioMf =
                            mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                       RoundingMode.HALF_UP);
                    String rasMf = RasioMf.toString();
                    otRasioMf.setSubmittedValue(rasMf);
                    rasioT =
                            new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                         "").replaceAll("%",
                                                                                                        ""));
                    rasioTotal = RasioMf.add(rasioT);
                    String Total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(Total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscMf", mf);
                    r.setAttribute("DiscRasioMf", rasMf);
                    r.setAttribute("DiscRasioTotal1", Total);
                    // dciterPromoProduk.getDataControl().commitTransaction();
                }

                AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            } else {
                if (socTipeHitung.equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                    String discId = "";
                    DCBindingContainer bindings =
                        (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
                    DCIteratorBinding dcItteratorBindings =
                        bindings.findIteratorBinding("DiscountView1Iterator");
                    ViewObject voTableData =
                        dcItteratorBindings.getViewObject();

                    Row rowSelected = voTableData.getCurrentRow();
                    if (rowSelected.getAttribute("DiscountId") != null) {
                        discId =
                                rowSelected.getAttribute("DiscountId").toString();
                    }
                    DCIteratorBinding dciterDiscount1 =
                        ADFUtils.findIterator("DiscountView1Iterator");
                    for (Row r : dciterDiscount1.getAllRowsInRange()) {
                        String discIdComp =
                            r.getAttribute("DiscountId").toString();
                        if (!discId.equalsIgnoreCase(discIdComp)) {
                            String valueMF =
                                r.getAttribute("DiscYearly") == null ? "0" :
                                r.getAttribute("DiscYearly") == "" ? "0" :
                                r.getAttribute("DiscYearly").toString().replaceAll(",",
                                                                                   "");
                            BigDecimal mfValue =
                                new BigDecimal(valueMF) == null ?
                                new BigDecimal(0) : new BigDecimal(valueMF);
                            BigDecimal newChangedMfValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            if (maxMf.compareTo(mfValue) < 0) {
                                maxMf = mfValue;
                            }
                            if (maxMf.compareTo(newChangedMfValue) < 0) {
                                maxMf = newChangedMfValue;
                            }
                        } else {
                            BigDecimal newChangedMfValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            if (maxMf.compareTo(newChangedMfValue) < 0) {
                                maxMf = newChangedMfValue;
                            }
                        }
                    }
                    mf = qty.getBigDecimalValue().multiply(maxMf);
                    otMF.setSubmittedValue(mf);
                    RasioMf =
                            mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                       RoundingMode.HALF_UP);
                    //                    mf.divide(value.getBigDecimalValue(), 3, RoundingMode.HALF_UP).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                    String rasMf = RasioMf.toString();
                    otRasioMf.setSubmittedValue(rasMf);
                    rasioT =
                            new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                         "").replaceAll("%",
                                                                                                        ""));
                    rasioTotal = RasioMf.add(rasioT);
                    String Total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(Total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscMf", mf);
                    r.setAttribute("DiscRasioMf", rasMf);
                    r.setAttribute("DiscRasioTotal1", Total);
                    // dciterPromoProduk.getDataControl().commitTransaction();
                } else if (socTipeHitung.equalsIgnoreCase(tipeHitungKelipatan)) {
                    // BY AMOUNT MF - KELIPATAN
                    BigDecimal newChangedMfValue =
                        new BigDecimal(valueChangeEvent.getNewValue() == "" ?
                                       "0" :
                                       valueChangeEvent.getNewValue() == null ?
                                       "0" :
                                       valueChangeEvent.getNewValue().toString());

                    Number kelipatanVal =
                        itKelipatanDisc.getValue() == "" ? new Number(0) :
                        itKelipatanDisc.getValue() == null ? new Number(0) :
                        (Number)itKelipatanDisc.getValue();
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY           : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN     : " + kelipatanVal.getBigDecimalValue());
                    System.out.println("AMOUNT MF DISC: " + newChangedMfValue);
                    System.out.println("PRICE         : " + price.getBigDecimalValue());
                    System.out.println("-------------------------------------");
                    */
                    try {
                        BigDecimal roundTgtDivKelipatan =
                            qty.getBigDecimalValue().divide(kelipatanVal.getBigDecimalValue(),
                                                            0,
                                                            RoundingMode.DOWN);
                        mf =
 (roundTgtDivKelipatan.multiply(kelipatanVal.getBigDecimalValue())).multiply(newChangedMfValue);
                    } catch (java.lang.ArithmeticException ae) {
                        JSFUtils.addFacesWarningMessage("Nilai kelipatan harus diisi.");
                    } catch (Exception e) {
                        JSFUtils.addFacesErrorMessage("Error",
                                                      e.getLocalizedMessage());
                    }
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatan);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL MF AMOUNT: " + mf);
                    System.out.println("=====================================");
                    */
                    otMF.setSubmittedValue(mf);
                    RasioMf =
                            mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                       RoundingMode.HALF_UP);
                    //                    mf.divide(value.getBigDecimalValue(), 3, RoundingMode.HALF_UP).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                    String rasMf = RasioMf.toString();
                    otRasioMf.setSubmittedValue(rasMf);
                    rasioT =
                            new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                         "").replaceAll("%",
                                                                                                        ""));
                    rasioTotal = RasioMf.add(rasioT);
                    String Total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(Total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscMf", mf);
                    r.setAttribute("DiscRasioMf", rasMf);
                    r.setAttribute("DiscRasioTotal1", Total);
                    // dciterPromoProduk.getDataControl().commitTransaction();
                }

                AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            }
            //        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
        } else {
            JSFUtils.addFacesWarningMessage("Nilai \"Qty. Target\", \"Harga\"  dan nilai \"Potong Budget / MF\" tidak boleh 0 (nol) atau kosong.");
        }
    }

    public void setTableListPotongan(RichTable tableListPotongan) {
        this.tableListPotongan = tableListPotongan;
    }

    public RichTable getTableListPotongan() {
        return tableListPotongan;
    }

    public void approvalHistPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings = this.getBindings();
        /*
        DCIteratorBinding dciter =
            ADFUtils.findIterator("DocApprovalView1Iterator");
        dciter.executeQuery();
        */

        try {
            OperationBinding refreshAprvlHist =
                bindings.getOperationBinding("RefreshApprovalHistory");
            refreshAprvlHist.execute();
        } catch (JboException e) {
            JSFUtils.addFacesErrorMessage("Error", e.getBaseMessage());
        }
    }

    public void setSocTypePotongan(RichInputListOfValues socTypePotongan) {
        this.socTypePotongan = socTypePotongan;
    }

    public RichInputListOfValues getSocTypePotongan() {
        return socTypePotongan;
    }

    public void setOtOnTop(RichInputText otOnTop) {
        this.otOnTop = otOnTop;
    }

    public RichInputText getOtOnTop() {
        return otOnTop;
    }

    public void setOtMF(RichInputText otMF) {
        this.otMF = otMF;
    }

    public RichInputText getOtMF() {
        return otMF;
    }

    public void setRowOntop(RichInputText rowOntop) {
        this.rowOntop = rowOntop;
    }

    public RichInputText getRowOntop() {
        return rowOntop;
    }

    public void setRowMf(RichInputText rowMf) {
        this.rowMf = rowMf;
    }

    public RichInputText getRowMf() {
        return rowMf;
    }

    public void setValueMf(BigDecimal valueMf) {
        this.valueMf = valueMf;
    }

    public BigDecimal getValueMf() {
        return valueMf;
    }

    public void setOtRasioOntop(RichInputText otRasioOntop) {
        this.otRasioOntop = otRasioOntop;
    }

    public RichInputText getOtRasioOntop() {
        return otRasioOntop;
    }

    public void setOtRasioMf(RichInputText otRasioMf) {
        this.otRasioMf = otRasioMf;
    }

    public RichInputText getOtRasioMf() {
        return otRasioMf;
    }

    public void setOtRasioTotal(RichInputText otRasioTotal) {
        this.otRasioTotal = otRasioTotal;
    }

    public RichInputText getOtRasioTotal() {
        return otRasioTotal;
    }

    public void removeRowPotongan(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("DiscountView1Iterator");
        RowSetIterator rsi = dcItteratorBindings.getRowSetIterator();
        Integer currRowIndex = rsi.getCurrentRowIndex() + 1;
        Row lastRow = rsi.last();
        Integer fetchedRowCount = rsi.getFetchedRowCount();

        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("DiscountId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("DiscOnTop", 0);
                r.setAttribute("DiscRasioOnTop", 0);
                r.setAttribute("DiscMf", 0);
                r.setAttribute("DiscRasioMf", 0);
                r.setAttribute("DiscRasioTotal1", 0);
                dciterPromoProduk.getDataControl().commitTransaction();
                otOnTop.setSubmittedValue(0);
                otRasioOntop.setSubmittedValue(0);
                otRasioTotal.setSubmittedValue(0);
                otMF.setSubmittedValue(0);
                otRasioMf.setSubmittedValue(0);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
            }
        } else {
            if (fetchedRowCount == currRowIndex) {
                ViewObject voTableData = dcItteratorBindings.getViewObject();
                Row rowSelected = voTableData.getCurrentRow();
                if (rowSelected.getAttribute("DiscountId") != null) {
                    voTableData.removeCurrentRow();
                    OperationBinding operation =
                        (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                    operation.execute();
                }
                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                DCIteratorBinding dciterDiscount =
                    ADFUtils.findIterator("DiscountView1Iterator");
                BigDecimal totalMf = BigDecimal.ZERO;
                BigDecimal totalOntop = BigDecimal.ZERO;
                for (Row er : dciterDiscount.getAllRowsInRange()) {
                    String valueMF = null;
                    try {
                        valueMF =
                                er.getAttribute("DiscYearly").toString().replaceAll(",",
                                                                                    "");
                    } catch (Exception e) {
                        valueMF = null;
                    }

                    String valueTop = null;
                    try {
                        valueTop =
                                er.getAttribute("DiscNonYearly").toString().replaceAll(",",
                                                                                       "");
                    } catch (Exception e) {
                        valueTop = null;
                    }

                    BigDecimal ontopValue =
                        valueTop == null ? new BigDecimal(0) :
                        new BigDecimal(valueTop);
                    BigDecimal mfValue =
                        valueMF == null ? new BigDecimal(0) : new BigDecimal(valueMF);
                    totalMf = totalMf.add(mfValue);
                    totalOntop = totalOntop.add(ontopValue);
                }
                DCIteratorBinding dciterTarget =
                    ADFUtils.findIterator("TargetView1Iterator");
                Row row = dciterTarget.getCurrentRow();
                BigDecimal mf = BigDecimal.ZERO;
                BigDecimal rMf = BigDecimal.ZERO;
                BigDecimal RasioMf = BigDecimal.ZERO;
                BigDecimal rasioTotal = BigDecimal.ZERO;
                BigDecimal rasioT = BigDecimal.ZERO;
                BigDecimal ontop = BigDecimal.ZERO;
                BigDecimal rOntop = BigDecimal.ZERO;
                BigDecimal RasioOntop = BigDecimal.ZERO;
                Number qty =
                    (Number)row.getAttribute("Qty") == null ? new Number(0) :
                    (Number)row.getAttribute("Qty");
                Number value =
                    (Number)row.getAttribute("Value") == null ? new Number(0) :
                    (Number)row.getAttribute("Value");

                DCIteratorBinding dciterDiscountTgetTPot =
                    ADFUtils.findIterator("DiscountView1Iterator");
                for (Row ere : dciterDiscountTgetTPot.getAllRowsInRange()) {
                    String typePot =
                        ere.getAttribute("TipePotongan").toString().replaceAll(",",
                                                                               "");
                    if (typePot.equalsIgnoreCase(tipePotonganPercent)) {
                        rMf = totalMf;
                        mf =
 (value.multiply(rMf)).getBigDecimalValue().divide(bdHundred).setScale(2,
                                                                       RoundingMode.HALF_UP);
                        otMF.setSubmittedValue(mf);
                        RasioMf =
                                mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                           RoundingMode.HALF_UP);
                        //                                mf.divide(value.getBigDecimalValue(), 3, RoundingMode.HALF_UP).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                        String rasMf = RasioMf.toString();
                        otRasioMf.setSubmittedValue(rasMf);
                        rasioT =
                                new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                             "").replaceAll("%",
                                                                                                            ""));
                        rasioTotal = RasioMf.add(rasioT);
                        String Total = rasioTotal.toString();
                        otRasioTotal.setSubmittedValue(Total);

                        rOntop = totalOntop;
                        String rasio =
                            otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                               null ? "0" :
                                                               otRasioMf.getValue().toString();
                        rasioT =
                                new BigDecimal(rasio.toString().replaceAll(" ",
                                                                           "").replaceAll("%",
                                                                                          ""));
                        ontop =
                                (value.multiply(rOntop)).getBigDecimalValue().divide(bdHundred).setScale(2,
                                                                                                         RoundingMode.HALF_UP);
                        otOnTop.setSubmittedValue(ontop);
                        RasioOntop =
                                ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                              RoundingMode.HALF_UP);
                        //                                ontop.divide(value.getBigDecimalValue(), 3,
                        //                                             RoundingMode.HALF_UP).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                        String rasOntop = RasioOntop.toString();
                        otRasioOntop.setSubmittedValue(rasOntop);

                        r.setAttribute("DiscOnTop", ontop);
                        r.setAttribute("DiscRasioOnTop", rasOntop);
                        r.setAttribute("DiscRasioTotal1", Total);
                        r.setAttribute("DiscMf", mf);
                        r.setAttribute("DiscRasioMf", rasMf);

                        dciterPromoProduk.getDataControl().commitTransaction();

                        AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);

                    } else {
                        ontop = qty.getBigDecimalValue().multiply(totalOntop);
                        otOnTop.setSubmittedValue(ontop);
                        RasioOntop =
                                ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                              RoundingMode.HALF_UP);
                        String rasOntop = RasioOntop.toString();

                        otRasioOntop.setSubmittedValue(rasOntop);
                        String rasio =
                            otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                               null ? "0" :
                                                               otRasioMf.getValue().toString();
                        rasioT =
                                new BigDecimal(rasio.toString().replaceAll(" ",
                                                                           "").replaceAll("%",
                                                                                          ""));
                        rasioTotal = RasioOntop.add(rasioT);
                        String total = rasioTotal.toString();
                        otRasioTotal.setSubmittedValue(total);

                        mf = qty.getBigDecimalValue().multiply(totalMf);
                        otMF.setSubmittedValue(mf);
                        RasioMf =
                                mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                           RoundingMode.HALF_UP);
                        //                                mf.divide(value.getBigDecimalValue(), 3, RoundingMode.HALF_UP).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                        String rasMf = RasioMf.toString();
                        otRasioMf.setSubmittedValue(rasMf);

                        r.setAttribute("DiscOnTop", ontop);
                        r.setAttribute("DiscRasioOnTop", rasOntop);
                        r.setAttribute("DiscRasioTotal1", total);
                        r.setAttribute("DiscMf", mf);
                        r.setAttribute("DiscRasioMf", rasMf);
                        dciterPromoProduk.getDataControl().commitTransaction();

                        AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
                    }
                }
            } else {
                JSFUtils.addFacesWarningMessage("Potongan hanya dapat dihapus mulai dari baris terakhir.");
            }
        }
    }

    public void tabExcludeEvent(DisclosureEvent disclosureEvent) {
        if (disclosureEvent.isExpanded()) {
            UserData userData =
                (UserData)JSFUtils.resolveExpression("#{UserData}");
            String userType = userData.getUserType();

            if (userType.equalsIgnoreCase(userHo)) {
                DCIteratorBinding dciterCustHo =
                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");

                Integer cekCustHo = (int)dciterCustHo.getEstimatedRowCount();

                if (cekCustHo < 1) {
                    showPopup("Tab customer harus diisi", potmessage);
                    tabProdCustomer.setDisclosed(true);
                }
            }
        }
    }

    public void clearAllCustExclude() {

        BindingContainer bindings = this.getBindings();
        AttributeBinding usrTypeCreatorAttr =
            (AttributeBinding)bindings.getControlBinding("UserTypeCreator");
        String usrTypeCreator = (String)usrTypeCreatorAttr.getInputValue();

        if (usrTypeCreator.equalsIgnoreCase(userHo)) {
            // Remove All Exclude Regions
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            // Remove All Exclude Areas
            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            // Remove All Exclude Locations
            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            // Remove All Exclude Cust Groups
            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclCustGroupView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            // Remove All Exclude Cust Types
            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            // Remove All Exclude Customers
            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();

        } else if (usrTypeCreator.equalsIgnoreCase(userArea)) {
            // Remove All Exclude Regions
            DCIteratorBinding dciterRegion =
                ADFUtils.findIterator("ExclPropCustRegionView1Iterator");
            RowSetIterator rsiRegion = dciterRegion.getRowSetIterator();
            for (Row regionRow : dciterRegion.getAllRowsInRange()) {
                regionRow.remove();
            }
            rsiRegion.closeRowSetIterator();

            // Remove All Exclude Areas
            DCIteratorBinding dciterArea =
                ADFUtils.findIterator("ExclPropCustAreaView1Iterator");
            RowSetIterator rsiArea = dciterArea.getRowSetIterator();
            for (Row areaRow : dciterArea.getAllRowsInRange()) {
                areaRow.remove();
            }
            rsiArea.closeRowSetIterator();

            // Remove All Exclude Locations
            DCIteratorBinding dciterLocation =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiLocation = dciterLocation.getRowSetIterator();
            for (Row locationRow : dciterLocation.getAllRowsInRange()) {
                locationRow.remove();
            }
            rsiLocation.closeRowSetIterator();

            // Remove All Exclude Cust Groups
            DCIteratorBinding dciterCustGroup =
                ADFUtils.findIterator("ExclPropCustLocView1Iterator");
            RowSetIterator rsiCustGroup = dciterCustGroup.getRowSetIterator();
            for (Row custGroupRow : dciterCustGroup.getAllRowsInRange()) {
                custGroupRow.remove();
            }
            rsiCustGroup.closeRowSetIterator();

            // Remove All Exclude Cust Types
            DCIteratorBinding dciterCustType =
                ADFUtils.findIterator("ExclPropCustTypeView1Iterator");
            RowSetIterator rsiCustType = dciterCustType.getRowSetIterator();
            for (Row custTypeRow : dciterCustType.getAllRowsInRange()) {
                custTypeRow.remove();
            }
            rsiCustType.closeRowSetIterator();

            // Remove All Excludes Customers
            DCIteratorBinding dciterCustomer =
                ADFUtils.findIterator("ExclPropCustCustView1Iterator");
            RowSetIterator rsiCustomer = dciterCustomer.getRowSetIterator();
            for (Row customerRow : dciterCustomer.getAllRowsInRange()) {
                customerRow.remove();
            }
            rsiCustomer.closeRowSetIterator();


        } else {
            JSFUtils.addFacesWarningMessage("\"User Type Creator\" pada proposal tidak dikenali. Event: clearing exclude.");
        }

        // Clear column "ExclCustBy"
        DCIteratorBinding dciterPromoProduk =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        if (dciterPromoProduk.getEstimatedRowCount() > 0) {
            for (Row r : dciterPromoProduk.getAllRowsInRange()) {
                DBSequence promoProdId =
                    (DBSequence)r.getAttribute("PromoProdukId");
                r.setAttribute("ExclCustBy", null);
            }
        }

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);
    }

    public void priceListPromoBonusPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        AttributeBinding promoStartDtAttr =
            (AttributeBinding)bindings.getControlBinding("PeriodeProgFrom");
        String promoStartDt = (String)promoStartDtAttr.getInputValue();
        AttributeBinding promoProdukIdAttr =
            (AttributeBinding)bindings.getControlBinding("PromoProdukId");
        DBSequence promoProdukId =
            (DBSequence)promoProdukIdAttr.getInputValue();

        String ProdPromCombFirst = "";
        String ProdPromCombEnd = "";
        String PromoBonusIdSel = "";
        String Uom = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            if (rowSelected.getAttribute("ProductCategory") != null ||
                rowSelected.getAttribute("ProductClass") != null ||
                rowSelected.getAttribute("ProductBrand") != null ||
                rowSelected.getAttribute("ProductExt") != null ||
                rowSelected.getAttribute("ProductPack") != null) {
                PromoBonusIdSel =
                        rowSelected.getAttribute("PromoBonusId").toString();
                ProdPromCombFirst =
                        rowSelected.getAttribute("ProductCategory").toString() +
                        "." +
                        rowSelected.getAttribute("ProductClass").toString() +
                        "." +
                        rowSelected.getAttribute("ProductBrand").toString() +
                        "." +
                        rowSelected.getAttribute("ProductExt").toString() +
                        "." +
                        rowSelected.getAttribute("ProductPack").toString();
                Uom = rowSelected.getAttribute("Uom").toString();
            }
        }
        DCIteratorBinding dciterPromoVariant =
            ADFUtils.findIterator("PromoBonusVariantView1Iterator");
        long rowCountVar = dciterPromoVariant.getEstimatedRowCount();
        if (rowCountVar > 0) {
            String variantCode = "";
            String varUom = "";
            StringBuilder sb = new StringBuilder();
            for (Row r : dciterPromoVariant.getAllRowsInRange()) {
                String promoBonusIdVar =
                    r.getAttribute("PromoBonusId").toString();
                if (PromoBonusIdSel.equalsIgnoreCase(promoBonusIdVar)) {
                    String varCode = r.getAttribute("ProdVariant").toString();
                    sb.append(varCode + ";");

                }
            }

            variantCode = sb.substring(0, sb.length() - 1);
            String variantEnd = variantCode.substring(0, 3);

            if (variantEnd.equalsIgnoreCase("ALL")) {
                DCIteratorBinding dciterPromBonusItem =
                    ADFUtils.findIterator("PromoBonusProdItemView1Iterator");

                long rowCountItem = dciterPromBonusItem.getEstimatedRowCount();
                if (rowCountItem > 0) {

                    StringBuilder sbItem = new StringBuilder();
                    for (Row rIt : dciterPromBonusItem.getAllRowsInRange()) {
                        String promoBonusIdIt =
                            rIt.getAttribute("PromoBonusId").toString();
                        if (PromoBonusIdSel.equalsIgnoreCase(promoBonusIdIt)) {
                            String itemCode =
                                rIt.getAttribute("ProdItem").toString();
                            sbItem.append(itemCode + ";");
                        }
                    }
                    ProdPromCombEnd = sbItem.substring(0, sbItem.length() - 1);

                } else {
                    /*
                    //                    ProdPromCombEnd=ProdPromCombFirst;
                    showPopup("\"Product Name\" pada kombinasi produk harus diisi apabila variant \"ALL\".", potmessage);
                    */
                    ProdPromCombEnd = ProdPromCombFirst + "." + variantEnd;
                }

            } else {
                ProdPromCombEnd = ProdPromCombFirst + "." + variantCode;
            }
        }

        CallableStatement cst = null;

        String loggedUserName = userData.getUserNameLogin();
        /*
        System.out.println("\n================  PROMO BARANG  ==================\n" +
                "PROD COMB     : " + ProdPromCombEnd + "\n" +
                "PPID          : " + promoProdukId.getSequenceNumber() + "\n" +
                "USER NAME     : " + loggedUserName + "\n" +
                "UOM           : " + Uom + "\n" +
                "PROMO START DT: " + promoStartDt.toUpperCase() + "\n" +
                "=================================================");
        */
        try {
            cst =
promoProposalAM.getDBTransaction().createCallableStatement("BEGIN APPS.FCS_PPPC_GET_PRICE_LIST.INSERT_TABLE_PRICE_LIST('" +
                                                           ProdPromCombEnd +
                                                           "', '" +
                                                           promoProdukId.getSequenceNumber() +
                                                           "', '" +
                                                           loggedUserName +
                                                           "', '" + Uom +
                                                           "', '" +
                                                           promoStartDt.toUpperCase() +
                                                           "'); END;", 0);
            cst.executeUpdate();
        } catch (SQLException e) {
            JSFUtils.addFacesErrorMessage(e.getMessage());
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        OperationBinding operationBinding =
            bindings.getOperationBinding("ExecutePriceList");
        operationBinding.execute();
    }

    public void priceListpromoBonusDialogListener(DialogEvent dialogEvent) {
        if (dialogEvent.getOutcome().name().equals("ok")) {
            String PromoBonusIdSel = "";
            Number Qty = new Number(0);
            DCBindingContainer bindingsSelRow =
                (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
            DCIteratorBinding dcItteratorBindings =
                bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoBonusId") != null) {
                PromoBonusIdSel =
                        rowSelected.getAttribute("PromoBonusId").toString();
                Qty =
(Number)rowSelected.getAttribute("QtyFrom") == null ? new Number(0) :
(Number)rowSelected.getAttribute("QtyFrom");
            }
            DCIteratorBinding dciterPriceList =
                ADFUtils.findIterator("FcsPppcPriceListView1Iterator");
            Number priceVal = new Number(0);
            if (dciterPriceList.getEstimatedRowCount() > 0) {
                priceVal =
                        (Number)dciterPriceList.getCurrentRow().getAttribute("Price") ==
                        null ? new Number(0) :
                        (Number)dciterPriceList.getCurrentRow().getAttribute("Price");
            }
            BigDecimal endQty = new BigDecimal(Qty.getValue());
            BigDecimal tgtHarga = new BigDecimal(priceVal.getValue());

            BigDecimal totalValue = endQty.multiply(tgtHarga);
            oracle.jbo.domain.Number number = null;
            try {
                number =
                        new oracle.jbo.domain.Number(df2dgt.format(tgtHarga).toString());
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage("Error",
                                              e.getLocalizedMessage());
            }

            oracle.jbo.domain.Number qtyMulPriceNum = null;
            try {
                qtyMulPriceNum =
                        new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage("Error",
                                              e.getLocalizedMessage());
            }

            String PromoBonusIdSeT = "";
            DCIteratorBinding dciterPromoBonusSet =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            Row r = dciterPromoBonusSet.getCurrentRow();
            PromoBonusIdSeT = r.getAttribute("PromoBonusId").toString();
            if (PromoBonusIdSeT.equalsIgnoreCase(PromoBonusIdSel)) {
                r.setAttribute("PriceVal", number);
                r.setAttribute("QtyMulPrice", qtyMulPriceNum);
                itPricePromoBonus.setSubmittedValue(number);
                itQtyMulPrice.setSubmittedValue(qtyMulPriceNum);
                AdfFacesContext.getCurrentInstance().addPartialTarget(itPricePromoBonus);
                AdfFacesContext.getCurrentInstance().addPartialTarget(itQtyMulPrice);
                dciterPromoBonusSet.getDataControl().commitTransaction();
                dciterPromoBonusSet.executeQuery();
            }
        }
    }

    public void refreshOntopProBar(ValueChangeEvent valueChangeEvent) {
        String PromoBonusIdSel = "";
        Number Mf = new Number(0);
        Number PriceVal = new Number(0);
        Number QtyFrom = new Number(0);
        Number QtyMulPrice = new Number(0);

        BigDecimal RasioOntop = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;

        String InputPriceBy = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        Key parentKeyMaster = dcItteratorBindings.getCurrentRow().getKey();
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("PromoBonusId").toString();
            PriceVal =
                    (Number)rowSelected.getAttribute("PriceVal") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("PriceVal");
            Mf =
 (Number)rowSelected.getAttribute("DiscYearly") == null ? new Number(0) :
 (Number)rowSelected.getAttribute("DiscYearly");
            InputPriceBy =
                    rowSelected.getAttribute("InputPriceBy") == null ? "" :
                    rowSelected.getAttribute("InputPriceBy").toString();
            QtyFrom =
                    (Number)rowSelected.getAttribute("QtyFrom") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("QtyFrom");
            QtyMulPrice =
                    (Number)rowSelected.getAttribute("QtyMulPrice") == null ?
                    new Number(0) :
                    (Number)rowSelected.getAttribute("QtyMulPrice");

            //            System.out.println("value "+QtyMulPrice);
        }
        if (InputPriceBy.equalsIgnoreCase("PRICELIST")) {
            if (PriceVal.compareTo(zeroNum) < 0 ||
                PriceVal.compareTo(zeroNum) > 0) {
                BigDecimal newChangedOnTopValueCek =
                    new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                                   valueChangeEvent.getNewValue() == null ?
                                   "0" :
                                   valueChangeEvent.getNewValue().toString());
                BigDecimal totalOntopcek =
                    newChangedOnTopValueCek.add(Mf.getBigDecimalValue());
                BigDecimal totalPriceQty =
                    PriceVal.getBigDecimalValue().multiply(QtyFrom.getBigDecimalValue());
                //                System.out.println("totalPriceQty "+totalPriceQty);
                BigDecimal val =
                    totalOntopcek.divide(totalPriceQty, MathContext.DECIMAL128).setScale(2,
                                                                                         RoundingMode.HALF_UP);
                if (val.compareTo(BigDecimal.ONE) == 1) {
                    showPopup("Persentase nilai \"Total Qty Bonus\" dikali \"Price\" melebihi 100% dari nilai budget.",
                              potmessage);
                    btnOkpromoDetail.setDisabled(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                } else {
                    DCIteratorBinding dciterTarget =
                        ADFUtils.findIterator("TargetView1Iterator");
                    Row row = dciterTarget.getCurrentRow();
                    Number value =
                        (Number)row.getAttribute("Value") == null ? new Number(0) :
                        (Number)row.getAttribute("Value");

                    DCIteratorBinding dcItteratorBrgBonusOT =
                        ADFUtils.findIterator("PromoBonusView1Iterator");
                    Key parentKey =
                        dcItteratorBrgBonusOT.getCurrentRow().getKey();
                    ViewObject voTableData1 =
                        dcItteratorBrgBonusOT.getViewObject();
                    RowSetIterator iter =
                        voTableData1.createRowSetIterator(null);
                    BigDecimal totalOntop = new BigDecimal(0);
                    BigDecimal totalMFSum = new BigDecimal(0);
                    BigDecimal valueOTsel = BigDecimal.ZERO;
                    while (iter.hasNext()) {
                        Row r = iter.next();
                        String PromoBonusIdBrg =
                            r.getAttribute("PromoBonusId").toString();
                        if (PromoBonusIdBrg.equalsIgnoreCase(PromoBonusIdSel)) {
                            BigDecimal newChangedOnTopValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            valueOTsel = valueOTsel.add(newChangedOnTopValue);
                            valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
                        }
                        Number MFSum =
                            (Number)r.getAttribute("DiscYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscYearly");
                        totalMFSum =
                                totalMFSum.add(MFSum.getBigDecimalValue());
                        Number ontop =
                            (Number)r.getAttribute("DiscNonYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscNonYearly");
                        totalOntop =
                                totalOntop.add(ontop.getBigDecimalValue());
                    }
                    iter.closeRowSetIterator();
                    String rasio =
                        otBrgRasioMf.getValue() == "" ? "0" : otBrgRasioMf.getValue() ==
                                                              null ? "0" :
                                                              otBrgRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    otBrgOnTop.setSubmittedValue(totalOntop);
                    otBrgMf.setSubmittedValue(totalMFSum);
                    if (value.getBigDecimalValue().compareTo(BigDecimal.ZERO) ==
                        0) {
                        showPopup("Total Value Tab Target Bernilai 0",
                                  potmessage);
                    } else {
                        RasioOntop =
                                totalOntop.divide(value.getBigDecimalValue(),
                                                  MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                       RoundingMode.HALF_UP);

                    }
                    BigDecimal rasOntop = RasioOntop;
                    dcItteratorBrgBonusOT.setCurrentRowWithKey(parentKey.toStringFormat(true));
                    otBrgRasioOnTop.setSubmittedValue(rasOntop);
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otBrgRasioTotal.setSubmittedValue(total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Key parentKeyMasterPromoProduk =
                        dciterPromoProduk.getCurrentRow().getKey();
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("BrgBonusOnTop", totalOntop);
                    r.setAttribute("BrgBonusRasioOnTop", rasOntop);
                    r.setAttribute("BrgBonusRasioTotal", total);

                    dciterPromoProduk.getDataControl().commitTransaction();
                    dciterPromoProduk.executeQuery();
                    dciterPromoProduk.setCurrentRowWithKey(parentKeyMasterPromoProduk.toStringFormat(true));
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgOnTop);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioOnTop);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioTotal);
                    btnOkpromoDetail.setDisabled(false);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                }
            } else {
                JSFUtils.addFacesWarningMessage("Kolom \"Price\" tidak boleh kosong atau diisi 0 (Nol)");
            }
        } else {
            if (PriceVal.compareTo(zeroNum) < 0 ||
                PriceVal.compareTo(zeroNum) > 0) {
                BigDecimal newChangedOnTopValueCek =
                    new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                                   valueChangeEvent.getNewValue() == null ?
                                   "0" :
                                   valueChangeEvent.getNewValue().toString());
                BigDecimal totalOntopcek =
                    newChangedOnTopValueCek.add(Mf.getBigDecimalValue());
                BigDecimal totalPriceQty =
                    PriceVal.getBigDecimalValue().multiply(QtyFrom.getBigDecimalValue());
                BigDecimal val =
                    totalOntopcek.divide(totalPriceQty, MathContext.DECIMAL128).setScale(2,
                                                                                         RoundingMode.HALF_UP);
                if (val.compareTo(BigDecimal.ONE) == 1) {
                    showPopup("Persentase nilai \"Total Qty Bonus\" dikali \"Price\" melebihi 100% dari nilai budget.",
                              potmessage);

                    btnOkpromoDetail.setDisabled(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                } else {
                    DCIteratorBinding dciterTarget =
                        ADFUtils.findIterator("TargetView1Iterator");
                    Row row = dciterTarget.getCurrentRow();
                    Number value =
                        (Number)row.getAttribute("Value") == null ? new Number(0) :
                        (Number)row.getAttribute("Value");

                    DCIteratorBinding dcItteratorBrgBonusOT =
                        ADFUtils.findIterator("PromoBonusView1Iterator");
                    Key parentKey =
                        dcItteratorBrgBonusOT.getCurrentRow().getKey();
                    ViewObject voTableData1 =
                        dcItteratorBrgBonusOT.getViewObject();
                    RowSetIterator iter =
                        voTableData1.createRowSetIterator(null);
                    BigDecimal totalOntop = new BigDecimal(0);
                    BigDecimal totalMFSum = new BigDecimal(0);
                    BigDecimal valueOTsel = BigDecimal.ZERO;
                    while (iter.hasNext()) {
                        Row r = iter.next();
                        String PromoBonusIdBrg =
                            r.getAttribute("PromoBonusId").toString();
                        if (PromoBonusIdBrg.equalsIgnoreCase(PromoBonusIdSel)) {
                            BigDecimal newChangedOnTopValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            valueOTsel = valueOTsel.add(newChangedOnTopValue);
                            valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
                        }
                        Number MFSum =
                            (Number)r.getAttribute("DiscYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscYearly");
                        totalMFSum =
                                totalMFSum.add(MFSum.getBigDecimalValue());
                        Number ontop =
                            (Number)r.getAttribute("DiscNonYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscNonYearly");
                        totalOntop =
                                totalOntop.add(ontop.getBigDecimalValue());
                    }

                    //                    System.out.println("totalOntop "+totalOntop);
                    iter.closeRowSetIterator();
                    String rasio =
                        otBrgRasioMf.getValue() == "" ? "0" : otBrgRasioMf.getValue() ==
                                                              null ? "0" :
                                                              otBrgRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    otBrgOnTop.setSubmittedValue(totalOntop);
                    otBrgMf.setSubmittedValue(totalMFSum);
                    if (value.getBigDecimalValue().compareTo(BigDecimal.ZERO) ==
                        0) {
                        showPopup("Total Value Tab Target Bernilai 0",
                                  potmessage);

                    } else {
                        RasioOntop =
                                totalOntop.divide(value.getBigDecimalValue(),
                                                  MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                       RoundingMode.HALF_UP);
                    }
                    BigDecimal rasOntop = RasioOntop;
                    dcItteratorBrgBonusOT.setCurrentRowWithKey(parentKey.toStringFormat(true));
                    otBrgRasioOnTop.setSubmittedValue(rasOntop);
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otBrgRasioTotal.setSubmittedValue(total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Key parentKeyMasterPromoProduk =
                        dciterPromoProduk.getCurrentRow().getKey();
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("BrgBonusOnTop", totalOntop);
                    r.setAttribute("BrgBonusRasioOnTop", rasOntop);
                    r.setAttribute("BrgBonusRasioTotal", total);

                    dciterPromoProduk.getDataControl().commitTransaction();
                    dciterPromoProduk.executeQuery();
                    dciterPromoProduk.setCurrentRowWithKey(parentKeyMasterPromoProduk.toStringFormat(true));
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgOnTop);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgMf);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioOnTop);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioTotal);
                    btnOkpromoDetail.setDisabled(false);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                }
            } else {
                JSFUtils.addFacesWarningMessage("Kolom \"Price\" tidak boleh kosong atau diisi 0 (Nol)");
            }
            dcItteratorBindings.setCurrentRowWithKey(parentKeyMaster.toStringFormat(true));
        }
    }

    public void refreshMfProBar(ValueChangeEvent valueChangeEvent) {
        String PromoBonusIdSel = "";
        String InputPriceBy = "";
        Number QtyFrom = new Number(0);
        Number ontop = new Number(0);
        Number PriceVal = new Number(0);
        Number QtyMulPrice = new Number(0);
        BigDecimal RasioMf = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;

        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        Key parentKeyMaster = dcItteratorBindings.getCurrentRow().getKey();

        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("PromoBonusId").toString();
            PriceVal =
                    (Number)rowSelected.getAttribute("PriceVal") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("PriceVal");
            ontop =
                    (Number)rowSelected.getAttribute("DiscNonYearly") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("DiscNonYearly");
            InputPriceBy =
                    rowSelected.getAttribute("InputPriceBy") == null ? "" :
                    rowSelected.getAttribute("InputPriceBy").toString();
            QtyFrom =
                    (Number)rowSelected.getAttribute("QtyFrom") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("QtyFrom");
            QtyMulPrice =
                    (Number)rowSelected.getAttribute("QtyMulPrice") == null ?
                    new Number(0) :
                    (Number)rowSelected.getAttribute("QtyMulPrice");

            //            System.out.println("value mf "+QtyMulPrice);
        }

        if (InputPriceBy.equalsIgnoreCase("PRICELIST")) {
            if (PriceVal.compareTo(zeroNum) < 0 ||
                PriceVal.compareTo(zeroNum) > 0) {
                BigDecimal newChangedMfValueCek =
                    new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                                   valueChangeEvent.getNewValue() == null ?
                                   "0" :
                                   valueChangeEvent.getNewValue().toString());
                BigDecimal totalOntop =
                    newChangedMfValueCek.add(ontop.getBigDecimalValue());
                BigDecimal totalPriceQty =
                    PriceVal.getBigDecimalValue().multiply(QtyFrom.getBigDecimalValue());
                BigDecimal val =
                    totalOntop.divide(totalPriceQty, MathContext.DECIMAL128).setScale(2,
                                                                                      RoundingMode.HALF_UP);
                if (val.compareTo(BigDecimal.ONE) == 1) {
                    showPopup("Persentase nilai \"Total Qty Bonus\" dikali \"Price\" melebihi 100% dari nilai budget.",
                              potmessage);
                    btnOkpromoDetail.setDisabled(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                } else {
                    DCIteratorBinding dciterTarget =
                        ADFUtils.findIterator("TargetView1Iterator");
                    Row row = dciterTarget.getCurrentRow();
                    Number value =
                        (Number)row.getAttribute("Value") == null ? new Number(0) :
                        (Number)row.getAttribute("Value");

                    DCIteratorBinding dcItteratorBrgBonusMF =
                        ADFUtils.findIterator("PromoBonusView1Iterator");
                    Key parentKey =
                        dcItteratorBrgBonusMF.getCurrentRow().getKey();
                    ViewObject voTableDataMF =
                        dcItteratorBrgBonusMF.getViewObject();
                    RowSetIterator iterMF =
                        voTableDataMF.createRowSetIterator(null);
                    BigDecimal valueOTsel = BigDecimal.ZERO;
                    BigDecimal totalOntopSum = new BigDecimal(0);
                    BigDecimal totalMF = new BigDecimal(0);
                    while (iterMF.hasNext()) {
                        Row r = iterMF.next();
                        String PromoBonusIdBrg =
                            r.getAttribute("PromoBonusId").toString();
                        if (PromoBonusIdBrg.equalsIgnoreCase(PromoBonusIdSel)) {
                            BigDecimal newChangedMfValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            valueOTsel = valueOTsel.add(newChangedMfValue);
                            valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
                        }
                        Number MF =
                            (Number)r.getAttribute("DiscYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscYearly");
                        totalMF = totalMF.add(MF.getBigDecimalValue());
                        Number ontopSum =
                            (Number)r.getAttribute("DiscNonYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscNonYearly");
                        totalOntopSum =
                                totalOntopSum.add(ontopSum.getBigDecimalValue());
                    }

                    dcItteratorBrgBonusMF.setCurrentRowWithKey(parentKey.toStringFormat(true));
                    iterMF.closeRowSetIterator();
                    String rasio =
                        otBrgRasioOnTop.getValue() == "" ? "0" : otBrgRasioOnTop.getValue() ==
                                                                 null ? "0" :
                                                                 otBrgRasioOnTop.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    otBrgMf.setSubmittedValue(totalMF);
                    otBrgOnTop.setSubmittedValue(totalOntopSum);
                    RasioMf =
                            totalMF.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                            RoundingMode.HALF_UP);
                    BigDecimal rasMf = RasioMf;
                    otBrgRasioMf.setSubmittedValue(rasMf);
                    rasioTotal = RasioMf.add(rasioT);
                    String total = rasioTotal.toString();
                    otBrgRasioTotal.setSubmittedValue(total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Key parentKeyMasterPromoProduk =
                        dciterPromoProduk.getCurrentRow().getKey();
                    Row r = dciterPromoProduk.getCurrentRow();

                    r.setAttribute("BrgBonusMf", totalMF);
                    r.setAttribute("BrgBonusRasioMf", rasMf);
                    r.setAttribute("BrgBonusRasioTotal", total);

                    dciterPromoProduk.getDataControl().commitTransaction();
                    dciterPromoProduk.executeQuery();
                    dciterPromoProduk.setCurrentRowWithKey(parentKeyMasterPromoProduk.toStringFormat(true));
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgMf);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgOnTop);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioMf);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioTotal);
                    btnOkpromoDetail.setDisabled(false);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                }
            } else {
                JSFUtils.addFacesWarningMessage("Kolom \"Price\" tidak boleh kosong atau diisi 0 (Nol)");
            }
        } else {
            if (PriceVal.compareTo(zeroNum) < 0 ||
                PriceVal.compareTo(zeroNum) > 0) {
                BigDecimal newChangedMfValueCek =
                    new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                                   valueChangeEvent.getNewValue() == null ?
                                   "0" :
                                   valueChangeEvent.getNewValue().toString());
                BigDecimal totalOntop =
                    newChangedMfValueCek.add(ontop.getBigDecimalValue());
                BigDecimal totalPriceQty =
                    PriceVal.getBigDecimalValue().multiply(QtyFrom.getBigDecimalValue());
                BigDecimal val =
                    totalOntop.divide(totalPriceQty, MathContext.DECIMAL128).setScale(2,
                                                                                      RoundingMode.HALF_UP);
                if (val.compareTo(BigDecimal.ONE) == 1) {
                    showPopup("Persentase nilai \"Total Qty Bonus\" dikali \"Price\" melebihi 100% dari nilai budget.",
                              potmessage);
                    btnOkpromoDetail.setDisabled(true);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProductBonus);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                } else {
                    DCIteratorBinding dciterTarget =
                        ADFUtils.findIterator("TargetView1Iterator");
                    Row row = dciterTarget.getCurrentRow();
                    Number value =
                        (Number)row.getAttribute("Value") == null ? new Number(0) :
                        (Number)row.getAttribute("Value");

                    DCIteratorBinding dcItteratorBrgBonusMF =
                        ADFUtils.findIterator("PromoBonusView1Iterator");
                    Key parentKey =
                        dcItteratorBrgBonusMF.getCurrentRow().getKey();
                    ViewObject voTableDataMF =
                        dcItteratorBrgBonusMF.getViewObject();
                    RowSetIterator iterMF =
                        voTableDataMF.createRowSetIterator(null);
                    BigDecimal valueOTsel = BigDecimal.ZERO;
                    BigDecimal totalMF = new BigDecimal(0);
                    BigDecimal totalOntopSum = new BigDecimal(0);
                    while (iterMF.hasNext()) {
                        Row r = iterMF.next();
                        String PromoBonusIdBrg =
                            r.getAttribute("PromoBonusId").toString();
                        if (PromoBonusIdBrg.equalsIgnoreCase(PromoBonusIdSel)) {
                            BigDecimal newChangedMfValue =
                                new BigDecimal(valueChangeEvent.getNewValue() ==
                                               "" ? "0" :
                                               valueChangeEvent.getNewValue() ==
                                               null ? "0" :
                                               valueChangeEvent.getNewValue().toString());
                            valueOTsel = valueOTsel.add(newChangedMfValue);
                            valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
                        }
                        Number MF =
                            (Number)r.getAttribute("DiscYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscYearly");
                        totalMF = totalMF.add(MF.getBigDecimalValue());
                        Number ontopSum =
                            (Number)r.getAttribute("DiscNonYearly") == null ?
                            new Number(0) :
                            (Number)r.getAttribute("DiscNonYearly");
                        totalOntopSum =
                                totalOntopSum.add(ontopSum.getBigDecimalValue());
                    }
                    dcItteratorBrgBonusMF.setCurrentRowWithKey(parentKey.toStringFormat(true));
                    iterMF.closeRowSetIterator();
                    String rasio =
                        otBrgRasioOnTop.getValue() == "" ? "0" : otBrgRasioOnTop.getValue() ==
                                                                 null ? "0" :
                                                                 otBrgRasioOnTop.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    otBrgMf.setSubmittedValue(totalMF);
                    otBrgOnTop.setSubmittedValue(totalOntopSum);
                    RasioMf =
                            totalMF.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                            RoundingMode.HALF_UP);
                    BigDecimal rasMf = RasioMf;
                    otBrgRasioMf.setSubmittedValue(rasMf);
                    rasioTotal = RasioMf.add(rasioT);
                    String total = rasioTotal.toString();
                    otBrgRasioTotal.setSubmittedValue(total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Key parentKeyMasterPromoProduk =
                        dciterPromoProduk.getCurrentRow().getKey();
                    Row r = dciterPromoProduk.getCurrentRow();

                    r.setAttribute("BrgBonusMf", totalMF);
                    r.setAttribute("BrgBonusRasioMf", rasMf);
                    r.setAttribute("BrgBonusRasioTotal", total);

                    dciterPromoProduk.getDataControl().commitTransaction();
                    dciterPromoProduk.executeQuery();
                    dciterPromoProduk.setCurrentRowWithKey(parentKeyMasterPromoProduk.toStringFormat(true));
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgMf);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgOnTop);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioMf);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioTotal);
                    btnOkpromoDetail.setDisabled(false);
                    AdfFacesContext.getCurrentInstance().addPartialTarget(btnOkpromoDetail);
                }
            } else {
                JSFUtils.addFacesWarningMessage("Kolom \"Price\" tidak boleh kosong atau diisi 0 (Nol)");
            }
            dcItteratorBindings.setCurrentRowWithKey(parentKeyMaster.toStringFormat(true));
        }
    }

    public void setItPromoBonusOntop(RichInputText itPromoBonusOntop) {
        this.itPromoBonusOntop = itPromoBonusOntop;
    }

    public RichInputText getItPromoBonusOntop() {
        return itPromoBonusOntop;
    }

    public void setItPromoBonusMf(RichInputText itPromoBonusMf) {
        this.itPromoBonusMf = itPromoBonusMf;
    }

    public RichInputText getItPromoBonusMf() {
        return itPromoBonusMf;
    }

    public void setItPricePromoBonus(RichInputText itPricePromoBonus) {
        this.itPricePromoBonus = itPricePromoBonus;
    }

    public RichInputText getItPricePromoBonus() {
        return itPricePromoBonus;
    }

    public void setItQtyPromoboBonus(RichInputText itQtyPromoboBonus) {
        this.itQtyPromoboBonus = itQtyPromoboBonus;
    }

    public RichInputText getItQtyPromoboBonus() {
        return itQtyPromoboBonus;
    }

    public void setOtBrgOnTop(RichInputText otBrgOnTop) {
        this.otBrgOnTop = otBrgOnTop;
    }

    public RichInputText getOtBrgOnTop() {
        return otBrgOnTop;
    }

    public void setOtBrgMf(RichInputText otBrgMf) {
        this.otBrgMf = otBrgMf;
    }

    public RichInputText getOtBrgMf() {
        return otBrgMf;
    }

    public void setOtBrgRasioOnTop(RichInputText otBrgRasioOnTop) {
        this.otBrgRasioOnTop = otBrgRasioOnTop;
    }

    public RichInputText getOtBrgRasioOnTop() {
        return otBrgRasioOnTop;
    }

    public void setOtBrgRasioMf(RichInputText otBrgRasioMf) {
        this.otBrgRasioMf = otBrgRasioMf;
    }

    public RichInputText getOtBrgRasioMf() {
        return otBrgRasioMf;
    }

    public void setOtBrgRasioTotal(RichInputText otBrgRasioTotal) {
        this.otBrgRasioTotal = otBrgRasioTotal;
    }

    public RichInputText getOtBrgRasioTotal() {
        return otBrgRasioTotal;
    }

    public void setBtnOkpromoDetail(RichCommandButton btnOkpromoDetail) {
        this.btnOkpromoDetail = btnOkpromoDetail;
    }

    public RichCommandButton getBtnOkpromoDetail() {
        return btnOkpromoDetail;
    }

    public void setItProductItem(RichInputText itProductItem) {
        this.itProductItem = itProductItem;
    }

    public RichInputText getItProductItem() {
        return itProductItem;
    }

    public void removeProduk(ActionEvent actionEvent) {
        String PromoProdukIdSel = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voTableDatasel = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableDatasel.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }
        DCIteratorBinding iterVar =
            ADFUtils.findIterator("ProdukVariantView1Iterator");
        for (Row r : iterVar.getAllRowsInRange()) {
            String idVar = r.getAttribute("PromoProdukId").toString();
            if (idVar.equalsIgnoreCase(PromoProdukIdSel)) {
                r.remove();
            }
        }
        iterVar.getDataControl().commitTransaction();

        DCIteratorBinding iterItem =
            ADFUtils.findIterator("ProdukItemView1Iterator");
        for (Row rItem : iterItem.getAllRowsInRange()) {
            String idItem = rItem.getAttribute("PromoProdukId").toString();
            if (idItem.equalsIgnoreCase(PromoProdukIdSel)) {
                rItem.remove();
            }
        }
        iterItem.getDataControl().commitTransaction();
        DCIteratorBinding iterPP =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        for (Row rPP : iterPP.getAllRowsInRange()) {
            String idPP = rPP.getAttribute("PromoProdukId").toString();
            if (idPP.equalsIgnoreCase(PromoProdukIdSel)) {
                rPP.remove();
            }
        }
        iterPP.getDataControl().commitTransaction();
    }

    public void vcePeriodePromo(ValueChangeEvent valueChangeEvent) throws ParseException {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();

        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String usrType =
            userData.getUserType() == null ? "" : userData.getUserType();

        AttributeBinding proposalTypeAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalType");
        Integer propTypeIdx = (Integer)proposalTypeAttr.getInputValue();

        AttributeBinding copySourceAttr =
            (AttributeBinding)bindings.getControlBinding("CopySource");
        String copySource = (String)copySourceAttr.getInputValue();

        AttributeBinding mekPenagihanAttr =
            (AttributeBinding)bindings.getControlBinding("MekanismePenagihan");
        Integer mekPenagihan = (Integer)mekPenagihanAttr.getInputValue();

        boolean backDateOk = false;
        boolean validateH1H7 = true;

        java.util.Date date2 =
            new java.util.Date(valueChangeEvent.getNewValue().toString());
        java.util.Date today = new java.util.Date();

        Calendar calYesterday = Calendar.getInstance();
        calYesterday.setTime(today);
        calYesterday.add(Calendar.DATE, -1);
        Date yesterday = calYesterday.getTime();

        AttributeBinding custTypeAttr =
            (AttributeBinding)bindings.getControlBinding("CustRegFlag");
        String custType =
            (String)custTypeAttr.getInputValue() == null ? "" : (String)custTypeAttr.getInputValue();

        // Calculate history date
        DateFormat dfMM = new SimpleDateFormat("MM");
        String currMon = dfMM.format(date2);
        Integer last3Mon = Integer.valueOf(currMon) - 3;
        Integer last1Mon = Integer.valueOf(currMon) - 1;
        DateFormat dfYY = new SimpleDateFormat("yyyy");
        String currYear = dfYY.format(date2);
        Integer thisYear = Integer.valueOf(currYear);

        DateConversion.Measure last3MonCal =
            new DateConversion.Measure().month(last3Mon).year(thisYear);
        String DateTo =
            thisYear.toString() + String.format("%02d", last1Mon) + getLastDay(thisYear.toString(),
                                                                               last1Mon.toString());
        String d1HisF = last3MonCal.min().toString();
        SimpleDateFormat formatterx = new SimpleDateFormat("yyyyMMdd");
        SimpleDateFormat formatterui = new SimpleDateFormat("dd-MMM-yyyy");
        java.util.Date fr = formatterx.parse(d1HisF);
        java.util.Date to = formatterx.parse(DateTo);
        idHistFrom.setSubmittedValue(formatterui.format(fr).toString());
        idHistTo.setSubmittedValue(formatterui.format(to).toString());
        otHistFrom.setValue(formatterui.format(fr).toString());
        otHistTo.setValue(formatterui.format(to).toString());
        AdfFacesContext.getCurrentInstance().addPartialTarget(idHistFrom);
        AdfFacesContext.getCurrentInstance().addPartialTarget(idHistTo);
        AdfFacesContext.getCurrentInstance().addPartialTarget(otHistFrom);
        AdfFacesContext.getCurrentInstance().addPartialTarget(otHistTo);

        ArrayList<String> custRegCodeList = new ArrayList<String>();
        custRegCodeList = validateBlockRegion(custType);

        if (date2.before(yesterday) && usrType.equalsIgnoreCase(userArea)) {
            if ((custRegCodeList.contains(backDateBlockRegion) &&
                 custRegCodeList.size() == 1)) {
                backDateOk = true;
            } else {
                backDateOk = false;
            }
        } else {
            backDateOk = true;
        }

        if (usrType.equalsIgnoreCase(userArea)) {
            if (custRegCodeList.contains(backDateBlockRegion) &&
                custRegCodeList.size() == 1) {
                validateH1H7 = false;
            } else {
                validateH1H7 = true;
            }
        } else {
            validateH1H7 = true;
        }

        Calendar calTodayAdd7 = Calendar.getInstance();
        calTodayAdd7.setTime(today);
        calTodayAdd7.add(Calendar.DATE, 6);

        Calendar calTodayAdd1 = Calendar.getInstance();
        calTodayAdd1.setTime(today);
        // Set time fields to zero
        calTodayAdd1.set(Calendar.HOUR_OF_DAY, 0);
        calTodayAdd1.set(Calendar.MINUTE, 0);
        calTodayAdd1.set(Calendar.SECOND, 0);
        calTodayAdd1.set(Calendar.MILLISECOND, 0);
        calTodayAdd1.add(Calendar.DATE, 1);

        Calendar calTodayAdd10 = Calendar.getInstance();
        calTodayAdd10.setTime(today);
        calTodayAdd10.add(Calendar.DATE, 9);

        if (backDateOk) {
            calTodayAdd7.setTime(today);
            Integer valFoodDate = 0;
            if (propTypeIdx.compareTo(idxFood) == 0) {
                Date todayAdd7 = calTodayAdd7.getTime();

                if (copySource == null && usrType.equalsIgnoreCase(userArea) &&
                    validateH1H7) {
                    if (date2.after(yesterday) &&
                        date2.compareTo(todayAdd7) < 0) {
                        valFoodDate = 1;
                    } else {
                        valFoodDate = 0;
                        if (idPeriodeTo.getValue() != null) {
                            java.util.Date date1 =
                                new Date(idPeriodeTo.getValue().toString());
                            java.util.Date date21 =
                                new Date(valueChangeEvent.getNewValue().toString());
                            long days = ADFUtils.daysBetween(date1, date21);
                            Number days1 = new Number(days + 1);
                            itDaysCount.setValue(days1);
                            AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
                        }
                    }
                } else {
                    if (mekPenagihan.equals(onInvoice)) {
                        Date todayAdd1 = calTodayAdd1.getTime();
                        if (date2.compareTo(todayAdd1) < 0) {
                            valFoodDate = 3;
                        } else {
                            valFoodDate = 0;
                            if (idPeriodeTo.getValue() != null) {
                                java.util.Date date1 =
                                    new Date(idPeriodeTo.getValue().toString());
                                java.util.Date date21 =
                                    new Date(valueChangeEvent.getNewValue().toString());
                                long days =
                                    ADFUtils.daysBetween(date1, date21);
                                Number days1 = new Number(days + 1);
                                itDaysCount.setValue(days1);
                                AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
                            }
                        }
                    } else {
                        valFoodDate = 0;
                        if (idPeriodeTo.getValue() != null) {
                            java.util.Date date1 =
                                new Date(idPeriodeTo.getValue().toString());
                            java.util.Date date21 =
                                new Date(valueChangeEvent.getNewValue().toString());
                            long days = ADFUtils.daysBetween(date1, date21);
                            Number days1 = new Number(days + 1);
                            itDaysCount.setValue(days1);
                            AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
                        }
                    }
                }
            } else if (propTypeIdx.compareTo(idxNonFood) == 0) {
                Date todayAdd10 = calTodayAdd10.getTime();

                if (copySource == null && usrType.equalsIgnoreCase(userArea) &&
                    validateH1H7) {
                    if (date2.after(yesterday) &&
                        date2.compareTo(todayAdd10) < 0) {
                        valFoodDate = 2;
                    } else {
                        valFoodDate = 0;
                        if (idPeriodeTo.getValue() != null) {
                            java.util.Date date1 =
                                new Date(idPeriodeTo.getValue().toString());
                            java.util.Date date22 =
                                new Date(valueChangeEvent.getNewValue().toString());
                            long days = ADFUtils.daysBetween(date1, date22);
                            Number days1 = new Number(days + 1);
                            itDaysCount.setValue(days1);
                            AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
                        }
                    }
                } else {
                    if (mekPenagihan.equals(onInvoice)) {
                        Date todayAdd1 = calTodayAdd1.getTime();
                        if (date2.compareTo(todayAdd1) < 0) {
                            valFoodDate = 3;
                        } else {
                            valFoodDate = 0;
                            if (idPeriodeTo.getValue() != null) {
                                java.util.Date date1 =
                                    new Date(idPeriodeTo.getValue().toString());
                                java.util.Date date22 =
                                    new Date(valueChangeEvent.getNewValue().toString());
                                long days =
                                    ADFUtils.daysBetween(date1, date22);
                                Number days1 = new Number(days + 1);
                                itDaysCount.setValue(days1);
                                AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
                            }
                        }
                    } else {
                        valFoodDate = 0;
                        if (idPeriodeTo.getValue() != null) {
                            java.util.Date date1 =
                                new Date(idPeriodeTo.getValue().toString());
                            java.util.Date date22 =
                                new Date(valueChangeEvent.getNewValue().toString());
                            long days = ADFUtils.daysBetween(date1, date22);
                            Number days1 = new Number(days + 1);
                            itDaysCount.setValue(days1);
                            AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
                        }
                    }
                }
            } else {
                valFoodDate = 0;
            }

            if (valFoodDate.compareTo(0) == 0) {
                // CONTINUE
            } else if (valFoodDate.compareTo(1) == 0) {
                idPeriodProgFrom.setSubmittedValue(null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                JSFUtils.addFacesWarningMessage("Pengajuan proposal periode promo FOOD minimal harus untuk H+7");
            } else if (valFoodDate.compareTo(2) == 0) {
                idPeriodProgFrom.setSubmittedValue(null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                JSFUtils.addFacesWarningMessage("Pengajuan proposal periode promo NON FOOD minimal harus untuk H+10");
            } else if (valFoodDate.compareTo(3) == 0) {
                idPeriodProgFrom.setSubmittedValue(null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
                this.showPopup("Pengajuan proposal \"On Invoice\" minimal harus untuk H+1",
                               potmessage);
            } else {
                // DO NOTHING
            }
        } else {
            idPeriodProgFrom.setSubmittedValue(null);
            AdfFacesContext.getCurrentInstance().addPartialTarget(idPeriodProgFrom);
            JSFUtils.addFacesWarningMessage("Pengajuan proposal ini tidak diperkenankan untuk \"Back Date\"");
        }
    }

    public static String getLastDay(String year, String month) {
        // get a calendar object
        GregorianCalendar calendar = new GregorianCalendar();
        // convert the year and month to integers
        int yearInt = Integer.parseInt(year);
        int monthInt = Integer.parseInt(month);
        // adjust the month for a zero based index
        monthInt = monthInt - 1;
        // set the date of the calendar to the date provided
        calendar.set(yearInt, monthInt, 1);
        int dayInt = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
        return Integer.toString(dayInt);
    } // end getLastDay method

    public void setIdHistFrom(RichInputDate idHistFrom) {
        this.idHistFrom = idHistFrom;
    }

    public RichInputDate getIdHistFrom() {
        return idHistFrom;
    }

    public void setIdHistTo(RichInputDate idHistTo) {
        this.idHistTo = idHistTo;
    }

    public RichInputDate getIdHistTo() {
        return idHistTo;
    }

    public void idPeriodProgToCount(ValueChangeEvent valueChangeEvent) {
        if (idPeriodProgFrom.getValue() != null) {
            java.util.Date date1 =
                new Date(idPeriodProgFrom.getValue().toString());
            java.util.Date date2 =
                new Date(valueChangeEvent.getNewValue().toString());
            long days = ADFUtils.daysBetween(date1, date2);
            Number days1 = new Number(days + 1);
            itDaysCount.setValue(days1);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itDaysCount);
        }
    }

    public void setIdPeriodProgFrom(RichInputDate idPeriodProgFrom) {
        this.idPeriodProgFrom = idPeriodProgFrom;
    }

    public RichInputDate getIdPeriodProgFrom() {
        return idPeriodProgFrom;
    }

    public void setIdPeriodeTo(RichInputDate idPeriodeTo) {
        this.idPeriodeTo = idPeriodeTo;
    }

    public RichInputDate getIdPeriodeTo() {
        return idPeriodeTo;
    }

    public void setOtBiaOntop(RichInputText otBiaOntop) {
        this.otBiaOntop = otBiaOntop;
    }

    public RichInputText getOtBiaOntop() {
        return otBiaOntop;
    }

    public void setOtBiaMf(RichInputText otBiaMf) {
        this.otBiaMf = otBiaMf;
    }

    public RichInputText getOtBiaMf() {
        return otBiaMf;
    }

    public void setOtBiaRasioOntop(RichInputText otBiaRasioOntop) {
        this.otBiaRasioOntop = otBiaRasioOntop;
    }

    public RichInputText getOtBiaRasioOntop() {
        return otBiaRasioOntop;
    }

    public void setOtBiaRasioMf(RichInputText otBiaRasioMf) {
        this.otBiaRasioMf = otBiaRasioMf;
    }

    public RichInputText getOtBiaRasioMf() {
        return otBiaRasioMf;
    }

    public void setOtBiaRasioTotal(RichInputText otBiaRasioTotal) {
        this.otBiaRasioTotal = otBiaRasioTotal;
    }

    public RichInputText getOtBiaRasioTotal() {
        return otBiaRasioTotal;
    }

    public void setRowBiaOntop(RichInputText rowBiaOntop) {
        this.rowBiaOntop = rowBiaOntop;
    }

    public RichInputText getRowBiaOntop() {
        return rowBiaOntop;
    }

    public void setRowBiaMf(RichInputText rowBiaMf) {
        this.rowBiaMf = rowBiaMf;
    }

    public RichInputText getRowBiaMf() {
        return rowBiaMf;
    }

    public void addNewRowBiaya(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dciter =
            (DCIteratorBinding)bindings.get("BiayaView1Iterator");
        RowSetIterator rsi = dciter.getRowSetIterator();
        Row lastRow = rsi.last();
        int lastRowIndex = rsi.getRangeIndexOf(lastRow);
        Row newRow = rsi.createRow();
        newRow.setNewRowState(Row.STATUS_INITIALIZED);
        //add row to last index + 1 so it becomes last in the range set
        rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
        //make row the current row so it is displayed correctly
        rsi.setCurrentRow(newRow);
        newRow.validate();
    }

    public void removeBiayaRow(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("BiayaView1Iterator");
        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("BiayaId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("BiaOntop", 0);
                r.setAttribute("BiaRasionOntop", 0);
                r.setAttribute("BiaMf", 0);
                r.setAttribute("BiaRasioMf", 0);
                r.setAttribute("BiaRasioTotal", 0);
                dciterPromoProduk.getDataControl().commitTransaction();
                otBiaOntop.setSubmittedValue(0);
                otBiaRasioOntop.setSubmittedValue(0);
                otBiaRasioTotal.setSubmittedValue(0);
                otBiaMf.setSubmittedValue(0);
                otBiaRasioMf.setSubmittedValue(0);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioTotal);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioMf);
            }
        } else {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("BiayaId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            Row r = dciterPromoProduk.getCurrentRow();
            DCIteratorBinding dciterDiscount =
                ADFUtils.findIterator("BiayaView1Iterator");
            BigDecimal totalMf = BigDecimal.ZERO;
            BigDecimal totalOntop = BigDecimal.ZERO;
            for (Row er : dciterDiscount.getAllRowsInRange()) {
                String valueMF =
                    er.getAttribute("BiayaYearly") == null ? "0" : er.getAttribute("BiayaYearly") ==
                                                                   "" ? "0" :
                                                                   er.getAttribute("BiayaYearly").toString().replaceAll(",",
                                                                                                                        "");
                String valueTop =
                    er.getAttribute("BiayaNonYearly") == null ? "0" :
                    er.getAttribute("BiayaNonYearly") == "" ? "0" :
                    er.getAttribute("BiayaNonYearly").toString().replaceAll(",",
                                                                            "");
                BigDecimal ontopValue =
                    new BigDecimal(valueTop) == null ? new BigDecimal(0) :
                    new BigDecimal(valueTop);
                BigDecimal mfValue =
                    new BigDecimal(valueMF) == null ? new BigDecimal(0) :
                    new BigDecimal(valueMF);
                totalMf = totalMf.add(mfValue);
                totalOntop = totalOntop.add(ontopValue);
            }
            DCIteratorBinding dciterTarget =
                ADFUtils.findIterator("TargetView1Iterator");
            Row row = dciterTarget.getCurrentRow();
            BigDecimal mf = BigDecimal.ZERO;
            BigDecimal rMf = BigDecimal.ZERO;
            BigDecimal RasioMf = BigDecimal.ZERO;
            BigDecimal rasioTotal = BigDecimal.ZERO;
            BigDecimal rasioT = BigDecimal.ZERO;
            BigDecimal ontop = BigDecimal.ZERO;
            BigDecimal rOntop = BigDecimal.ZERO;
            BigDecimal RasioOntop = BigDecimal.ZERO;
            Number qty =
                (Number)row.getAttribute("Qty") == null ? new Number(0) :
                (Number)row.getAttribute("Qty");
            Number value =
                (Number)row.getAttribute("Value") == null ? new Number(0) :
                (Number)row.getAttribute("Value");
            rMf = totalMf;
            mf =
 (value.multiply(rMf)).getBigDecimalValue().divide(bdHundred).setScale(2,
                                                                       RoundingMode.HALF_UP);
            otBiaMf.setSubmittedValue(rMf);
            RasioMf =
                    rMf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                RoundingMode.HALF_UP);
            String rasMf = RasioMf.toString();
            otBiaRasioMf.setSubmittedValue(rasMf);
            rasioT =
                    new BigDecimal(otBiaRasioOntop.getValue().toString().replaceAll(" ",
                                                                                    "").replaceAll("%",
                                                                                                   ""));
            rasioTotal = RasioMf.add(rasioT);
            String Total = rasioTotal.toString();
            otBiaRasioTotal.setSubmittedValue(Total);

            rOntop = totalOntop;
            String rasio =
                otBiaRasioMf.getValue() == "" ? "0" : otBiaRasioMf.getValue() ==
                                                      null ? "0" :
                                                      otBiaRasioMf.getValue().toString();
            rasioT =
                    new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                   ""));
            ontop =
                    rOntop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                   RoundingMode.HALF_UP);

            otBiaOntop.setSubmittedValue(totalOntop);
            RasioOntop =
                    rOntop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                   RoundingMode.HALF_UP);
            String rasOntop = RasioOntop.toString();
            otBiaRasioOntop.setSubmittedValue(rasOntop);

            r.setAttribute("BiaOntop", totalOntop);
            r.setAttribute("BiaRasionOntop", ontop);
            r.setAttribute("BiaRasioTotal", Total);
            r.setAttribute("BiaMf", rMf);
            r.setAttribute("BiaRasioMf", rasMf);

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaOntop);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioOntop);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioTotal);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaMf);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioMf);
        }
    }

    public void refreshBiayaOntop(ValueChangeEvent valueChangeEvent) {
        String BiayaIdSel = "";
        BigDecimal NewBiayaOntop = zeroNum.getBigDecimalValue();
        BigDecimal CurBiayaMf = zeroNum.getBigDecimalValue();
        BigDecimal TotOtMf = zeroNum.getBigDecimalValue();
        Number TotOtMfNum = zeroNum;
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("BiayaView1Iterator");
        ViewObject voTableDatasel = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableDatasel.getCurrentRow();
        if (rowSelected.getAttribute("BiayaId") != null) {
            BiayaIdSel = rowSelected.getAttribute("BiayaId").toString();
            NewBiayaOntop =
                    new BigDecimal((String)valueChangeEvent.getNewValue() ==
                                   null ? "0" :
                                   (String)valueChangeEvent.getNewValue());
            CurBiayaMf =
                    ((Number)rowSelected.getAttribute("BiayaYearly") == null ?
                     zeroNum :
                     (Number)rowSelected.getAttribute("BiayaYearly")).getBigDecimalValue();
            TotOtMf = CurBiayaMf.add(NewBiayaOntop);

            try {
                TotOtMfNum = new Number(TotOtMf);
            } catch (SQLException e) {
                TotOtMfNum = zeroNum;
            }

            rowSelected.setAttribute("BiayaPrice", TotOtMfNum);
            rowSelected.setAttribute("BiayaTotAmt", TotOtMfNum);
            itTotAmt.setSubmittedValue(TotOtMfNum);
            itBiaPrice.setSubmittedValue(TotOtMfNum);
        }

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row row = dciterTarget.getCurrentRow();
        BigDecimal RasioOntop = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;
        Number value =
            (Number)row.getAttribute("Value") == null ? new Number(0) :
            (Number)row.getAttribute("Value");
        if (value.compareTo(zeroNum) > 0 || value.compareTo(zeroNum) < 0) {
            DCIteratorBinding BiaIterator =
                ADFUtils.findIterator("BiayaView1Iterator");
            ViewObject voTableDataOT = BiaIterator.getViewObject();
            RowSetIterator BiaIter = voTableDataOT.createRowSetIterator(null);
            BigDecimal valueOTsel = BigDecimal.ZERO;
            BigDecimal totalOT = BigDecimal.ZERO;
            while (BiaIter.hasNext()) {
                Row r = BiaIter.next();
                String id = r.getAttribute("BiayaId").toString();
                if (id.equalsIgnoreCase(BiayaIdSel)) {
                    BigDecimal newChangedMfValue =
                        new BigDecimal(valueChangeEvent.getNewValue() == "" ?
                                       "0" :
                                       valueChangeEvent.getNewValue() == null ?
                                       "0" :
                                       valueChangeEvent.getNewValue().toString());
                    valueOTsel = valueOTsel.add(newChangedMfValue);
                    valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
                }
                Number MF =
                    (Number)r.getAttribute("BiayaNonYearly") == null ? new Number(0) :
                    (Number)r.getAttribute("BiayaNonYearly");
                totalOT = totalOT.add(MF.getBigDecimalValue());
            }
            BiaIter.closeRowSetIterator();
            String rasio =
                otBiaRasioMf.getValue() == "" ? "0" : otBiaRasioMf.getValue() ==
                                                      null ? "0" :
                                                      otBiaRasioMf.getValue().toString();
            rasioT =
                    new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                   ""));
            otBiaOntop.setSubmittedValue(totalOT);
            RasioOntop =
                    totalOT.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                    RoundingMode.HALF_UP);
            BigDecimal rasOntop = RasioOntop;

            otBiaRasioOntop.setSubmittedValue(rasOntop);
            rasioTotal = RasioOntop.add(rasioT);
            String total = rasioTotal.toString();
            otBiaRasioTotal.setSubmittedValue(total);
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            Row r = dciterPromoProduk.getCurrentRow();
            r.setAttribute("BiaOntop", totalOT);
            r.setAttribute("BiaRasionOntop", rasOntop);
            r.setAttribute("BiaRasioTotal", total);

            OperationBinding operationBinding =
                bindingsSelRow.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaOntop);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioOntop);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioTotal);
        }
    }

    public void refreshBiayaMf(ValueChangeEvent valueChangeEvent) {
        String BiayaIdSel = "";
        BigDecimal NewBiayaMf = zeroNum.getBigDecimalValue();
        BigDecimal CurBiayaOntop = zeroNum.getBigDecimalValue();
        BigDecimal TotOtMf = zeroNum.getBigDecimalValue();
        Number TotOtMfNum = zeroNum;
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("BiayaView1Iterator");
        ViewObject voTableDatasel = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableDatasel.getCurrentRow();
        if (rowSelected.getAttribute("BiayaId") != null) {
            BiayaIdSel = rowSelected.getAttribute("BiayaId").toString();
            NewBiayaMf =
                    new BigDecimal((String)valueChangeEvent.getNewValue() ==
                                   null ? "0" :
                                   (String)valueChangeEvent.getNewValue());
            CurBiayaOntop =
                    ((Number)rowSelected.getAttribute("BiayaNonYearly") ==
                     null ? zeroNum :
                     (Number)rowSelected.getAttribute("BiayaNonYearly")).getBigDecimalValue();
            TotOtMf = CurBiayaOntop.add(NewBiayaMf);

            try {
                TotOtMfNum = new Number(TotOtMf);
            } catch (SQLException e) {
                TotOtMfNum = zeroNum;
            }

            rowSelected.setAttribute("BiayaPrice", TotOtMfNum);
            rowSelected.setAttribute("BiayaTotAmt", TotOtMfNum);
            itTotAmt.setSubmittedValue(TotOtMfNum);
            itBiaPrice.setSubmittedValue(TotOtMfNum);
        }
        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row row = dciterTarget.getCurrentRow();
        BigDecimal RasioOntop = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;
        Number value =
            (Number)row.getAttribute("Value") == null ? new Number(0) :
            (Number)row.getAttribute("Value");
        if (value.getBigDecimalValue() != BigDecimal.ZERO) {
            DCIteratorBinding BiaIterator =
                ADFUtils.findIterator("BiayaView1Iterator");
            ViewObject voTableDataOT = BiaIterator.getViewObject();
            RowSetIterator BiaIter = voTableDataOT.createRowSetIterator(null);
            BigDecimal valueOTsel = BigDecimal.ZERO;
            BigDecimal totalOT = BigDecimal.ZERO;
            while (BiaIter.hasNext()) {
                Row r = BiaIter.next();
                String id = r.getAttribute("BiayaId").toString();
                if (id.equalsIgnoreCase(BiayaIdSel)) {
                    BigDecimal newChangedMfValue =
                        new BigDecimal(valueChangeEvent.getNewValue() == "" ?
                                       "0" :
                                       valueChangeEvent.getNewValue() == null ?
                                       "0" :
                                       valueChangeEvent.getNewValue().toString());
                    valueOTsel = valueOTsel.add(newChangedMfValue);
                    valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
                }
                Number MF =
                    (Number)r.getAttribute("BiayaYearly") == null ? new Number(0) :
                    (Number)r.getAttribute("BiayaYearly");
                totalOT = totalOT.add(MF.getBigDecimalValue());
            }
            BiaIter.closeRowSetIterator();
            String rasio =
                otBiaRasioOntop.getValue() == "" ? "0" : otBiaRasioOntop.getValue() ==
                                                         null ? "0" :
                                                         otBiaRasioOntop.getValue().toString();
            rasioT =
                    new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                   ""));
            otBiaMf.setSubmittedValue(totalOT);
            RasioOntop =
                    totalOT.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                    RoundingMode.HALF_UP);
            BigDecimal rasOntop = RasioOntop;

            otBiaRasioMf.setSubmittedValue(rasOntop);
            rasioTotal = RasioOntop.add(rasioT);
            String total = rasioTotal.toString();
            otBiaRasioTotal.setSubmittedValue(total);
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            Row r = dciterPromoProduk.getCurrentRow();
            r.setAttribute("BiaMf", totalOT);
            r.setAttribute("BiaRasioMf", rasOntop);
            r.setAttribute("BiaRasioTotal", total);
            OperationBinding operationBinding =
                bindingsSelRow.getOperationBinding("Commit");
            operationBinding.execute();
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaMf);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioMf);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBiaRasioTotal);
        }
    }

    public void resetProposal(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();

        AttributeBinding propNoAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalNo");
        String proposalNo =
            (String)propNoAttr.getInputValue() == null ? "Auto Generated" :
            (String)propNoAttr.getInputValue();

        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        //Get current row key
        Key parentKey = parentIter.getCurrentRow().getKey();

        OperationBinding operationBindingRollback =
            bindings.getOperationBinding("Rollback");
        operationBindingRollback.execute();

        if (parentKey != null &&
            !proposalNo.equalsIgnoreCase("Auto Generated")) {
            //Set again row key as current row
            parentIter.setCurrentRowWithKey(parentKey.toStringFormat(true));
        }
    }

    public void setNewPromoPeriodFrom(RichInputDate newPromoPeriodFrom) {
        this.newPromoPeriodFrom = newPromoPeriodFrom;
    }

    public RichInputDate getNewPromoPeriodFrom() {
        return newPromoPeriodFrom;
    }

    public void setNewPromoPeriodTo(RichInputDate newPromoPeriodTo) {
        this.newPromoPeriodTo = newPromoPeriodTo;
    }

    public RichInputDate getNewPromoPeriodTo() {
        return newPromoPeriodTo;
    }

    public void setTextCopyProposal(String textCopyProposal) {
        this.textCopyProposal = textCopyProposal;
    }

    public String getTextCopyProposal() {
        newPromoPeriodFrom.setValue(null);
        newPromoPeriodTo.setValue(null);
        textCopyProposal = "Anda akan melakukan copy proposal no \"";
        return textCopyProposal;
    }

    public void setCopyPropMessage(RichMessages copyPropMessage) {
        this.copyPropMessage = copyPropMessage;
    }

    public RichMessages getCopyPropMessage() {
        return copyPropMessage;
    }

    public void newPromoFromChange(ValueChangeEvent valueChangeEvent) {
        FacesContext fctx = FacesContext.getCurrentInstance();
        DefaultDateFormatter ddf = new DefaultDateFormatter();
        String dateValueStart = "", dateValueEnd = "", dateTimeValueStart =
            "", dateTimeValueEnd = "";

        try {
            dateValueStart =
                    ddf.format("yyyy-MM-dd", newPromoPeriodFrom.getValue());
            dateTimeValueStart = dateValueStart + " 00:00:00";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueStart = "";
        }

        try {
            dateValueEnd =
                    ddf.format("yyyy-MM-dd", newPromoPeriodTo.getValue());
            dateTimeValueEnd = dateValueEnd + " 23:59:59";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueEnd = "";
        }

        if (dateValueStart.length() > 0 && dateValueEnd.length() > 0) {
            boolean dateValid = false;
            try {
                dateValid =
                        ADFUtils.compareDates(dateTimeValueStart, dateTimeValueEnd);
            } catch (ParseException e) {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Failed to parse date value.",
                                     "Failed to parse date value.");
                fctx.addMessage(null, msg);
            }

            if (dateValid) {
            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.",
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.");
                fctx.addMessage(null, msg);
            }
        }
    }

    public void newPromoToChange(ValueChangeEvent valueChangeEvent) {
        FacesContext fctx = FacesContext.getCurrentInstance();
        DefaultDateFormatter ddf = new DefaultDateFormatter();
        String dateValueStart = "", dateValueEnd = "", dateTimeValueStart =
            "", dateTimeValueEnd = "";

        try {
            dateValueStart =
                    ddf.format("yyyy-MM-dd", newPromoPeriodFrom.getValue());
            dateTimeValueStart = dateValueStart + " 00:00:00";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueStart = "";
        }

        try {
            dateValueEnd =
                    ddf.format("yyyy-MM-dd", newPromoPeriodTo.getValue());
            dateTimeValueEnd = dateValueEnd + " 23:59:59";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueEnd = "";
        }

        if (dateValueStart.length() > 0 && dateValueEnd.length() > 0) {
            boolean dateValid = false;
            try {
                dateValid =
                        ADFUtils.compareDates(dateTimeValueStart, dateTimeValueEnd);
            } catch (ParseException e) {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Failed to parse date value.",
                                     "Failed to parse date value.");
                fctx.addMessage(null, msg);
            }

            if (dateValid) {
            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.",
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.");
                fctx.addMessage(null, msg);
            }
        }
    }

    public void setItDaysCount(RichInputText itDaysCount) {
        this.itDaysCount = itDaysCount;
    }

    public RichInputText getItDaysCount() {
        return itDaysCount;
    }

    public RichOutputText getOtdaysview() {
        return otdaysview;
    }

    public void setOtdaysview(RichOutputText otdaysview) {
        this.otdaysview = otdaysview;
    }

    public void setItProgDays(RichInputText itProgDays) {
        this.itProgDays = itProgDays;
    }

    public RichInputText getItProgDays() {
        return itProgDays;
    }

    public void discTypeValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BindingContainer bindings = getBindings();

        AttributeBinding propNoAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalNo");
        String proposalNo =
            (String)propNoAttr.getInputValue() == null ? "Auto Generated" :
            (String)propNoAttr.getInputValue();

        DCIteratorBinding dciterPP =
            ADFUtils.findIterator("PromoProdukView1Iterator");
        dciterPP.executeQuery();

        if (!proposalNo.equalsIgnoreCase("Auto Generated")) {
            String TipePot = valueChangeEvent.getNewValue().toString();
            String TipePotOld = valueChangeEvent.getOldValue().toString();
            ADFContext adfCtx = ADFContext.getCurrent();
            Map pageFlowScope = adfCtx.getPageFlowScope();
            pageFlowScope.put("TipePot", TipePot);
            pageFlowScope.put("TipePotOld", TipePotOld);
            if ((Integer.valueOf(valueChangeEvent.getNewValue().toString()) !=
                 0 && dciterPP.getEstimatedRowCount() > 0) ||
                dciterPP.getEstimatedRowCount() > 0) {
                RichPopup.PopupHints hints = new RichPopup.PopupHints();
                pttpeProposal.show(hints);
                /*   if (Integer.valueOf(valueChangeEvent.getNewValue().toString()) == 2) {
                    socMixQtyPromo.setRequired(true);
                    socMixQtyPromo.setValue(0);
                } else {
                    socMixQtyPromo.setRequired(false);
                    socMixQtyPromo.setValue(0);
                } */
            }
        }
    }

    public void setSocMixQtyPromo(RichSelectOneChoice socMixQtyPromo) {
        this.socMixQtyPromo = socMixQtyPromo;
    }

    public RichSelectOneChoice getSocMixQtyPromo() {
        return socMixQtyPromo;
    }

    public void setSwitchMain(UIXSwitcher switchMain) {
        this.switchMain = switchMain;
    }

    public UIXSwitcher getSwitchMain() {
        return switchMain;
    }

    public void setItlovUomTarget(RichInputListOfValues itlovUomTarget) {
        this.itlovUomTarget = itlovUomTarget;
    }

    public RichInputListOfValues getItlovUomTarget() {
        return itlovUomTarget;
    }

    public void setBtnPriceListpromoBrng(RichCommandButton btnPriceListpromoBrng) {
        this.btnPriceListpromoBrng = btnPriceListpromoBrng;
    }

    public RichCommandButton getBtnPriceListpromoBrng() {
        return btnPriceListpromoBrng;
    }

    public void setPpricelistTarget(RichPopup ppricelistTarget) {
        this.ppricelistTarget = ppricelistTarget;
    }

    public RichPopup getPpricelistTarget() {
        return ppricelistTarget;
    }

    public void showPriceListTarget(ActionEvent actionEvent) {
        /*
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        String prodCombItem = "";
        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        AttributeBinding usrTypeCreatorAttr =
            (AttributeBinding)bindings.getControlBinding("UserTypeCreator");
        String srcUsrTypeCreator = (String)usrTypeCreatorAttr.getInputValue();
        AttributeBinding custTypeHoAttr =
            (AttributeBinding)bindings.getControlBinding("RegCustFlag1");
        AttributeBinding custTypeAreaAttr =
            (AttributeBinding)bindings.getControlBinding("CustRegFlag");
        AttributeBinding prodCombAttr =
            (AttributeBinding)bindings.getControlBinding("ProductCombination");
        String prodComb = (String)prodCombAttr.getInputValue();
        */
        // Get variant list
        ArrayList<String> prodVariantList = new ArrayList<String>();
        DCIteratorBinding dciterProdVariant =
            ADFUtils.findIterator("ProdukVariantView1Iterator");

        long rowCountVariant = dciterProdVariant.getEstimatedRowCount();
        if (rowCountVariant > 0) {
            for (Row r : dciterProdVariant.getAllRowsInRange()) {
                String variantCode = (String)r.getAttribute("ProdVariant");
                prodVariantList.add(variantCode);
            }
        }
        // Get item code list
        String prodItemCodeList = "";
        DCIteratorBinding dciterProdItem =
            ADFUtils.findIterator("ProdukItemView1Iterator");

        long rowCountItem = dciterProdItem.getEstimatedRowCount();
        if (rowCountItem > 0) {
            int i = 1;
            for (Row r : dciterProdItem.getAllRowsInRange()) {
                String itemCode = (String)r.getAttribute("ProdItem");
                if (i < rowCountItem) {
                    prodItemCodeList = prodItemCodeList + itemCode + ";";
                } else {
                    prodItemCodeList = prodItemCodeList + itemCode;
                }
                i = i + 1;
            }
        }

        //String currVariant = prodVariantList.get(0);
        /*
        if ((currVariant.equalsIgnoreCase(variantAll) && rowCountItem > 0) ||
           (!currVariant.equalsIgnoreCase(variantAll) && rowCountItem == 0)) {
        */

        RichQuery queryComp = this.qryPriceListTarget;
        QueryModel queryModel = queryComp.getModel();
        QueryDescriptor queryDescriptor = queryComp.getValue();
        queryModel.reset(queryDescriptor);
        queryComp.refresh(FacesContext.getCurrentInstance());
        AdfFacesContext.getCurrentInstance().addPartialTarget(qryPriceListTarget);
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        ppricelistTarget.show(hints);

        /*
        } else {
            showPopup("\"Product Name\" pada kombinasi produk harus diisi apabila variant \"ALL\".", potmessage);
        }
        */
    }

    public void setOtHistFrom(RichOutputText otHistFrom) {
        this.otHistFrom = otHistFrom;
    }

    public RichOutputText getOtHistFrom() {
        return otHistFrom;
    }

    public void setOtHistTo(RichOutputText otHistTo) {
        this.otHistTo = otHistTo;
    }

    public RichOutputText getOtHistTo() {
        return otHistTo;
    }

    public void tableFilterProcessQuery(QueryEvent queryEvent) {
        FilterableQueryDescriptor fqd =
            (FilterableQueryDescriptor)queryEvent.getDescriptor();
        ConjunctionCriterion conjunctionCriterion =
            fqd.getConjunctionCriterion();
        List<Criterion> criterionList =
            conjunctionCriterion.getCriterionList();
        for (Criterion criterion : criterionList) {
            AttributeDescriptor attrDescriptor =
                ((AttributeCriterion)criterion).getAttribute();
            Object value = ((AttributeCriterion)criterion).getValues();
            /*
            if (attrDescriptor.getType().equals(String.class)) {
                if (value != null) {
                    ((AttributeCriterion) criterion).setValue("%" + value + "%");
                }
            }
            */
        }

        //Execute query
        ADFUtils.invokeEL("#{bindings.ProposalView1Query.processQuery}",
                          new Class[] { QueryEvent.class },
                          new Object[] { queryEvent });

        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void setItQtyMulPrice(RichInputText itQtyMulPrice) {
        this.itQtyMulPrice = itQtyMulPrice;
    }

    public RichInputText getItQtyMulPrice() {
        return itQtyMulPrice;
    }

    public void priceListOkDialogListener(ActionEvent actionEvent) {
        BigDecimal tgtQty =
            new BigDecimal(itTargetQty.getValue() == null ? "0" :
                           itTargetQty.getValue().toString().replaceAll(",",
                                                                        ""));
        DCIteratorBinding dciterPriceList =
            ADFUtils.findIterator("FcsPppcPriceListView1Iterator");
        Number priceVal = new Number(0);
        if (dciterPriceList.getEstimatedRowCount() > 0) {
            priceVal =
                    (Number)dciterPriceList.getCurrentRow().getAttribute("Price") ==
                    null ? new Number(0) :
                    (Number)dciterPriceList.getCurrentRow().getAttribute("Price");
        }

        //itTargetHarga.setSubmittedValue(priceVal);
        itTargetHarga.setSubmittedValue(priceVal);
        itTargetHargaSurogate.setSubmittedValue(priceVal);

        BigDecimal tgtHarga = new BigDecimal(priceVal.getValue());

        BigDecimal totalValue = tgtQty.multiply(tgtHarga);
        oracle.jbo.domain.Number number = null;
        try {
            number =
                    new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
        } catch (SQLException e) {
            JSFUtils.addFacesErrorMessage("Error", e.getLocalizedMessage());
        }
        itValueTotal.setValue(number);

        AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHarga);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itValueTotal);

        RichQuery queryComp = this.qryPriceList;
        QueryModel queryModel = queryComp.getModel();
        QueryDescriptor queryDescriptor = queryComp.getValue();
        queryModel.reset(queryDescriptor);
        queryComp.refresh(FacesContext.getCurrentInstance());
    }

    public void setItLovPriceBased(RichInputListOfValues itLovPriceBased) {
        this.itLovPriceBased = itLovPriceBased;
    }

    public RichInputListOfValues getItLovPriceBased() {
        return itLovPriceBased;
    }

    public void setBtnPriceListTgt(RichCommandButton btnPriceListTgt) {
        this.btnPriceListTgt = btnPriceListTgt;
    }

    public RichCommandButton getBtnPriceListTgt() {
        return btnPriceListTgt;
    }

    public void totQtyBonusValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BigDecimal newTotQtyBonusValue =
            new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                           valueChangeEvent.getNewValue() == null ? "0" :
                           valueChangeEvent.getNewValue().toString());
        Number priceVal = new Number(0);
        String PromoBonusIdSel = "";

        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        Key parentKey = dcItteratorBindings.getCurrentRow().getKey();
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("PromoBonusId").toString();
            priceVal =
                    (Number)rowSelected.getAttribute("PriceVal") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("PriceVal");

            BigDecimal tgtHarga = new BigDecimal(priceVal.getValue());

            BigDecimal totalValue = newTotQtyBonusValue.multiply(tgtHarga);
            oracle.jbo.domain.Number number = null;
            try {
                number =
                        new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage("Error",
                                              e.getLocalizedMessage());
            }
            rowSelected.setAttribute("QtyMulPrice", number);
            dcItteratorBindings.getDataControl().commitTransaction();
            dcItteratorBindings.setCurrentRowWithKey(parentKey.toStringFormat(true));
            itQtyMulPrice.setSubmittedValue(number);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itQtyMulPrice);
        }
    }

    public void priceValValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BigDecimal newPriceValValue =
            new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                           valueChangeEvent.getNewValue() == null ? "0" :
                           valueChangeEvent.getNewValue().toString());
        Number qtyFrom = new Number(0);
        String PromoBonusIdSel = "";

        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        Key parentKey = dcItteratorBindings.getCurrentRow().getKey();
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("PromoBonusId").toString();
            qtyFrom =
                    (Number)rowSelected.getAttribute("QtyFrom") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("QtyFrom");

            BigDecimal totQtyBonus = new BigDecimal(qtyFrom.getValue());

            BigDecimal totalValue = newPriceValValue.multiply(totQtyBonus);
            oracle.jbo.domain.Number number = null;
            try {
                number =
                        new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage("Error",
                                              e.getLocalizedMessage());
            }
            rowSelected.setAttribute("QtyMulPrice", number);
            //dcItteratorBindings.getDataControl().commitTransaction();
            dcItteratorBindings.setCurrentRowWithKey(parentKey.toStringFormat(true));
            itQtyMulPrice.setSubmittedValue(number);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itQtyMulPrice);
        }
    }

    public void setItlovPriceBasedPromoBarang(RichInputListOfValues itlovPriceBasedPromoBarang) {
        this.itlovPriceBasedPromoBarang = itlovPriceBasedPromoBarang;
    }

    public RichInputListOfValues getItlovPriceBasedPromoBarang() {
        return itlovPriceBasedPromoBarang;
    }

    public void setQryPriceList(RichQuery qryPriceList) {
        this.qryPriceList = qryPriceList;
    }

    public RichQuery getQryPriceList() {
        return qryPriceList;
    }

    public void setItTargetHargaSurogate(RichInputText itTargetHargaSurogate) {
        this.itTargetHargaSurogate = itTargetHargaSurogate;
    }

    public RichInputText getItTargetHargaSurogate() {
        return itTargetHargaSurogate;
    }

    public void priceBasedValueChangeListener(ValueChangeEvent valueChangeEvent) {
        String priceBased =
            valueChangeEvent.getNewValue() == null ? "" : valueChangeEvent.getNewValue().toString();
        if (priceBased.equalsIgnoreCase("PRICELIST")) {
            itTargetHarga.setSubmittedValue(new Number(0));
            itTargetHargaSurogate.setSubmittedValue(new Number(0));

            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHarga);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHargaSurogate);
        } else {
            itTargetHarga.setSubmittedValue(new Number(0));
            itTargetHargaSurogate.setSubmittedValue(new Number(0));
            itValueTotal.setSubmittedValue(new Number(0));
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHarga);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHargaSurogate);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itValueTotal);
        }
    }

    public void showPriceListInPromoBarangPopup(ActionEvent actionEvent) {
        RichQuery queryComp = this.qryPriceList;
        QueryModel queryModel = queryComp.getModel();
        QueryDescriptor queryDescriptor = queryComp.getValue();
        queryModel.reset(queryDescriptor);
        queryComp.refresh(FacesContext.getCurrentInstance());
        AdfFacesContext.getCurrentInstance().addPartialTarget(qryPriceList);
        RichPopup.PopupHints hints = new RichPopup.PopupHints();
        ppriceListpromoBarang.show(hints);
    }

    public void setPpriceListpromoBarang(RichPopup ppriceListpromoBarang) {
        this.ppriceListpromoBarang = ppriceListpromoBarang;
    }

    public RichPopup getPpriceListpromoBarang() {
        return ppriceListpromoBarang;
    }

    public void setQryPriceListTarget(RichQuery qryPriceListTarget) {
        this.qryPriceListTarget = qryPriceListTarget;
    }

    public RichQuery getQryPriceListTarget() {
        return qryPriceListTarget;
    }

    public void priceListCancelDialogListener(ActionEvent actionEvent) {
        AdfFacesContext context = AdfFacesContext.getCurrentInstance();
        Map vScope = context.getViewScope();
        String currPrice =
            ((String)vScope.get("CurrentPrice")).replaceAll(",", "");
        BigDecimal currPriceBigDec = new BigDecimal(currPrice);

        Number currPriceNum = new Number(0);
        try {
            new oracle.jbo.domain.Number(df2dgt.format(currPriceBigDec).toString());
        } catch (SQLException sqle) {
            JSFUtils.addFacesErrorMessage("Error", sqle.getLocalizedMessage());
        }

        itTargetHarga.setSubmittedValue(currPriceNum);
        itTargetHargaSurogate.setSubmittedValue(currPriceNum);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHarga);
        AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHargaSurogate);
    }

    public void UomEvent(ValueChangeEvent valueChangeEvent) {
        String uom =
            valueChangeEvent.getNewValue() == null ? "" : valueChangeEvent.getNewValue().toString();
        if (uom != null) {
            itLovPriceBased.setSubmittedValue("MANUAL");
            itTargetHarga.setSubmittedValue(new Number(0));
            itTargetHargaSurogate.setSubmittedValue(new Number(0));
            itValueTotal.setSubmittedValue(new Number(0));
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHarga);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHargaSurogate);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itValueTotal);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itLovPriceBased);
        }
    }

    public void priceBasedValueBarangBonusChangeListener(ValueChangeEvent valueChangeEvent) {
        String priceBased =
            valueChangeEvent.getNewValue() == null ? "" : valueChangeEvent.getNewValue().toString();
        if (priceBased.equalsIgnoreCase("PRICELIST")) {
            itPricePromoBonus.setSubmittedValue(new Number(0));
            AdfFacesContext.getCurrentInstance().addPartialTarget(itPricePromoBonus);
        } else {
            itTargetHarga.setSubmittedValue(new Number(0));
            itQtyMulPrice.setSubmittedValue(new Number(0));
            itPricePromoBonus.setSubmittedValue(new Number(0));
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTargetHarga);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itQtyMulPrice);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itPricePromoBonus);
        }
    }

    public void inputPriceByReturnListerner(ReturnPopupEvent returnPopupEvent) {
        String PromoBonusIdSel = "";
        String promoProdId = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            String lovPriceBy = "";
            ADFContext adfCtx = ADFContext.getCurrent();
            Map pageFlowScope = adfCtx.getPageFlowScope();
            Object ppId = pageFlowScope.get("PromoBonusId");
            Object lovPricebyscope = pageFlowScope.get("lovPriceBy");
            promoProdId = ppId.toString();
            PromoBonusIdSel =
                    rowSelected.getAttribute("PromoBonusId").toString();
            lovPriceBy = itlovPriceBasedPromoBarang.getValue().toString();
            if (PromoBonusIdSel.equalsIgnoreCase(promoProdId)) {
                if (lovPriceBy.equalsIgnoreCase("")) {
                    if (lovPricebyscope.toString().equalsIgnoreCase("MANUAL")) {
                        itlovPriceBasedPromoBarang.setSubmittedValue("MANUAL");
                        rowSelected.setAttribute("InputPriceBy", "MANUAL");
                        dcItteratorBindings.getDataControl().commitTransaction();
                        AdfFacesContext.getCurrentInstance().addPartialTarget(itlovPriceBasedPromoBarang);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(btnBonusPriceList);

                    } else {
                        itlovPriceBasedPromoBarang.setSubmittedValue("PRICELIST");
                        rowSelected.setAttribute("InputPriceBy", "PRICELIST");
                        dcItteratorBindings.getDataControl().commitTransaction();
                        AdfFacesContext.getCurrentInstance().addPartialTarget(itlovPriceBasedPromoBarang);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(itPricePromoBonus);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(btnBonusPriceList);
                    }
                }
            }
        }
    }

    public void inputpriceByLaunchPopupListener(LaunchPopupEvent launchPopupEvent) {
        String PromoBonusIdSel = "";
        String lovPriceBy = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("PromoBonusId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("PromoBonusId").toString();
            lovPriceBy = itlovPriceBasedPromoBarang.getValue().toString();
            ADFContext adfCtx = ADFContext.getCurrent();
            Map pageFlowScope = adfCtx.getPageFlowScope();
            Object ppId = pageFlowScope.put("PromoBonusId", PromoBonusIdSel);
            Object lovPricebyscope =
                pageFlowScope.put("lovPriceBy", lovPriceBy);
        }
    }

    public void setBtnBonusPriceList(RichCommandButton btnBonusPriceList) {
        this.btnBonusPriceList = btnBonusPriceList;
    }

    public RichCommandButton getBtnBonusPriceList() {
        return btnBonusPriceList;
    }

    public void setItKelipatanDisc(RichInputText itKelipatanDisc) {
        this.itKelipatanDisc = itKelipatanDisc;
    }

    public RichInputText getItKelipatanDisc() {
        return itKelipatanDisc;
    }

    public void setOtKelipatanDisc(RichOutputText otKelipatanDisc) {
        this.otKelipatanDisc = otKelipatanDisc;
    }

    public RichOutputText getOtKelipatanDisc() {
        return otKelipatanDisc;
    }

    public void setLovTipePerhitungan(RichInputListOfValues lovTipePerhitungan) {
        this.lovTipePerhitungan = lovTipePerhitungan;
    }

    public RichInputListOfValues getLovTipePerhitungan() {
        return lovTipePerhitungan;
    }

    public void setItqtyFromDisc(RichInputText itqtyFromDisc) {
        this.itqtyFromDisc = itqtyFromDisc;
    }

    public RichInputText getItqtyFromDisc() {
        return itqtyFromDisc;
    }

    public void qtyToDiscEvent(ValueChangeEvent valueChangeEvent) {
        FacesContext fctx = FacesContext.getCurrentInstance();
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcIterDisc =
            bindingsSelRow.findIteratorBinding("DiscountView1Iterator");
        Key discKey = dcIterDisc.getCurrentRow().getKey();
        ViewObject voDisc = dcIterDisc.getViewObject();
        Row rowSelected = voDisc.getCurrentRow();

        if (rowSelected.getAttribute("DiscountId") != null) {
            Number qtyFrom = new Number(0);
            Number oldValue = (Number)valueChangeEvent.getOldValue();
            Number newValue = (Number)valueChangeEvent.getNewValue();
            qtyFrom =
                    (Number)rowSelected.getAttribute("QtyFrom") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("QtyFrom");

            if (qtyFrom.compareTo(newValue) > 0) {
                itqtyToDisc.setSubmittedValue(oldValue);
                rowSelected.setAttribute("QtyTo", oldValue);
                dcIterDisc.setCurrentRowWithKey(discKey.toStringFormat(true));
                AdfFacesContext.getCurrentInstance().addPartialTarget(itqtyToDisc);
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_WARN, "Nilai \"Qty To\" harus lebih besar dari \"Qty From\".",
                                     "Nilai \"Qty To\" harus lebih besar dari \"Qty From\".");
                fctx.addMessage(null, msg);
            }
        }
    }

    public void setItqtyToDisc(RichInputText itqtyToDisc) {
        this.itqtyToDisc = itqtyToDisc;
    }

    public RichInputText getItqtyToDisc() {
        return itqtyToDisc;
    }

    public void cancelPpDialogListener(DialogEvent dialogEvent) {
        BindingContainer bindings = getBindings();

        if (dialogEvent.getOutcome().name().equals("ok")) {

            AttributeBinding statusPropAttr =
                (AttributeBinding)bindings.getControlBinding("Status");
            statusPropAttr.setInputValue("CANCELED");

            OperationBinding operationCancelPp =
                bindings.getOperationBinding("cancelDocPp");
            operationCancelPp.execute();

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
            AdfFacesContext.getCurrentInstance().addPartialTarget(btnCancel);
            AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        }
    }

    private ArrayList<String> validateBlockRegion(String custType) {

        DCIteratorBinding dciterCustArea =
            ADFUtils.findIterator("PromoCustomerAreaView1Iterator");

        ArrayList<String> custRegCodeList = new ArrayList<String>();

        for (Row r : dciterCustArea.getAllRowsInRange()) {
            String regCode = (String)r.getAttribute("RegionCode");
            if (!custRegCodeList.contains(regCode)) {
                custRegCodeList.add(regCode);
            }
        }

        return custRegCodeList;
    }

    public void setSocTipeProposal(RichSelectOneChoice socTipeProposal) {
        this.socTipeProposal = socTipeProposal;
    }

    public RichSelectOneChoice getSocTipeProposal() {
        return socTipeProposal;
    }

    public void launchpopupDiskonListener(LaunchPopupEvent launchPopupEvent) {
        String PromoBonusIdSel = "";
        String lovDiscTipePerhitungan = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("DiscountView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("DiscountId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("DiscountId").toString();
            lovDiscTipePerhitungan =
                    lovTipePerhitungan.getValue() == null ? "" :
                    lovTipePerhitungan.getValue().toString();
            if (lovDiscTipePerhitungan.equalsIgnoreCase("")) {
                ADFContext adfCtx = ADFContext.getCurrent();
                Map pageFlowScope = adfCtx.getPageFlowScope();
                //                Object ppId = pageFlowScope.get("DiscountId");
                Object lovPricebyscope = pageFlowScope.get("lovTipeNull");
                lovDiscTipePerhitungan = lovPricebyscope.toString();
                Object DiscId =
                    pageFlowScope.put("DiscountId", PromoBonusIdSel);
                Object lovTipePerhitunganscope =
                    pageFlowScope.put("lovTipePerhitungan",
                                      lovDiscTipePerhitungan);
                rowSelected.setAttribute("TipePerhitungan",
                                         lovDiscTipePerhitungan);
                lovTipePerhitungan.setSubmittedValue(lovDiscTipePerhitungan);
                AdfFacesContext.getCurrentInstance().addPartialTarget(lovTipePerhitungan);
            } else {
                ADFContext adfCtx = ADFContext.getCurrent();
                Map pageFlowScope = adfCtx.getPageFlowScope();
                Object DiscId =
                    pageFlowScope.put("DiscountId", PromoBonusIdSel);
                Object lovTipePerhitunganscope =
                    pageFlowScope.put("lovTipePerhitungan",
                                      lovDiscTipePerhitungan);
                rowSelected.setAttribute("TipePerhitungan",
                                         lovDiscTipePerhitungan);
                lovTipePerhitungan.setSubmittedValue(lovDiscTipePerhitungan);
                AdfFacesContext.getCurrentInstance().addPartialTarget(lovTipePerhitungan);
            }
        }
    }

    public void returnPopupDiskonListener(ReturnPopupEvent returnPopupEvent) {
        String PromoBonusIdSel = "";
        String promoProdId = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("DiscountView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("DiscountId") != null) {
            String lovPriceBy = "";
            ADFContext adfCtx = ADFContext.getCurrent();
            Map pageFlowScope = adfCtx.getPageFlowScope();
            Object ppId = pageFlowScope.get("DiscountId");
            Object lovPricebyscope = pageFlowScope.get("lovTipePerhitungan");
            promoProdId = ppId.toString();
            PromoBonusIdSel =
                    rowSelected.getAttribute("DiscountId").toString();
            lovPriceBy =
                    lovTipePerhitungan.getValue() == null ? "" : lovTipePerhitungan.getValue().toString();
            if (PromoBonusIdSel.equalsIgnoreCase(promoProdId)) {
                if (lovPriceBy.equalsIgnoreCase("")) {
                    if (lovPricebyscope.toString().equalsIgnoreCase(tipeHitungTdkKelipatan)) {
                        lovTipePerhitungan.setSubmittedValue(tipeHitungTdkKelipatan);
                        Object DiscId =
                            pageFlowScope.put("DiscountId", PromoBonusIdSel);
                        Object lovTipePerhitunganscope =
                            pageFlowScope.put("lovTipeNull",
                                              tipeHitungTdkKelipatan);
                        rowSelected.setAttribute("TipePerhitungan",
                                                 tipeHitungTdkKelipatan);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(lovTipePerhitungan);
                    } else {
                        lovTipePerhitungan.setSubmittedValue(tipeHitungKelipatan);
                        Object DiscId =
                            pageFlowScope.put("DiscountId", PromoBonusIdSel);
                        Object lovTipePerhitunganscope =
                            pageFlowScope.put("lovTipeNull",
                                              tipeHitungKelipatan);
                        rowSelected.setAttribute("TipePerhitungan",
                                                 tipeHitungKelipatan);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(lovTipePerhitungan);
                    }
                }
            }
        }
    }

    public void launchPopupListenerTipePotDisc(LaunchPopupEvent launchPopupEvent) {
        String PromoBonusIdSel = "";
        String lovDiscTipePerhitungan = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("DiscountView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("DiscountId") != null) {
            PromoBonusIdSel =
                    rowSelected.getAttribute("DiscountId").toString();
            lovDiscTipePerhitungan =
                    socTypePotongan.getValue() == null ? "" : socTypePotongan.getValue().toString();
            if (lovDiscTipePerhitungan.equalsIgnoreCase("")) {
                ADFContext adfCtx = ADFContext.getCurrent();
                Map pageFlowScope = adfCtx.getPageFlowScope();
                //                Object ppId = pageFlowScope.get("DiscountId");
                Object lovPricebyscope = pageFlowScope.get("lovTipeNull");
                lovDiscTipePerhitungan = lovPricebyscope.toString();
                Object DiscId =
                    pageFlowScope.put("DiscountId", PromoBonusIdSel);
                Object lovTipePerhitunganscope =
                    pageFlowScope.put("socTypePotongan",
                                      lovDiscTipePerhitungan);
                socTypePotongan.setSubmittedValue(lovDiscTipePerhitungan);
                AdfFacesContext.getCurrentInstance().addPartialTarget(socTypePotongan);
            } else {
                ADFContext adfCtx = ADFContext.getCurrent();
                Map pageFlowScope = adfCtx.getPageFlowScope();
                Object DiscId =
                    pageFlowScope.put("DiscountId", PromoBonusIdSel);
                Object lovTipePerhitunganscope =
                    pageFlowScope.put("lovTipePerhitungan",
                                      lovDiscTipePerhitungan);
            }
        }
    }

    public void returnPopupListenerTipePotDisc(ReturnPopupEvent returnPopupEvent) {
        String PromoProdIdSel = "";
        String promoProdId = "";
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();

        DCIteratorBinding iterPromoProduk =
            bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterPromoProduk.getViewObject();
        Row rowSelectedPromoProduk = voPromoProduk.getCurrentRow();

        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("DiscountView1Iterator");
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("DiscountId") != null) {
            String lovPriceBy = "";
            ADFContext adfCtx = ADFContext.getCurrent();
            Map pageFlowScope = adfCtx.getPageFlowScope();
            Object ppId = pageFlowScope.get("DiscountId");
            Object lovPricebyscope = pageFlowScope.get("lovTipePerhitungan");
            promoProdId = ppId.toString();
            PromoProdIdSel = rowSelected.getAttribute("DiscountId").toString();
            lovPriceBy =
                    socTypePotongan.getValue() == null ? "" : socTypePotongan.getValue().toString();
            if (PromoProdIdSel.equalsIgnoreCase(promoProdId)) {
                if (lovPriceBy.equalsIgnoreCase("")) {
                    if (lovPricebyscope.toString().equalsIgnoreCase(tipePotonganPercent)) {
                        socTypePotongan.setSubmittedValue(tipePotonganPercent);
                        rowSelected.setAttribute("TipePotongan",
                                                 tipePotonganPercent);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(socTypePotongan);
                    } else {
                        socTypePotongan.setSubmittedValue(tipePotonganAmount);
                        rowSelected.setAttribute("TipePotongan",
                                                 tipePotonganAmount);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(socTypePotongan);
                    }
                }
            }

            if (PromoProdIdSel.equalsIgnoreCase(promoProdId)) {
                rowOntop.setSubmittedValue(null);
                rowMf.setSubmittedValue(null);
                rowSelected.setAttribute("DiscNonYearly", null);
                rowSelected.setAttribute("DiscYearly", null);
                AdfFacesContext.getCurrentInstance().addPartialTarget(rowOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(rowMf);

                otOnTop.setSubmittedValue(0);
                otMF.setSubmittedValue(0);
                otRasioOntop.setSubmittedValue(0);
                otRasioMf.setSubmittedValue(0.00);
                otRasioTotal.setSubmittedValue(0.00);
                rowSelectedPromoProduk.setAttribute("DiscOnTop", 0);
                rowSelectedPromoProduk.setAttribute("DiscMf", 0);
                rowSelectedPromoProduk.setAttribute("DiscRasioOnTop", 0.00);
                rowSelectedPromoProduk.setAttribute("DiscRasioMf", 0.00);
                rowSelectedPromoProduk.setAttribute("DiscRasioTotal1", 0.00);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            }
        }
    }

    public void setPttpeProposal(RichPopup pttpeProposal) {
        this.pttpeProposal = pttpeProposal;
    }

    public RichPopup getPttpeProposal() {
        return pttpeProposal;
    }

    public void changeTypeProposalEvent(DialogEvent dialogEvent) {
        BindingContainer bindings = getBindings();
        if (dialogEvent.getOutcome().name().equals("yes")) {
            PromoProposalAMImpl promoProposalAM =
                (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
            //                String TipePot = "";
            ADFContext adfCtx = ADFContext.getCurrent();
            Map pageFlowScope = adfCtx.getPageFlowScope();
            //                Object TipePot = pageFlowScope.get("TipePot");
            String TipePot =
                socTipeProposal.getValue() == null ? "" : socTipeProposal.getValue().toString();
            //                System.out.println("TipePot "+TipePot);
            if (TipePot.equalsIgnoreCase("1")) {
                DCIteratorBinding proposal =
                    ADFUtils.findIterator("ProposalView1Iterator");
                ViewObject voTableData = proposal.getViewObject();
                Row rowSelected = voTableData.getCurrentRow();
                String proposalNum =
                    rowSelected.getAttribute("ProposalNo").toString();
                if (!proposalNum.equalsIgnoreCase("Auto Generated")) {
                    String proposalId =
                        rowSelected.getAttribute("ProposalId").toString();
                    DCIteratorBinding dciterPP =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    ViewObject voTableDataPp = dciterPP.getViewObject();
                    if (dciterPP.getEstimatedRowCount() > 0) {
                        //                          for(Row  rPromoProd : dciterPP.getAllRowsInRange()){
                        RowSetIterator iterPP =
                            voTableDataPp.createRowSetIterator(null);
                        while (iterPP.hasNext()) {
                            Row rPromoProd = iterPP.next();
                            String PropIdPP =
                                rPromoProd.getAttribute("ProposalId").toString();
                            if (proposalId.equalsIgnoreCase(PropIdPP)) {
                                String PromProdId =
                                    rPromoProd.getAttribute("PromoProdukId").toString();
                                DCIteratorBinding dciterPromBon =
                                    ADFUtils.findIterator("PromoBonusView1Iterator");
                                ViewObject voTableDataPb =
                                    dciterPromBon.getViewObject();
                                if (dciterPromBon.getEstimatedRowCount() > 0) {
                                    RowSetIterator iterPb =
                                        voTableDataPb.createRowSetIterator(null);
                                    //                                    for(Row rProMBonus : dciterPromBon.getAllRowsInRange() ){
                                    while (iterPb.hasNext()) {
                                        Row rProMBonus = iterPb.next();
                                        String ProProdIdBon =
                                            rProMBonus.getAttribute("PromoProdukId").toString();
                                        String ProBonId =
                                            rProMBonus.getAttribute("PromoBonusId").toString();
                                        //                                   System.out.println("ProProdIdBon 1 "+ProProdIdBon);
                                        //                                   System.out.println("proBonus id 1 "+ProBonId);
                                        if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                            DCIteratorBinding dciterPromBonVariant =
                                                ADFUtils.findIterator("PromoBonusVariantView1Iterator");
                                            DCIteratorBinding dciterPromBonProdItem =
                                                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
                                            ViewObject voTableDataVarian =
                                                dciterPromBonVariant.getViewObject();
                                            if (dciterPromBonVariant.getEstimatedRowCount() >
                                                0) {
                                                RowSetIterator iterVarian =
                                                    voTableDataVarian.createRowSetIterator(null);
                                                //                                      for(Row rProBonVar:dciterPromBonVariant.getAllRowsInRange()){
                                                while (iterVarian.hasNext()) {
                                                    Row rProBonVar =
                                                        iterVarian.next();
                                                    String ProProdIdBonVar =
                                                        rProBonVar.getAttribute("PromoBonusId").toString();
                                                    //                                                       System.out.println("promo bonus variant id "+ProProdIdBonVar);
                                                    //                                                        if (ProProdIdBonVar.equalsIgnoreCase(ProBonId)) {
                                                    PreparedStatement delPromoBonusVariantStmt =
                                                        null;
                                                    PreparedStatement delPromoBonusItemStmt =
                                                        null;
                                                    try {
                                                        String SQL =
                                                            "DELETE FROM PROMO_BONUS_VARIANT WHERE PROMO_BONUS_ID =" +
                                                            "'" + ProBonId +
                                                            "'";
                                                        delPromoBonusVariantStmt =
                                                                promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                           1);
                                                        delPromoBonusVariantStmt.execute();

                                                    } catch (SQLException e) {
                                                        throw new JboException(e.getMessage());
                                                    } finally {
                                                        promoProposalAM.getDBTransaction().commit();
                                                        if (delPromoBonusVariantStmt !=
                                                            null) {
                                                            try {
                                                                delPromoBonusVariantStmt.close();
                                                            } catch (Exception e) {
                                                                throw new JboException(e.getMessage());
                                                            }
                                                        }
                                                    }
                                                    //                                                        }
                                                }
                                            }
                                            PreparedStatement delPromoBonusItemStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM PROMO_BONUS_PROD_ITEM WHERE PROMO_BONUS_ID =" +
                                                    "'" + ProBonId + "'";
                                                delPromoBonusItemStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoBonusItemStmt.execute();
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoBonusItemStmt !=
                                                    null) {
                                                    try {
                                                        delPromoBonusItemStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                            //                                  }
                                        }
                                        PreparedStatement delPromoBonusStmt =
                                            null;
                                        try {
                                            String SQL =
                                                "DELETE FROM PROMO_BONUS WHERE PROMO_BONUS_ID =" +
                                                "'" + ProBonId + "'";
                                            delPromoBonusStmt =
                                                    promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                               1);
                                            delPromoBonusStmt.execute();
                                            //                                            System.out.println("PromProdId "+PromProdId);
                                        } catch (SQLException e) {
                                            throw new JboException(e.getMessage());
                                        } finally {
                                            promoProposalAM.getDBTransaction().commit();
                                            if (delPromoBonusStmt != null) {
                                                try {
                                                    delPromoBonusStmt.close();
                                                } catch (Exception e) {
                                                    throw new JboException(e.getMessage());
                                                }
                                            }
                                        }
                                    }
                                }
                                DCIteratorBinding dciterDiskon =
                                    ADFUtils.findIterator("DiscountView1Iterator");
                                ViewObject voTableDataDiskon =
                                    dciterDiskon.getViewObject();
                                if (dciterDiskon.getEstimatedRowCount() > 0) {
                                    RowSetIterator iterDiskon =
                                        voTableDataDiskon.createRowSetIterator(null);
                                    for (Row rDiskon :
                                         dciterDiskon.getAllRowsInRange()) {
                                        String ProProdIdBon =
                                            rDiskon.getAttribute("PromoProdukId").toString();
                                        if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                            PreparedStatement delPromoDiskonStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM DISCOUNT WHERE PROMO_PRODUK_ID =" +
                                                    "'" + ProProdIdBon + "'";
                                                delPromoDiskonStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoDiskonStmt.execute();
                                                //                                            System.out.println("PromProdId "+PromProdId);
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoDiskonStmt !=
                                                    null) {
                                                    try {
                                                        delPromoDiskonStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            itPpnFlag.setSubmittedValue(ppnFlagExclude);
                            AdfFacesContext.getCurrentInstance().addPartialTarget(itPpnFlag);

                            rPromoProd.setAttribute("BrgBonusMf", 0);
                            rPromoProd.setAttribute("BrgBonusOnTop", 0);
                            rPromoProd.setAttribute("BrgBonusRasioMf", 0);
                            rPromoProd.setAttribute("BrgBonusRasioOnTop", 0);
                            rPromoProd.setAttribute("BrgBonusRasioTotal", 0);

                            rPromoProd.setAttribute("DiscMf", 0);
                            rPromoProd.setAttribute("DiscOnTop", 0);
                            rPromoProd.setAttribute("DiscRasioMf", 0);
                            rPromoProd.setAttribute("DiscRasioOnTop", 0);
                            rPromoProd.setAttribute("DiscRasioTotal1", 0);
                            dciterPP.getDataControl().commitTransaction();
                        }
                    } else {
                        itPpnFlag.setSubmittedValue(ppnFlagExclude);
                        AdfFacesContext.getCurrentInstance().addPartialTarget(itPpnFlag);
                    }
                }
            } else if (TipePot.equalsIgnoreCase("2")) {
                DCIteratorBinding proposal =
                    ADFUtils.findIterator("ProposalView1Iterator");
                ViewObject voTableData = proposal.getViewObject();
                Row rowSelected = voTableData.getCurrentRow();
                String proposalNum =
                    rowSelected.getAttribute("ProposalNo").toString();
                if (!proposalNum.equalsIgnoreCase("Auto Generated")) {
                    String proposalId =
                        rowSelected.getAttribute("ProposalId").toString();
                    DCIteratorBinding dciterPP =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    ViewObject voTableDataPp = dciterPP.getViewObject();
                    if (dciterPP.getEstimatedRowCount() > 0) {
                        RowSetIterator iterPP =
                            voTableDataPp.createRowSetIterator(null);
                        while (iterPP.hasNext()) {
                            Row rPromoProd = iterPP.next();
                            String PropIdPP =
                                rPromoProd.getAttribute("ProposalId").toString();
                            if (proposalId.equalsIgnoreCase(PropIdPP)) {
                                String PromProdId =
                                    rPromoProd.getAttribute("PromoProdukId").toString();
                                DCIteratorBinding dciterPromBon =
                                    ADFUtils.findIterator("PromoBonusView1Iterator");
                                ViewObject voTableDataPb =
                                    dciterPromBon.getViewObject();
                                if (dciterPromBon.getEstimatedRowCount() > 0) {
                                    RowSetIterator iterPb =
                                        voTableDataPb.createRowSetIterator(null);
                                    while (iterPb.hasNext()) {
                                        Row rProMBonus = iterPb.next();
                                        String ProProdIdBon =
                                            rProMBonus.getAttribute("PromoProdukId").toString();
                                        String ProBonId =
                                            rProMBonus.getAttribute("PromoBonusId").toString();
                                        if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                            DCIteratorBinding dciterPromBonVariant =
                                                ADFUtils.findIterator("PromoBonusVariantView1Iterator");
                                            DCIteratorBinding dciterPromBonProdItem =
                                                ADFUtils.findIterator("PromoBonusProdItemView1Iterator");
                                            ViewObject voTableDataVarian =
                                                dciterPromBonVariant.getViewObject();
                                            if (dciterPromBonVariant.getEstimatedRowCount() >
                                                0) {
                                                RowSetIterator iterVarian =
                                                    voTableDataVarian.createRowSetIterator(null);
                                                //                                      for(Row rProBonVar:dciterPromBonVariant.getAllRowsInRange()){
                                                while (iterVarian.hasNext()) {
                                                    Row rProBonVar =
                                                        iterVarian.next();
                                                    String ProProdIdBonVar =
                                                        rProBonVar.getAttribute("PromoBonusId").toString();
                                                    //                                                       System.out.println("promo bonus variant id "+ProProdIdBonVar);
                                                    //                                                        if (ProProdIdBonVar.equalsIgnoreCase(ProBonId)) {
                                                    PreparedStatement delPromoBonusVariantStmt =
                                                        null;
                                                    PreparedStatement delPromoBonusItemStmt =
                                                        null;
                                                    try {
                                                        String SQL =
                                                            "DELETE FROM PROMO_BONUS_VARIANT WHERE PROMO_BONUS_ID =" +
                                                            "'" + ProBonId +
                                                            "'";
                                                        delPromoBonusVariantStmt =
                                                                promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                           1);
                                                        delPromoBonusVariantStmt.execute();

                                                    } catch (SQLException e) {
                                                        throw new JboException(e.getMessage());
                                                    } finally {
                                                        promoProposalAM.getDBTransaction().commit();
                                                        if (delPromoBonusVariantStmt !=
                                                            null) {
                                                            try {
                                                                delPromoBonusVariantStmt.close();
                                                            } catch (Exception e) {
                                                                throw new JboException(e.getMessage());
                                                            }
                                                        }
                                                    }
                                                    //                                                        }
                                                }
                                            }
                                            PreparedStatement delPromoBonusItemStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM PROMO_BONUS_PROD_ITEM WHERE PROMO_BONUS_ID =" +
                                                    "'" + ProBonId + "'";
                                                delPromoBonusItemStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoBonusItemStmt.execute();
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoBonusItemStmt !=
                                                    null) {
                                                    try {
                                                        delPromoBonusItemStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                            //                                  }
                                        }
                                        PreparedStatement delPromoBonusStmt =
                                            null;
                                        try {
                                            String SQL =
                                                "DELETE FROM PROMO_BONUS WHERE PROMO_BONUS_ID =" +
                                                "'" + ProBonId + "'";
                                            delPromoBonusStmt =
                                                    promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                               1);
                                            delPromoBonusStmt.execute();
                                            //                                            System.out.println("PromProdId "+PromProdId);
                                        } catch (SQLException e) {
                                            throw new JboException(e.getMessage());
                                        } finally {
                                            promoProposalAM.getDBTransaction().commit();
                                            if (delPromoBonusStmt != null) {
                                                try {
                                                    delPromoBonusStmt.close();
                                                } catch (Exception e) {
                                                    throw new JboException(e.getMessage());
                                                }
                                            }
                                        }
                                    }
                                }
                                DCIteratorBinding dciterBiaya =
                                    ADFUtils.findIterator("BiayaView1Iterator");
                                ViewObject voTableDataBiaya =
                                    dciterBiaya.getViewObject();
                                if (dciterBiaya.getEstimatedRowCount() > 0) {
                                    RowSetIterator iterDiskon =
                                        voTableDataBiaya.createRowSetIterator(null);
                                    for (Row rBiaya :
                                         dciterBiaya.getAllRowsInRange()) {
                                        String ProProdIdBia =
                                            rBiaya.getAttribute("PromoProdukId").toString();
                                        if (PromProdId.equalsIgnoreCase(ProProdIdBia)) {
                                            PreparedStatement delPromoDiskonStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM BIAYA WHERE PROMO_PRODUK_ID =" +
                                                    "'" + ProProdIdBia + "'";
                                                delPromoDiskonStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoDiskonStmt.execute();
                                                //                                            System.out.println("PromProdId "+PromProdId);
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoDiskonStmt !=
                                                    null) {
                                                    try {
                                                        delPromoDiskonStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            rPromoProd.setAttribute("BrgBonusMf", 0);
                            rPromoProd.setAttribute("BrgBonusOnTop", 0);
                            rPromoProd.setAttribute("BrgBonusRasioMf", 0);
                            rPromoProd.setAttribute("BrgBonusRasioOnTop", 0);
                            rPromoProd.setAttribute("BrgBonusRasioTotal", 0);

                            rPromoProd.setAttribute("BiaMf", 0);
                            rPromoProd.setAttribute("BiaOntop", 0);
                            rPromoProd.setAttribute("BiaRasioMf", 0);
                            rPromoProd.setAttribute("BiaRasioTotal", 0);
                            rPromoProd.setAttribute("BiaRasionOntop", 0);
                            dciterPP.getDataControl().commitTransaction();
                        }
                    }
                }
            } else if (TipePot.equalsIgnoreCase("3")) {

                DCIteratorBinding proposal =
                    ADFUtils.findIterator("ProposalView1Iterator");
                ViewObject voTableData = proposal.getViewObject();
                Row rowSelected = voTableData.getCurrentRow();
                String proposalNum =
                    rowSelected.getAttribute("ProposalNo").toString();
                if (!proposalNum.equalsIgnoreCase("Auto Generated")) {
                    String proposalId =
                        rowSelected.getAttribute("ProposalId").toString();
                    DCIteratorBinding dciterPP =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    ViewObject voTableDataPp = dciterPP.getViewObject();
                    if (dciterPP.getEstimatedRowCount() > 0) {
                        RowSetIterator iterPP =
                            voTableDataPp.createRowSetIterator(null);
                        while (iterPP.hasNext()) {
                            Row rPromoProd = iterPP.next();
                            String PropIdPP =
                                rPromoProd.getAttribute("ProposalId").toString();
                            if (proposalId.equalsIgnoreCase(PropIdPP)) {
                                String PromProdId =
                                    rPromoProd.getAttribute("PromoProdukId").toString();
                                DCIteratorBinding dciterDiskon =
                                    ADFUtils.findIterator("DiscountView1Iterator");
                                ViewObject voTableDataDiskon =
                                    dciterDiskon.getViewObject();
                                if (dciterDiskon.getEstimatedRowCount() > 0) {
                                    RowSetIterator iterDiskon =
                                        voTableDataDiskon.createRowSetIterator(null);
                                    for (Row rDiskon :
                                         dciterDiskon.getAllRowsInRange()) {
                                        String ProProdIdBon =
                                            rDiskon.getAttribute("PromoProdukId").toString();
                                        if (PromProdId.equalsIgnoreCase(ProProdIdBon)) {
                                            PreparedStatement delPromoDiskonStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM DISCOUNT WHERE PROMO_PRODUK_ID =" +
                                                    "'" + ProProdIdBon + "'";
                                                delPromoDiskonStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoDiskonStmt.execute();
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoDiskonStmt !=
                                                    null) {
                                                    try {
                                                        delPromoDiskonStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                DCIteratorBinding dciterBiaya =
                                    ADFUtils.findIterator("BiayaView1Iterator");
                                ViewObject voTableDataBiaya =
                                    dciterBiaya.getViewObject();
                                if (dciterBiaya.getEstimatedRowCount() > 0) {
                                    RowSetIterator iterDiskon =
                                        voTableDataBiaya.createRowSetIterator(null);
                                    for (Row rBiaya :
                                         dciterBiaya.getAllRowsInRange()) {
                                        String ProProdIdBia =
                                            rBiaya.getAttribute("PromoProdukId").toString();
                                        if (PromProdId.equalsIgnoreCase(ProProdIdBia)) {
                                            PreparedStatement delPromoDiskonStmt =
                                                null;
                                            try {
                                                String SQL =
                                                    "DELETE FROM BIAYA WHERE PROMO_PRODUK_ID =" +
                                                    "'" + ProProdIdBia + "'";
                                                delPromoDiskonStmt =
                                                        promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                                   1);
                                                delPromoDiskonStmt.execute();
                                                //                                            System.out.println("PromProdId "+PromProdId);
                                            } catch (SQLException e) {
                                                throw new JboException(e.getMessage());
                                            } finally {
                                                promoProposalAM.getDBTransaction().commit();
                                                if (delPromoDiskonStmt !=
                                                    null) {
                                                    try {
                                                        delPromoDiskonStmt.close();
                                                    } catch (Exception e) {
                                                        throw new JboException(e.getMessage());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            rPromoProd.setAttribute("DiscMf", 0);
                            rPromoProd.setAttribute("DiscOnTop", 0);
                            rPromoProd.setAttribute("DiscRasioMf", 0);
                            rPromoProd.setAttribute("DiscRasioOnTop", 0);
                            rPromoProd.setAttribute("DiscRasioTotal1", 0);

                            rPromoProd.setAttribute("BiaMf", 0);
                            rPromoProd.setAttribute("BiaOntop", 0);
                            rPromoProd.setAttribute("BiaRasioMf", 0);
                            rPromoProd.setAttribute("BiaRasioTotal", 0);
                            rPromoProd.setAttribute("BiaRasionOntop", 0);
                            dciterPP.getDataControl().commitTransaction();
                        }
                    }
                }
            } else {
                //no action
            }

            if (TipePot.equalsIgnoreCase("2")) {
                socMixQtyPromo.setRequired(true);
                socMixQtyPromo.setValue(0);
                AdfFacesContext.getCurrentInstance().addPartialTarget(socMixQtyPromo);
            } else if (TipePot.equalsIgnoreCase("1")) {
                socMixQtyPromo.setRequired(false);
                socMixQtyPromo.setValue(0);
                itPpnFlag.setSubmittedValue(ppnFlagExclude);
                AdfFacesContext.getCurrentInstance().addPartialTarget(itPpnFlag);
                AdfFacesContext.getCurrentInstance().addPartialTarget(socMixQtyPromo);
            } else if (TipePot.equalsIgnoreCase("3")) {
                socMixQtyPromo.setRequired(false);
                socMixQtyPromo.setValue(0);
                AdfFacesContext.getCurrentInstance().addPartialTarget(socMixQtyPromo);
            } else {
                socMixQtyPromo.setRequired(false);
                socMixQtyPromo.setValue(0);
                AdfFacesContext.getCurrentInstance().addPartialTarget(socMixQtyPromo);
            }
        } else {
            AttributeBinding propNoAttr =
                (AttributeBinding)bindings.getControlBinding("ProposalNo");
            String proposalNo =
                (String)propNoAttr.getInputValue() == null ? "Auto Generated" :
                (String)propNoAttr.getInputValue();

            DCIteratorBinding parentIter =
                (DCIteratorBinding)bindings.get("ProposalView1Iterator");
            //Get current row key
            Key parentKey = parentIter.getCurrentRow().getKey();

            OperationBinding operationBindingRollback =
                bindings.getOperationBinding("Rollback");
            operationBindingRollback.execute();

            if (!proposalNo.equalsIgnoreCase("Auto Generated")) {
                //Set again row key as current row
                parentIter.setCurrentRowWithKey(parentKey.toStringFormat(true));
            }
        }
    }

    public void settabProdExclCustomer(RichShowDetailItem tabProdExclCustomer) {
        this.tabProdExclCustomer = tabProdExclCustomer;
    }

    public RichShowDetailItem gettabProdExclCustomer() {
        return tabProdExclCustomer;
    }

    public void setBtnAttachment(RichCommandToolbarButton btnAttachment) {
        this.btnAttachment = btnAttachment;
    }

    public RichCommandToolbarButton getBtnAttachment() {
        return btnAttachment;
    }

    public void attachmentPopupReturnListener(ReturnEvent returnEvent) {
        AdfFacesContext.getCurrentInstance().addPartialTarget(btnAttachment);
    }

    public void copyForAddendum(DialogEvent dialogEvent) throws ParseException {
        BindingContainer bindings = this.getBindings();

        //Set to DRAFT filter mode
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalDraftVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);

        FacesContext fctx = FacesContext.getCurrentInstance();
        PromoProposalAMImpl promoProposalAM =
            (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");

        String srcProposalNo = (String)itLovProposalNo.getValue();

        DefaultDateFormatter ddf = new DefaultDateFormatter();
        String dateValueStart = "", dateValueEnd = "", dateTimeValueStart =
            "", dateTimeValueEnd = "";

        ProposalCopyAddendumViewImpl propCopyAddendum =
            promoProposalAM.getProposalCopyAddendumView1();
        propCopyAddendum.setNamedWhereClauseParam("noProp", srcProposalNo);
        propCopyAddendum.executeQuery();

        String srcUsrTypeCreator = null;
        String proposalId = null;
        String custRegFlag1 = null;
        String discountType1 = null;

        ProposalCopyAddendumViewRowImpl propCopyAdndmRow = null;
        if (propCopyAddendum.getEstimatedRowCount() > 0) {
            propCopyAdndmRow =
                    (ProposalCopyAddendumViewRowImpl)propCopyAddendum.first();
            srcUsrTypeCreator = propCopyAdndmRow.getUserTypeCreator();
            proposalId =
                    propCopyAdndmRow.getProposalId().getSequenceNumber().toString();
            custRegFlag1 = propCopyAdndmRow.getCustRegFlag();
            discountType1 = propCopyAdndmRow.getDiscountType();
        }

        // ===== GET NEW PROPOSAL PERIODE ======================================
        try {
            dateValueStart =
                    ddf.format("yyyy-MM-dd", newPromoPeriodAddendumFrom.getValue());
            dateTimeValueStart = dateValueStart + " 00:00:00";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueStart = "";
        }

        try {
            dateValueEnd =
                    ddf.format("yyyy-MM-dd", newPromoPeriodAddendumTo.getValue());
            dateTimeValueEnd = dateValueEnd + " 23:59:59";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueEnd = "";
        }

        boolean dateValid = false;
        try {
            dateValid =
                    ADFUtils.compareDates(dateTimeValueStart, dateTimeValueEnd);
        } catch (ParseException e) {
            FacesMessage msg =
                new FacesMessage(FacesMessage.SEVERITY_ERROR, "Failed to parse date value.",
                                 "Failed to parse date value.");
            fctx.addMessage(null, msg);
        }

        if (dateValid) {
            // INSERT NEW PROMO DATE VALUE
            oracle.jbo.domain.Date newProgPromoStart =
                ADFUtils.convertToJboDate("yyyy-MM-dd hh:mm:ss",
                                          dateTimeValueStart);
            oracle.jbo.domain.Date newProgPromoEnd =
                ADFUtils.convertToJboDate("yyyy-MM-dd hh:mm:ss",
                                          dateTimeValueEnd);

            long numOfDaysPromo = 0;
            try {
                numOfDaysPromo =
                        ADFUtils.diffInDays(dateTimeValueStart, dateTimeValueEnd);
            } catch (ParseException e) {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Failed to parse date value.",
                                     "Failed to parse date value.");
                fctx.addMessage(null, msg);
            }

            // ===== COLLECT DATA ==================================================
            // PARENT: Collect Data Proposal
            Row propCopyAdndmCurrentRow = propCopyAdndmRow;
            String[] propAttrs = propCopyAdndmCurrentRow.getAttributeNames();
            String[] skipPropAttrs =
                new String[] { "ProposalId", "ProposalNo", "Status",
                               "AddendumKe", "ConfirmNo", "CopySource",
                               "PeriodeProgFrom", "PeriodeProgTo", "ProgDays",
                               "HistTranDtTo", "HistTranDtFrom",
                               "UserTypeCreator" };

            List skipPropAttrList = Arrays.asList(skipPropAttrs);

            // CHILD: Data Promo Produk
            /*
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukCopyAddendumView1Iterator");
            */
            PromoProdukCopyAddendumViewImpl ppCopyAddendumVO =
                promoProposalAM.getPromoProdukCopyAddendumView1();
            ppCopyAddendumVO.setNamedWhereClauseParam("propId", proposalId);
            ppCopyAddendumVO.executeQuery();

            List promoProdList = new ArrayList<Row>();
            if (ppCopyAddendumVO.getEstimatedRowCount() > 0) {
                RowSetIterator ppCopyAddendumIter =
                    ppCopyAddendumVO.createRowSetIterator(null);
                Row ppCopyAddendumRow = null;
                while (ppCopyAddendumIter.hasNext()) {
                    ppCopyAddendumRow = ppCopyAddendumIter.next();
                    promoProdList.add(ppCopyAddendumRow);
                    Number promoProdId =
                        (Number)ppCopyAddendumRow.getAttribute("PromoProdukId");
                }
                ppCopyAddendumIter.closeRowSetIterator();
            }

            // SUB CHILD: Data Promo Bonus
            /*
            DCIteratorBinding dciterPromoBonus =
                ADFUtils.findIterator("PromoBonusCopyAddendumView1Iterator");
            */
            PromoBonusCopyAddendumViewImpl pbonusCopyAddendumVO =
                promoProposalAM.getPromoBonusCopyAddendumView1();
            pbonusCopyAddendumVO.setNamedWhereClauseParam("propId",
                                                          proposalId);
            pbonusCopyAddendumVO.executeQuery();

            List promoBonusList = new ArrayList<Row>();
            if (pbonusCopyAddendumVO.getEstimatedRowCount() > 0) {
                RowSetIterator pbonusCopyAddendumIter =
                    pbonusCopyAddendumVO.createRowSetIterator(null);
                Row pbonusCopyAddendumRow = null;
                while (pbonusCopyAddendumIter.hasNext()) {
                    pbonusCopyAddendumRow = pbonusCopyAddendumIter.next();
                    promoBonusList.add(pbonusCopyAddendumRow);
                    Number promoProdId =
                        (Number)pbonusCopyAddendumRow.getAttribute("PromoBonusId");
                }
                pbonusCopyAddendumIter.closeRowSetIterator();
            }


            // ===== INSERTING DATA ============================================
            DCIteratorBinding dciterProposal =
                ADFUtils.findIterator("ProposalView1Iterator");
            // PARENT: Insert Data Proposal
            Row dupProposalRow =
                dciterProposal.getRowSetIterator().createRow();
            for (int i = 0; i < propAttrs.length; i++) {
                String propAttrName = propAttrs[i];
                if ("Status".equals(propAttrName))
                    dupProposalRow.setAttribute(propAttrName, "DRAFT");
                if ("CopySource".equals(propAttrName))
                    dupProposalRow.setAttribute(propAttrName, srcProposalNo);
                if ("PeriodeProgFrom".equals(propAttrName)) {
                    dupProposalRow.setAttribute(propAttrName,
                                                newProgPromoStart);
                }
                if ("PeriodeProgTo".equals(propAttrName)) {
                    dupProposalRow.setAttribute(propAttrName, newProgPromoEnd);
                }
                if ("ProgDays".equals(propAttrName)) {
                    dupProposalRow.setAttribute(propAttrName, numOfDaysPromo);
                }
                if ("HistTranDtFrom".equals(propAttrName)) {
                    java.util.Date date2 =
                        ADFUtils.convertOracleDateToJavaUtilDate(newProgPromoStart);

                    DateFormat dfMM = new SimpleDateFormat("MM");
                    String currMon = dfMM.format(date2);
                    Integer last3Mon = Integer.valueOf(currMon) - 3;
                    Integer last1Mon = Integer.valueOf(currMon) - 1;
                    DateFormat dfYY = new SimpleDateFormat("yyyy");
                    String currYear = dfYY.format(date2);
                    Integer thisYear = Integer.valueOf(currYear);

                    DateConversion.Measure last3MonCal =
                        new DateConversion.Measure().month(last3Mon).year(thisYear);
                    String DateTo =
                        thisYear.toString() + String.format("%02d", last1Mon) +
                        getLastDay(thisYear.toString(), last1Mon.toString());
                    String d1HisF = last3MonCal.min().toString();
                    SimpleDateFormat formatterx =
                        new SimpleDateFormat("yyyyMMdd");
                    java.util.Date fr = formatterx.parse(d1HisF);
                    oracle.jbo.domain.Date histFrom =
                        ADFUtils.convertJavaUtilDateToOracleDate(fr);

                    dupProposalRow.setAttribute(propAttrName, histFrom);
                }
                if ("HistTranDtTo".equals(propAttrName)) {
                    java.util.Date date2 =
                        ADFUtils.convertOracleDateToJavaUtilDate(newProgPromoStart);

                    DateFormat dfMM = new SimpleDateFormat("MM");
                    String currMon = dfMM.format(date2);
                    Integer last1Mon = Integer.valueOf(currMon) - 1;
                    DateFormat dfYY = new SimpleDateFormat("yyyy");
                    String currYear = dfYY.format(date2);
                    Integer thisYear = Integer.valueOf(currYear);

                    String DateTo =
                        thisYear.toString() + String.format("%02d", last1Mon) +
                        getLastDay(thisYear.toString(), last1Mon.toString());
                    SimpleDateFormat formatterx =
                        new SimpleDateFormat("yyyyMMdd");
                    java.util.Date to = formatterx.parse(DateTo);

                    oracle.jbo.domain.Date histTo =
                        ADFUtils.convertJavaUtilDateToOracleDate(to);

                    dupProposalRow.setAttribute(propAttrName, histTo);
                }
                if ("UserTypeCreator".equals(propAttrName)) {
                    dupProposalRow.setAttribute(propAttrName, userHo);
                }
                int attrIndex =
                    dupProposalRow.getAttributeIndexOf(propAttrName);
                //Checking if the attribute is in the skip attribute list and the attribute is updatable
                if (!skipPropAttrList.contains(propAttrName) &&
                    dupProposalRow.isAttributeUpdateable(attrIndex))
                    //Setting the value for the attributes
                    dupProposalRow.setAttribute(propAttrName,
                                                propCopyAdndmCurrentRow.getAttribute(propAttrName));
            }
            //Inserting the duplicate proposal row
            dciterProposal.getRowSetIterator().insertRow(dupProposalRow);

            // CHILD: Inserting Data Promo Produk
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            ArrayList<String> promoBonusVariantList = new ArrayList<String>();
            ArrayList<String> promoBonusItemList = new ArrayList<String>();

            if (promoProdList.size() > 0) {
                for (int i = 0; i < promoProdList.size(); i++) {
                    Row dupPromoProdukRow =
                        dciterPromoProduk.getRowSetIterator().createRow();
                    Row promoProdSource = (Row)promoProdList.get(i);
                    /*
                        String produkCustomer =
                            (String)promoProdSource.getAttribute("RegCustFlag");
                        String produkExclCust =
                            (String)promoProdSource.getAttribute("ExclCustBy") ==
                            null ? "" :
                            (String)promoProdSource.getAttribute("ExclCustBy");
                        */
                    dupPromoProdukRow.setAttribute("ProductCategory",
                                                   promoProdSource.getAttribute("ProductCategory"));
                    dupPromoProdukRow.setAttribute("ProductCategoryDesc",
                                                   promoProdSource.getAttribute("ProductCategoryDesc"));
                    dupPromoProdukRow.setAttribute("ProductClass",
                                                   promoProdSource.getAttribute("ProductClass"));
                    dupPromoProdukRow.setAttribute("ProductClassDesc",
                                                   promoProdSource.getAttribute("ProductClassDesc"));
                    dupPromoProdukRow.setAttribute("ProductBrand",
                                                   promoProdSource.getAttribute("ProductBrand"));
                    dupPromoProdukRow.setAttribute("ProductBrandDesc",
                                                   promoProdSource.getAttribute("ProductBrandDesc"));
                    dupPromoProdukRow.setAttribute("ProductExt",
                                                   promoProdSource.getAttribute("ProductExt"));
                    dupPromoProdukRow.setAttribute("ProductExtDesc",
                                                   promoProdSource.getAttribute("ProductExtDesc"));
                    dupPromoProdukRow.setAttribute("ProductPack",
                                                   promoProdSource.getAttribute("ProductPack"));
                    dupPromoProdukRow.setAttribute("ProductPackDesc",
                                                   promoProdSource.getAttribute("ProductPackDesc"));
                    dupPromoProdukRow.setAttribute("Descr",
                                                   promoProdSource.getAttribute("Descr"));
                    dupPromoProdukRow.setAttribute("Mekanisme",
                                                   promoProdSource.getAttribute("Mekanisme"));
                    dupPromoProdukRow.setAttribute("AmountPromo",
                                                   promoProdSource.getAttribute("AmountPromo"));
                    dupPromoProdukRow.setAttribute("EstBudgetProp",
                                                   promoProdSource.getAttribute("EstBudgetProp"));
                    if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                        dupPromoProdukRow.setAttribute("RegCustFlag",
                                                       custRegFlag1);
                    } else {
                        dupPromoProdukRow.setAttribute("RegCustFlag",
                                                       promoProdSource.getAttribute("RegCustFlag"));
                    }
                    dupPromoProdukRow.setAttribute("BudgetBy",
                                                   promoProdSource.getAttribute("BudgetBy"));
                    dupPromoProdukRow.setAttribute("ExclCustBy",
                                                   promoProdSource.getAttribute("ExclCustBy"));
                    dupPromoProdukRow.setAttribute("DiscMf",
                                                   promoProdSource.getAttribute("DiscMf"));
                    dupPromoProdukRow.setAttribute("DiscOnTop",
                                                   promoProdSource.getAttribute("DiscOnTop"));
                    dupPromoProdukRow.setAttribute("DiscRasioMf",
                                                   promoProdSource.getAttribute("DiscRasioMf"));
                    dupPromoProdukRow.setAttribute("DiscRasioOnTop",
                                                   promoProdSource.getAttribute("DiscRasioOnTop"));
                    dupPromoProdukRow.setAttribute("DiscRasioTotal1",
                                                   promoProdSource.getAttribute("DiscRasioTotal"));
                    dupPromoProdukRow.setAttribute("BrgBonusMf",
                                                   promoProdSource.getAttribute("BrgBonusMf"));
                    dupPromoProdukRow.setAttribute("BrgBonusOnTop",
                                                   promoProdSource.getAttribute("BrgBonusOnTop"));
                    dupPromoProdukRow.setAttribute("BrgBonusRasioMf",
                                                   promoProdSource.getAttribute("BrgBonusRasioMf"));
                    dupPromoProdukRow.setAttribute("BrgBonusRasioOnTop",
                                                   promoProdSource.getAttribute("BrgBonusRasioOnTop"));
                    dupPromoProdukRow.setAttribute("BrgBonusRasioTotal",
                                                   promoProdSource.getAttribute("BrgBonusRasioTotal"));
                    dupPromoProdukRow.setAttribute("BiaMf",
                                                   promoProdSource.getAttribute("BiaMf"));
                    dupPromoProdukRow.setAttribute("BiaOntop",
                                                   promoProdSource.getAttribute("BiaOntop"));
                    dupPromoProdukRow.setAttribute("BiaRasioMf",
                                                   promoProdSource.getAttribute("BiaRasioMf"));
                    dupPromoProdukRow.setAttribute("BiaRasionOntop",
                                                   promoProdSource.getAttribute("BiaRasionOntop"));
                    dupPromoProdukRow.setAttribute("BiaRasioTotal",
                                                   promoProdSource.getAttribute("BiaRasioTotal"));
                    dupPromoProdukRow.setAttribute("PpidRef",
                                                   promoProdSource.getAttribute("PromoProdukId"));
                    dupPromoProdukRow.setAttribute("CloseFlag", "N");
                    dupPromoProdukRow.setAttribute("PaketFlag",
                                                   promoProdSource.getAttribute("PaketFlag"));

                    //Inserting the duplicate proposal region row
                    dciterPromoProduk.getRowSetIterator().insertRow(dupPromoProdukRow);

                    String promoProdId =
                        String.valueOf(((Number)promoProdSource.getAttribute("PromoProdukId")).getValue());

                    // SUB CHILD: Collect and Inserting Data Produk Variant
                    DuplicateProdukVariantViewImpl voDupProdukVariant =
                        promoProposalAM.getDuplicateProdukVariantView1();
                    voDupProdukVariant.setNamedWhereClauseParam("promoProdukId",
                                                                promoProdId.trim());
                    voDupProdukVariant.executeQuery();

                    if (voDupProdukVariant.getEstimatedRowCount() > 0) {
                        while (voDupProdukVariant.hasNext()) {
                            Row variantRow = voDupProdukVariant.next();
                            String prodVariant =
                                (String)variantRow.getAttribute("ProdVariant");
                            String variantDesc =
                                (String)variantRow.getAttribute("VariantDesc");
                            DCIteratorBinding dciterProdukVariant =
                                ADFUtils.findIterator("ProdukVariantView1Iterator");
                            Row dupProdVariantRow =
                                dciterProdukVariant.getRowSetIterator().createRow();
                            dupProdVariantRow.setAttribute("ProdVariant",
                                                           prodVariant);
                            dupProdVariantRow.setAttribute("VariantDesc",
                                                           variantDesc);
                        }
                    }

                    // SUB CHILD: Collect and Inserting Data Produk Item
                    DuplicateProdukItemViewImpl voDupProdukItem =
                        promoProposalAM.getDuplicateProdukItemView1();
                    voDupProdukItem.setNamedWhereClauseParam("promoProdukId",
                                                             promoProdId.trim());
                    voDupProdukItem.executeQuery();

                    if (voDupProdukItem.getEstimatedRowCount() > 0) {
                        while (voDupProdukItem.hasNext()) {
                            Row itemRow = voDupProdukItem.next();
                            String prodItem =
                                (String)itemRow.getAttribute("ProdItem");
                            String itemDesc =
                                (String)itemRow.getAttribute("ItemDesc");
                            DCIteratorBinding dciterProdukItem =
                                ADFUtils.findIterator("ProdukItemView1Iterator");
                            Row dupProdVariantRow =
                                dciterProdukItem.getRowSetIterator().createRow();
                            dupProdVariantRow.setAttribute("ProdItem",
                                                           prodItem);
                            dupProdVariantRow.setAttribute("ItemDesc",
                                                           itemDesc);
                        }
                    }

                    // SUB CHILD: Duplicate customer
                    if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                        // USER TYPE CREATOR == AREA
                        CopyPromoCustomerAreaImpl voCopyPromoCustomerArea =
                            promoProposalAM.getCopyPromoCustomerArea1();
                        voCopyPromoCustomerArea.setNamedWhereClauseParam("propId",
                                                                         proposalId);
                        voCopyPromoCustomerArea.executeQuery();

                        if (voCopyPromoCustomerArea.getEstimatedRowCount() >
                            0) {
                            while (voCopyPromoCustomerArea.hasNext()) {
                                Row promAreaRow =
                                    voCopyPromoCustomerArea.next();
                                //                           String PromoCustomerId=(String)promHoRow.getAttribute("PromoCustomerId");
                                //                           String ProposalId=(String)promHoRow.getAttribute("ProposalId");
                                String RegionCode =
                                    (String)promAreaRow.getAttribute("RegionCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("RegionCode");
                                String RegionDesc =
                                    (String)promAreaRow.getAttribute("RegionDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("RegionDesc");
                                String AreaCode =
                                    (String)promAreaRow.getAttribute("AreaCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("AreaCode");
                                String AreaDesc =
                                    (String)promAreaRow.getAttribute("AreaDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("AreaDesc");
                                String LocCode =
                                    (String)promAreaRow.getAttribute("LocCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("LocCode");
                                String LocDesc =
                                    (String)promAreaRow.getAttribute("LocDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("LocDesc");
                                String CusttypCode =
                                    (String)promAreaRow.getAttribute("CusttypCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CusttypCode");
                                String CusttypDesc =
                                    (String)promAreaRow.getAttribute("CusttypDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CusttypDesc");
                                String CustgrpCode =
                                    (String)promAreaRow.getAttribute("CustgrpCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustgrpCode");
                                String CustgrpDesc =
                                    (String)promAreaRow.getAttribute("CustgrpDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustgrpDesc");
                                String CustomerId = "";
                                oracle.jbo.domain.Number customerIdtemp =
                                    (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId") ==
                                    null ? new oracle.jbo.domain.Number(0) :
                                    (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId");
                                if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                    CustomerId = customerIdtemp.toString();
                                } else {
                                    CustomerId = customerIdtemp.toString();
                                }
                                String CustomerName =
                                    (String)promAreaRow.getAttribute("CustomerName") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustomerName");
                                String CustRegFlg =
                                    (String)promAreaRow.getAttribute("CustRegFlg") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustRegFlg");
                                String CustNregFlg =
                                    (String)promAreaRow.getAttribute("CustNregFlg") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustNregFlg");


                                DCIteratorBinding dciterPromoCustomerArea =
                                    ADFUtils.findIterator("PromoCustomerAreaView1Iterator");
                                Row dupPromoCustAreaRow =
                                    dciterPromoCustomerArea.getRowSetIterator().createRow();

                                dupPromoCustAreaRow.setAttribute("RegionCode",
                                                                 RegionCode);
                                dupPromoCustAreaRow.setAttribute("RegionDesc",
                                                                 RegionDesc);
                                dupPromoCustAreaRow.setAttribute("AreaCode",
                                                                 AreaCode);
                                dupPromoCustAreaRow.setAttribute("AreaDesc",
                                                                 AreaDesc);
                                dupPromoCustAreaRow.setAttribute("LocCode",
                                                                 LocCode);
                                dupPromoCustAreaRow.setAttribute("LocDesc",
                                                                 LocDesc);
                                dupPromoCustAreaRow.setAttribute("CusttypCode",
                                                                 CusttypCode);
                                dupPromoCustAreaRow.setAttribute("CusttypDesc",
                                                                 CusttypDesc);
                                dupPromoCustAreaRow.setAttribute("CustgrpCode",
                                                                 CustgrpCode);
                                dupPromoCustAreaRow.setAttribute("CustgrpDesc",
                                                                 CustgrpDesc);
                                dupPromoCustAreaRow.setAttribute("CustomerId",
                                                                 CustomerId);
                                dupPromoCustAreaRow.setAttribute("CustomerName",
                                                                 CustomerName);
                                dupPromoCustAreaRow.setAttribute("CustRegFlg",
                                                                 CustRegFlg);
                                dupPromoCustAreaRow.setAttribute("CustNregFlg",
                                                                 CustNregFlg);

                            }
                        }
                        /* if (custRegFlag1.equalsIgnoreCase(propRegion)) {
                                // SUB CHILD: Collect and Inserting Data Produk Customer by Region
                                CopyCustPropRegionViewImpl voCopyPropRegion =
                                    promoProposalAM.getCopyCustPropRegionView1();
                                voCopyPropRegion.setNamedWhereClauseParam("propId", proposalId);
                                voCopyPropRegion.executeQuery();

                                if (voCopyPropRegion.getEstimatedRowCount() >
                                    0) {
                                    while (voCopyPropRegion.hasNext()) {
                                        Row propRegRow =
                                            voCopyPropRegion.next();
                                        String regionCode =
                                            (String)propRegRow.getAttribute("RegionCode");

                                        DCIteratorBinding dciterProdRegion =
                                            ADFUtils.findIterator("ProdRegionView1Iterator");
                                        Row dupProdRegionRow =
                                            dciterProdRegion.getRowSetIterator().createRow();
                                        dupProdRegionRow.setAttribute("RegionCode",
                                                                      regionCode);
                                    }
                                }
                            } else if (custRegFlag1.equalsIgnoreCase(propArea)) {
                                // SUB CHILD: Collect and Inserting Data Produk Customer by Area
                                CopyCustPropRegionAreaViewImpl voCopyPropArea =
                                    promoProposalAM.getCopyCustPropRegionAreaView1();
                                voCopyPropArea.setNamedWhereClauseParam("propId", proposalId);
                                voCopyPropArea.executeQuery();

                                if (voCopyPropArea.getEstimatedRowCount() > 0) {
                                    while (voCopyPropArea.hasNext()) {
                                        Row propAreaRow = voCopyPropArea.next();
                                        String areaCode =
                                            (String)propAreaRow.getAttribute("AreaCode");

                                        DCIteratorBinding dciterProdArea =
                                            ADFUtils.findIterator("ProdRegionAreaView1Iterator");
                                        Row dupProdAreaRow =
                                            dciterProdArea.getRowSetIterator().createRow();
                                        dupProdAreaRow.setAttribute("AreaCode",
                                                                    areaCode);
                                    }
                                }
                            } else if (custRegFlag1.equalsIgnoreCase(propLocation)) {
                                // SUB CHILD: Collect and Inserting Data Produk Customer by Location
                                CopyCustPropRegionLocViewImpl voCopyPropLocation =
                                    promoProposalAM.getCopyCustPropRegionLocView1();
                                voCopyPropLocation.setNamedWhereClauseParam("propId", proposalId);
                                voCopyPropLocation.executeQuery();

                                if (voCopyPropLocation.getEstimatedRowCount() >
                                    0) {
                                    while (voCopyPropLocation.hasNext()) {
                                        Row propLocationRow =
                                            voCopyPropLocation.next();
                                        String locCode =
                                            (String)propLocationRow.getAttribute("LocationCode");

                                        DCIteratorBinding dciterProdLoc =
                                            ADFUtils.findIterator("ProdRegionLocView1Iterator");
                                        Row dupProdLocRow =
                                            dciterProdLoc.getRowSetIterator().createRow();
                                        dupProdLocRow.setAttribute("LocationCode",
                                                                   locCode);
                                    }
                                }
                            } else if (custRegFlag1.equalsIgnoreCase(propCustType)) {
                                // SUB CHILD: Collect and Inserting Data Produk Customer by Customer Type
                                CopyCustPropRegionCustTypeViewImpl voCopyPropCustType =
                                    promoProposalAM.getCopyCustPropRegionCustTypeView1();
                                voCopyPropCustType.setNamedWhereClauseParam("propId", proposalId);
                                voCopyPropCustType.executeQuery();

                                if (voCopyPropCustType.getEstimatedRowCount() >
                                    0) {
                                    while (voCopyPropCustType.hasNext()) {
                                        Row propCustGroupRow =
                                            voCopyPropCustType.next();
                                        String custType =
                                            (String)propCustGroupRow.getAttribute("CustType");
                                        DCIteratorBinding dciterProdCustGroup =
                                            ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
                                        Row dupProdCustGroupRow =
                                            dciterProdCustGroup.getRowSetIterator().createRow();
                                        dupProdCustGroupRow.setAttribute("CustType",
                                                                         custType);
                                    }
                                }
                            } else if (custRegFlag1.equalsIgnoreCase(propCustGroup)) {
                                // SUB CHILD: Collect and Inserting Data Produk Customer by Customer Group
                                CopyCustPropRegionCustGroupViewImpl voCopyPropCustGroup =
                                    promoProposalAM.getCopyCustPropRegionCustGroupView1();
                                voCopyPropCustGroup.setNamedWhereClauseParam("propId", proposalId);
                                voCopyPropCustGroup.executeQuery();

                                if (voCopyPropCustGroup.getEstimatedRowCount() >
                                    0) {
                                    while (voCopyPropCustGroup.hasNext()) {
                                        Row propCustGroupRow =
                                            voCopyPropCustGroup.next();
                                        String custGroup =
                                            (String)propCustGroupRow.getAttribute("CustGroup");

                                        DCIteratorBinding dciterProdCustGroup =
                                            ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
                                        Row dupProdCustGroupRow =
                                            dciterProdCustGroup.getRowSetIterator().createRow();
                                        dupProdCustGroupRow.setAttribute("CustGroup",
                                                                         custGroup);
                                    }
                                }
                            } else if (custRegFlag1.equalsIgnoreCase(propCustomer)) {
                                // SUB CHILD: Collect and Inserting Data Produk Customer by Customer
                                CopyCustPropRegionCustomerViewImpl voCopyPropCustomer =
                                    promoProposalAM.getCopyCustPropRegionCustomerView1();
                                voCopyPropCustomer.setNamedWhereClauseParam("propId", proposalId);
                                voCopyPropCustomer.executeQuery();

                                if (voCopyPropCustomer.getEstimatedRowCount() >
                                    0) {
                                    while (voCopyPropCustomer.hasNext()) {
                                        Row propCustomerRow =
                                            voCopyPropCustomer.next();
                                        Number custId =
                                            (Number)propCustomerRow.getAttribute("CustomerId");

                                        DCIteratorBinding dciterProdCust =
                                            ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
                                        Row dupProdCustRow =
                                            dciterProdCust.getRowSetIterator().createRow();
                                        dupProdCustRow.setAttribute("CustomerId",
                                                                    custId);
                                    }
                                }
                            } else {
                                // DONT COPY: UNKNOWN PRODUK TYPE CUSTOMER
                            } */
                    } else {
                        // USER TYPE CREATOR == HO
                        // SUB CHILD: Collect and Inserting Data Produk Customer by Region
                        DuplicatePromoCustomerHOImpl voDupPromoCustHo =
                            promoProposalAM.getDuplicatePromoCustomerHO1();
                        voDupPromoCustHo.setNamedWhereClauseParam("promoProdukId",
                                                                  promoProdId.trim());
                        voDupPromoCustHo.executeQuery();

                        if (voDupPromoCustHo.getEstimatedRowCount() > 0) {
                            while (voDupPromoCustHo.hasNext()) {
                                Row promHoRow = voDupPromoCustHo.next();
                                //                           String PromoCustomerId=(String)promHoRow.getAttribute("PromoCustomerId");
                                //                           String ProposalId=(String)promHoRow.getAttribute("ProposalId");
                                String RegionCode =
                                    (String)promHoRow.getAttribute("RegionCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("RegionCode");
                                String RegionDesc =
                                    (String)promHoRow.getAttribute("RegionDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("RegionDesc");
                                String AreaCode =
                                    (String)promHoRow.getAttribute("AreaCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("AreaCode");
                                String AreaDesc =
                                    (String)promHoRow.getAttribute("AreaDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("AreaDesc");
                                String LocCode =
                                    (String)promHoRow.getAttribute("LocCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("LocCode");
                                String LocDesc =
                                    (String)promHoRow.getAttribute("LocDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("LocDesc");
                                String CusttypCode =
                                    (String)promHoRow.getAttribute("CusttypCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CusttypCode");
                                String CusttypDesc =
                                    (String)promHoRow.getAttribute("CusttypDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CusttypDesc");
                                String CustgrpCode =
                                    (String)promHoRow.getAttribute("CustgrpCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustgrpCode");
                                String CustgrpDesc =
                                    (String)promHoRow.getAttribute("CustgrpDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustgrpDesc");
                                String CustomerId = "";
                                oracle.jbo.domain.Number customerIdtemp =
                                    (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId") ==
                                    null ? new oracle.jbo.domain.Number(0) :
                                    (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId");
                                if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                    CustomerId = customerIdtemp.toString();
                                } else {
                                    CustomerId = customerIdtemp.toString();
                                }
                                String CustomerName =
                                    (String)promHoRow.getAttribute("CustomerName") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustomerName");
                                String CustRegFlg =
                                    (String)promHoRow.getAttribute("CustRegFlg") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustRegFlg");
                                String CustNregFlg =
                                    (String)promHoRow.getAttribute("CustNregFlg") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustNregFlg");


                                DCIteratorBinding dciterPromoCustHo =
                                    ADFUtils.findIterator("PromoCustomerHoView1Iterator");
                                Row dupPromoCustHoRow =
                                    dciterPromoCustHo.getRowSetIterator().createRow();

                                dupPromoCustHoRow.setAttribute("RegionCode",
                                                               RegionCode);
                                dupPromoCustHoRow.setAttribute("RegionDesc",
                                                               RegionDesc);
                                dupPromoCustHoRow.setAttribute("AreaCode",
                                                               AreaCode);
                                dupPromoCustHoRow.setAttribute("AreaDesc",
                                                               AreaDesc);
                                dupPromoCustHoRow.setAttribute("LocCode",
                                                               LocCode);
                                dupPromoCustHoRow.setAttribute("LocDesc",
                                                               LocDesc);
                                dupPromoCustHoRow.setAttribute("CusttypCode",
                                                               CusttypCode);
                                dupPromoCustHoRow.setAttribute("CusttypDesc",
                                                               CusttypDesc);
                                dupPromoCustHoRow.setAttribute("CustgrpCode",
                                                               CustgrpCode);
                                dupPromoCustHoRow.setAttribute("CustgrpDesc",
                                                               CustgrpDesc);
                                dupPromoCustHoRow.setAttribute("CustomerId",
                                                               CustomerId);
                                dupPromoCustHoRow.setAttribute("CustomerName",
                                                               CustomerName);
                                dupPromoCustHoRow.setAttribute("CustRegFlg",
                                                               CustRegFlg);
                                dupPromoCustHoRow.setAttribute("CustNregFlg",
                                                               CustNregFlg);
                            }
                        }
                        /* DuplicateProdRegionViewImpl voDupProdRegion =
                                promoProposalAM.getDuplicateProdRegionView1();
                            voDupProdRegion.setNamedWhereClauseParam("promoProdukId",
                                                                     promoProdId.trim());
                            voDupProdRegion.executeQuery();

                            if (voDupProdRegion.getEstimatedRowCount() >
                                0) {
                                while (voDupProdRegion.hasNext()) {
                                    Row prodRegRow =
                                        voDupProdRegion.next();
                                    String regionCode =
                                        (String)prodRegRow.getAttribute("RegionCode");
                                    String notes =
                                        (String)prodRegRow.getAttribute("Notes");

                                    DCIteratorBinding dciterProdRegion =
                                        ADFUtils.findIterator("ProdRegionView1Iterator");
                                    Row dupProdRegionRow =
                                        dciterProdRegion.getRowSetIterator().createRow();
                                    dupProdRegionRow.setAttribute("RegionCode",
                                                                  regionCode);
                                    dupProdRegionRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Customer by Area
                            DuplicateProdRegionAreaViewImpl voDupProdArea =
                                promoProposalAM.getDuplicateProdRegionAreaView1();
                            voDupProdArea.setNamedWhereClauseParam("promoProdukId",
                                                                   promoProdId.trim());
                            voDupProdArea.executeQuery();

                            if (voDupProdArea.getEstimatedRowCount() > 0) {
                                while (voDupProdArea.hasNext()) {
                                    Row prodAreaRow = voDupProdArea.next();
                                    String areaCode =
                                        (String)prodAreaRow.getAttribute("AreaCode");
                                    String notes =
                                        (String)prodAreaRow.getAttribute("Notes");

                                    DCIteratorBinding dciterProdArea =
                                        ADFUtils.findIterator("ProdRegionAreaView1Iterator");
                                    Row dupProdAreaRow =
                                        dciterProdArea.getRowSetIterator().createRow();
                                    dupProdAreaRow.setAttribute("AreaCode",
                                                                areaCode);
                                    dupProdAreaRow.setAttribute("Notes",
                                                                notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Customer by Location
                            DuplicateProdRegionLocViewImpl voDupProdLocation =
                                promoProposalAM.getDuplicateProdRegionLocView1();
                            voDupProdLocation.setNamedWhereClauseParam("promoProdukId",
                                                                       promoProdId.trim());
                            voDupProdLocation.executeQuery();

                            if (voDupProdLocation.getEstimatedRowCount() >
                                0) {
                                while (voDupProdLocation.hasNext()) {
                                    Row prodLocationRow =
                                        voDupProdLocation.next();
                                    String locCode =
                                        (String)prodLocationRow.getAttribute("LocationCode");
                                    String notes =
                                        (String)prodLocationRow.getAttribute("Notes");

                                    DCIteratorBinding dciterProdLoc =
                                        ADFUtils.findIterator("ProdRegionLocView1Iterator");
                                    Row dupProdLocRow =
                                        dciterProdLoc.getRowSetIterator().createRow();
                                    dupProdLocRow.setAttribute("LocationCode",
                                                               locCode);
                                    dupProdLocRow.setAttribute("Notes",
                                                               notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Customer by Customer Type
                            DuplicateProdRegionCustTypeViewImpl voDupProdCustType =
                                promoProposalAM.getDuplicateProdRegionCustTypeView1();
                            voDupProdCustType.setNamedWhereClauseParam("promoProdukId",
                                                                        promoProdId.trim());
                            voDupProdCustType.executeQuery();

                            if (voDupProdCustType.getEstimatedRowCount() >
                                0) {
                                while (voDupProdCustType.hasNext()) {
                                    Row prodCustTypeRow =
                                        voDupProdCustType.next();
                                    String custType =
                                        (String)prodCustTypeRow.getAttribute("CustType");
                                    String notes =
                                        (String)prodCustTypeRow.getAttribute("Notes");

                                    DCIteratorBinding dciterProdCustType =
                                        ADFUtils.findIterator("ProdRegionCustTypeView1Iterator");
                                    Row dupProdCustTypeRow =
                                        dciterProdCustType.getRowSetIterator().createRow();
                                    dupProdCustTypeRow.setAttribute("CustType",
                                                                     custType);
                                    dupProdCustTypeRow.setAttribute("Notes",
                                                                     notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Customer by Customer Group
                            DuplicateProdRegionCustGroupViewImpl voDupProdCustGroup =
                                promoProposalAM.getDuplicateProdRegionCustGroupView1();
                            voDupProdCustGroup.setNamedWhereClauseParam("promoProdukId",
                                                                        promoProdId.trim());
                            voDupProdCustGroup.executeQuery();

                            if (voDupProdCustGroup.getEstimatedRowCount() >
                                0) {
                                while (voDupProdCustGroup.hasNext()) {
                                    Row prodCustGroupRow =
                                        voDupProdCustGroup.next();
                                    String custGroup =
                                        (String)prodCustGroupRow.getAttribute("CustGroup");
                                    String notes =
                                        (String)prodCustGroupRow.getAttribute("Notes");

                                    DCIteratorBinding dciterProdCustGroup =
                                        ADFUtils.findIterator("ProdRegionCustGroupView1Iterator");
                                    Row dupProdCustGroupRow =
                                        dciterProdCustGroup.getRowSetIterator().createRow();
                                    dupProdCustGroupRow.setAttribute("CustGroup",
                                                                     custGroup);
                                    dupProdCustGroupRow.setAttribute("Notes",
                                                                     notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Produk Customer by Customer
                            DuplicateProdRegionCustomerViewImpl voDupProdCustomer =
                                promoProposalAM.getDuplicateProdRegionCustomerView1();
                            voDupProdCustomer.setNamedWhereClauseParam("promoProdukId",
                                                                       promoProdId.trim());
                            voDupProdCustomer.executeQuery();

                            if (voDupProdCustomer.getEstimatedRowCount() >
                                0) {
                                while (voDupProdCustomer.hasNext()) {
                                    Row prodCustomerRow =
                                        voDupProdCustomer.next();
                                    Number custId =
                                        (Number)prodCustomerRow.getAttribute("CustomerId");
                                    String notes =
                                        (String)prodCustomerRow.getAttribute("Notes");

                                    DCIteratorBinding dciterProdCust =
                                        ADFUtils.findIterator("ProdRegionCustomerView1Iterator");
                                    Row dupProdCustRow =
                                        dciterProdCust.getRowSetIterator().createRow();
                                    dupProdCustRow.setAttribute("CustomerId",
                                                                custId);
                                    dupProdCustRow.setAttribute("Notes",
                                                                notes);
                                }
                            } */
                    }

                    // SUB CHILD: Duplicate exclude customer
                    if (srcUsrTypeCreator.equalsIgnoreCase(userHo)) {
                        // USER TYPE CREATOR == HO
                        // SUB CHILD: Collect and Inserting Data Exclude Customer by Region
                        DuplicatePromoCustomerExHOImpl voDupPromoExclHo =
                            promoProposalAM.getDuplicatePromoCustomerExHO1();
                        voDupPromoExclHo.setNamedWhereClauseParam("promoProdukId",
                                                                  promoProdId.trim());
                        voDupPromoExclHo.executeQuery();

                        if (voDupPromoExclHo.getEstimatedRowCount() > 0) {
                            while (voDupPromoExclHo.hasNext()) {
                                Row promHoRow = voDupPromoExclHo.next();
                                String RegionCode =
                                    (String)promHoRow.getAttribute("RegionCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("RegionCode");
                                String RegionDesc =
                                    (String)promHoRow.getAttribute("RegionDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("RegionDesc");
                                String AreaCode =
                                    (String)promHoRow.getAttribute("AreaCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("AreaCode");
                                String AreaDesc =
                                    (String)promHoRow.getAttribute("AreaDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("AreaDesc");
                                String LocCode =
                                    (String)promHoRow.getAttribute("LocCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("LocCode");
                                String LocDesc =
                                    (String)promHoRow.getAttribute("LocDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("LocDesc");
                                String CusttypCode =
                                    (String)promHoRow.getAttribute("CusttypCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CusttypCode");
                                String CusttypDesc =
                                    (String)promHoRow.getAttribute("CusttypDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CusttypDesc");
                                String CustgrpCode =
                                    (String)promHoRow.getAttribute("CustgrpCode") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustgrpCode");
                                String CustgrpDesc =
                                    (String)promHoRow.getAttribute("CustgrpDesc") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustgrpDesc");
                                String CustomerId = "";
                                oracle.jbo.domain.Number customerIdtemp =
                                    (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId") ==
                                    null ? new oracle.jbo.domain.Number(0) :
                                    (oracle.jbo.domain.Number)promHoRow.getAttribute("CustomerId");
                                if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                    CustomerId = customerIdtemp.toString();
                                } else {
                                    CustomerId = customerIdtemp.toString();
                                }
                                String CustomerName =
                                    (String)promHoRow.getAttribute("CustomerName") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustomerName");
                                String CustRegFlg =
                                    (String)promHoRow.getAttribute("CustxRegFlg") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustxRegFlg");
                                String CustNregFlg =
                                    (String)promHoRow.getAttribute("CustxNregFlg") ==
                                    null ? "" :
                                    (String)promHoRow.getAttribute("CustxNregFlg");


                                DCIteratorBinding dciterPromoExHo =
                                    ADFUtils.findIterator("PromoCustxHoView1Iterator");

                                Row dupPromoExHoRow =
                                    dciterPromoExHo.getRowSetIterator().createRow();
                                dupPromoExHoRow.setAttribute("RegionCode",
                                                             RegionCode);
                                dupPromoExHoRow.setAttribute("RegionDesc",
                                                             RegionDesc);
                                dupPromoExHoRow.setAttribute("AreaCode",
                                                             AreaCode);
                                dupPromoExHoRow.setAttribute("AreaDesc",
                                                             AreaDesc);
                                dupPromoExHoRow.setAttribute("LocCode",
                                                             LocCode);
                                dupPromoExHoRow.setAttribute("LocDesc",
                                                             LocDesc);
                                dupPromoExHoRow.setAttribute("CusttypCode",
                                                             CusttypCode);
                                dupPromoExHoRow.setAttribute("CusttypDesc",
                                                             CusttypDesc);
                                dupPromoExHoRow.setAttribute("CustgrpCode",
                                                             CustgrpCode);
                                dupPromoExHoRow.setAttribute("CustgrpDesc",
                                                             CustgrpDesc);
                                dupPromoExHoRow.setAttribute("CustomerId",
                                                             CustomerId);
                                dupPromoExHoRow.setAttribute("CustomerName",
                                                             CustomerName);
                                dupPromoExHoRow.setAttribute("CustxRegFlg",
                                                             CustRegFlg);
                                dupPromoExHoRow.setAttribute("CustxNregFlg",
                                                             CustNregFlg);
                            }
                        }
                        /*  DuplicateProdExclRegionViewImpl voDupProdExclRegion =
                                promoProposalAM.getDuplicateProdExclRegionView1();
                            voDupProdExclRegion.setNamedWhereClauseParam("promoProdukId",
                                                                         promoProdId.trim());
                            voDupProdExclRegion.executeQuery();

                            if (voDupProdExclRegion.getEstimatedRowCount() >
                                0) {
                                while (voDupProdExclRegion.hasNext()) {
                                    Row prodExclRegRow =
                                        voDupProdExclRegion.next();
                                    String regionCode =
                                        (String)prodExclRegRow.getAttribute("RegionCode");
                                    String notes =
                                        (String)prodExclRegRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdRegion =
                                        ADFUtils.findIterator("ExclCustRegionView1Iterator");
                                    Row dupExclProdRegionRow =
                                        dciterExclProdRegion.getRowSetIterator().createRow();
                                    dupExclProdRegionRow.setAttribute("RegionCode",
                                                                  regionCode);
                                    dupExclProdRegionRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Area

                            DuplicateProdExclAreaViewImpl voDupProdExclArea =
                                promoProposalAM.getDuplicateProdExclAreaView1();
                            voDupProdExclArea.setNamedWhereClauseParam("promoProdukId",
                                                                       promoProdId.trim());
                            voDupProdExclArea.executeQuery();

                            if (voDupProdExclArea.getEstimatedRowCount() >
                                0) {
                                while (voDupProdExclArea.hasNext()) {
                                    Row prodExclAreaRow =
                                        voDupProdExclArea.next();
                                    String areaCode =
                                        (String)prodExclAreaRow.getAttribute("AreaCode");
                                    String notes =
                                        (String)prodExclAreaRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdArea =
                                        ADFUtils.findIterator("ExclCustAreaView1Iterator");
                                    Row dupExclProdAreaRow =
                                        dciterExclProdArea.getRowSetIterator().createRow();
                                    dupExclProdAreaRow.setAttribute("AreaCode",
                                                                areaCode);
                                    dupExclProdAreaRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Location
                            DuplicateProdExclLocViewImpl voDupProdExclLocation =
                                promoProposalAM.getDuplicateProdExclLocView1();
                            voDupProdExclLocation.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupProdExclLocation.executeQuery();

                            if (voDupProdExclLocation.getEstimatedRowCount() >
                                0) {
                                while (voDupProdExclLocation.hasNext()) {
                                    Row prodExclLocationRow =
                                        voDupProdExclLocation.next();
                                    String locCode =
                                        (String)prodExclLocationRow.getAttribute("LocationCode");
                                    String notes =
                                        (String)prodExclLocationRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdLoc =
                                        ADFUtils.findIterator("ExclCustLocView1Iterator");
                                    Row dupExclProdLocRow =
                                        dciterExclProdLoc.getRowSetIterator().createRow();
                                    dupExclProdLocRow.setAttribute("LocationCode",
                                                               locCode);
                                    dupExclProdLocRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Customer Type
                            DuplicateProdExclCustTypeViewImpl voDupProdExclCustType =
                                promoProposalAM.getDuplicateProdExclCustTypeView1();
                            voDupProdExclCustType.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupProdExclCustType.executeQuery();

                            if (voDupProdExclCustType.getEstimatedRowCount() >
                                0) {
                                while (voDupProdExclCustType.hasNext()) {
                                    Row prodExclCustTypeRow =
                                        voDupProdExclCustType.next();
                                    String custType =
                                        (String)prodExclCustTypeRow.getAttribute("CustType");
                                    String notes =
                                        (String)prodExclCustTypeRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdCustType =
                                        ADFUtils.findIterator("ExclCustTypeView1Iterator");
                                    Row dupExclProdCustTypeRow =
                                        dciterExclProdCustType.getRowSetIterator().createRow();
                                    dupExclProdCustTypeRow.setAttribute("CustType",
                                                               custType);
                                    dupExclProdCustTypeRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Customer Group
                            DuplicateProdExclCustGroupViewImpl voDupProdExclCustGroup =
                                promoProposalAM.getDuplicateProdExclCustGroupView1();
                            voDupProdExclCustGroup.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupProdExclCustGroup.executeQuery();

                            if (voDupProdExclCustGroup.getEstimatedRowCount() >
                                0) {
                                while (voDupProdExclCustGroup.hasNext()) {
                                    Row prodExclCustGroupRow =
                                        voDupProdExclCustGroup.next();
                                    String custGroup =
                                        (String)prodExclCustGroupRow.getAttribute("CustGroup");
                                    String notes =
                                        (String)prodExclCustGroupRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdCustGroup =
                                        ADFUtils.findIterator("ExclCustGroupView1Iterator");
                                    Row dupExclProdCustGroupRow =
                                        dciterExclProdCustGroup.getRowSetIterator().createRow();
                                    dupExclProdCustGroupRow.setAttribute("CustGroup",
                                                               custGroup);
                                    dupExclProdCustGroupRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Customer
                            DuplicateProdExclCustomerViewImpl voDupProdExclCustomer =
                                promoProposalAM.getDuplicateProdExclCustomerView1();
                            voDupProdExclCustomer.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupProdExclCustomer.executeQuery();

                            if (voDupProdExclCustomer.getEstimatedRowCount() >
                                0) {
                                while (voDupProdExclCustomer.hasNext()) {
                                    Row prodExclCustomerRow =
                                        voDupProdExclCustomer.next();
                                    Number custId =
                                        (Number)prodExclCustomerRow.getAttribute("CustomerId");
                                    String notes =
                                        (String)prodExclCustomerRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdCust =
                                        ADFUtils.findIterator("ExclCustCustView1Iterator");
                                    Row dupExclProdCustRow =
                                        dciterExclProdCust.getRowSetIterator().createRow();
                                    dupExclProdCustRow.setAttribute("CustomerId",
                                                                custId);
                                    dupExclProdCustRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }
                        } else if (srcUsrTypeCreator.equalsIgnoreCase(userArea)) {
                            // USER TYPE CREATOR == AREA
                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Region
                            DuplicatePropExclRegionViewImpl voDupPropExclRegion =
                                promoProposalAM.getDuplicatePropExclRegionView1();
                            voDupPropExclRegion.setNamedWhereClauseParam("promoProdukId",
                                                                         promoProdId.trim());
                            voDupPropExclRegion.executeQuery();

                            if (voDupPropExclRegion.getEstimatedRowCount() >
                                0) {
                                while (voDupPropExclRegion.hasNext()) {
                                    Row propExclRegRow =
                                        voDupPropExclRegion.next();
                                    String regionCode =
                                        (String)propExclRegRow.getAttribute("RegionCode");
                                    String notes =
                                        (String)propExclRegRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdRegion =
                                        ADFUtils.findIterator("ExclCustRegionView1Iterator");
                                    Row dupExclProdRegionRow =
                                        dciterExclProdRegion.getRowSetIterator().createRow();
                                    dupExclProdRegionRow.setAttribute("RegionCode",
                                                                  regionCode);
                                    dupExclProdRegionRow.setAttribute("Notes",
                                                                  notes);
                                }
                            } */

                        // SUB CHILD: Collect and Inserting Data Exclude Customer by Area

                        DuplicatePromoCustomerExAreaImpl voDupPromoExclArea =
                            promoProposalAM.getDuplicatePromoCustomerExArea1();
                        voDupPromoExclArea.setNamedWhereClauseParam("promoProdukId",
                                                                    promoProdId.trim());
                        voDupPromoExclArea.executeQuery();

                        if (voDupPromoExclArea.getEstimatedRowCount() > 0) {
                            while (voDupPromoExclArea.hasNext()) {
                                Row promAreaRow = voDupPromoExclArea.next();
                                String RegionCode =
                                    (String)promAreaRow.getAttribute("RegionCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("RegionCode");
                                String RegionDesc =
                                    (String)promAreaRow.getAttribute("RegionDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("RegionDesc");
                                String AreaCode =
                                    (String)promAreaRow.getAttribute("AreaCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("AreaCode");
                                String AreaDesc =
                                    (String)promAreaRow.getAttribute("AreaDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("AreaDesc");
                                String LocCode =
                                    (String)promAreaRow.getAttribute("LocCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("LocCode");
                                String LocDesc =
                                    (String)promAreaRow.getAttribute("LocDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("LocDesc");
                                String CusttypCode =
                                    (String)promAreaRow.getAttribute("CusttypCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CusttypCode");
                                String CusttypDesc =
                                    (String)promAreaRow.getAttribute("CusttypDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CusttypDesc");
                                String CustgrpCode =
                                    (String)promAreaRow.getAttribute("CustgrpCode") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustgrpCode");
                                String CustgrpDesc =
                                    (String)promAreaRow.getAttribute("CustgrpDesc") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustgrpDesc");
                                String CustomerId = "";
                                oracle.jbo.domain.Number customerIdtemp =
                                    (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId") ==
                                    null ? new oracle.jbo.domain.Number(0) :
                                    (oracle.jbo.domain.Number)promAreaRow.getAttribute("CustomerId");
                                if (customerIdtemp.getBigDecimalValue().toString().equalsIgnoreCase(null)) {
                                    CustomerId = customerIdtemp.toString();
                                } else {
                                    CustomerId = customerIdtemp.toString();
                                }
                                String CustomerName =
                                    (String)promAreaRow.getAttribute("CustomerName") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustomerName");
                                String CustRegFlg =
                                    (String)promAreaRow.getAttribute("CustxRegFlg") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustxRegFlg");
                                String CustNregFlg =
                                    (String)promAreaRow.getAttribute("CustxNregFlg") ==
                                    null ? "" :
                                    (String)promAreaRow.getAttribute("CustxNregFlg");


                                DCIteratorBinding dciterPromoExArea =
                                    ADFUtils.findIterator("PromoCustxAreaView1Iterator");

                                Row dupPromoExAreaRow =
                                    dciterPromoExArea.getRowSetIterator().createRow();
                                dupPromoExAreaRow.setAttribute("RegionCode",
                                                               RegionCode);
                                dupPromoExAreaRow.setAttribute("RegionDesc",
                                                               RegionDesc);
                                dupPromoExAreaRow.setAttribute("AreaCode",
                                                               AreaCode);
                                dupPromoExAreaRow.setAttribute("AreaDesc",
                                                               AreaDesc);
                                dupPromoExAreaRow.setAttribute("LocCode",
                                                               LocCode);
                                dupPromoExAreaRow.setAttribute("LocDesc",
                                                               LocDesc);
                                dupPromoExAreaRow.setAttribute("CusttypCode",
                                                               CusttypCode);
                                dupPromoExAreaRow.setAttribute("CusttypDesc",
                                                               CusttypDesc);
                                dupPromoExAreaRow.setAttribute("CustgrpCode",
                                                               CustgrpCode);
                                dupPromoExAreaRow.setAttribute("CustgrpDesc",
                                                               CustgrpDesc);
                                dupPromoExAreaRow.setAttribute("CustomerId",
                                                               CustomerId);
                                dupPromoExAreaRow.setAttribute("CustomerName",
                                                               CustomerName);
                                dupPromoExAreaRow.setAttribute("CustxRegFlg",
                                                               CustRegFlg);
                                dupPromoExAreaRow.setAttribute("CustxNregFlg",
                                                               CustNregFlg);

                            }
                        }
                        /*  DuplicatePropExclAreaViewImpl voDupPropExclArea =
                                promoProposalAM.getDuplicatePropExclAreaView1();
                            voDupPropExclArea.setNamedWhereClauseParam("promoProdukId",
                                                                       promoProdId.trim());
                            voDupPropExclArea.executeQuery();

                            if (voDupPropExclArea.getEstimatedRowCount() >
                                0) {
                                while (voDupPropExclArea.hasNext()) {
                                    Row propExclAreaRow =
                                        voDupPropExclArea.next();
                                    String areaCode =
                                        (String)propExclAreaRow.getAttribute("AreaCode");
                                    String notes =
                                        (String)propExclAreaRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdArea =
                                        ADFUtils.findIterator("ExclCustAreaView1Iterator");
                                    Row dupExclProdAreaRow =
                                        dciterExclProdArea.getRowSetIterator().createRow();
                                    dupExclProdAreaRow.setAttribute("AreaCode",
                                                                areaCode);
                                    dupExclProdAreaRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Location
                            DuplicatePropExclLocViewImpl voDupPropExclLocation =
                                promoProposalAM.getDuplicatePropExclLocView1();
                            voDupPropExclLocation.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupPropExclLocation.executeQuery();

                            if (voDupPropExclLocation.getEstimatedRowCount() >
                                0) {
                                while (voDupPropExclLocation.hasNext()) {
                                    Row propExclLocationRow =
                                        voDupPropExclLocation.next();
                                    String locCode =
                                        (String)propExclLocationRow.getAttribute("LocationCode");
                                    String notes =
                                        (String)propExclLocationRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdLoc =
                                        ADFUtils.findIterator("ExclCustLocView1Iterator");
                                    Row dupExclProdLocRow =
                                        dciterExclProdLoc.getRowSetIterator().createRow();
                                    dupExclProdLocRow.setAttribute("LocationCode",
                                                               locCode);
                                    dupExclProdLocRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Customer Type
                            DuplicatePropExclCustTypeViewImpl voDupPropExclCustType =
                                promoProposalAM.getDuplicatePropExclCustTypeView1();
                            voDupPropExclCustType.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupPropExclCustType.executeQuery();

                            if (voDupPropExclCustType.getEstimatedRowCount() >
                                0) {
                                while (voDupPropExclCustType.hasNext()) {
                                    Row propExclCustTypeRow =
                                        voDupPropExclCustType.next();
                                    String custType =
                                        (String)propExclCustTypeRow.getAttribute("CustType");
                                    String notes =
                                        (String)propExclCustTypeRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdCustType =
                                        ADFUtils.findIterator("ExclCustTypeView1Iterator");
                                    Row dupExclProdCustTypeRow =
                                        dciterExclProdCustType.getRowSetIterator().createRow();
                                    dupExclProdCustTypeRow.setAttribute("CustType",
                                                               custType);
                                    dupExclProdCustTypeRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Customer Group
                            DuplicatePropExclCustGroupViewImpl voDupPropExclCustGroup =
                                promoProposalAM.getDuplicatePropExclCustGroupView1();
                            voDupPropExclCustGroup.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupPropExclCustGroup.executeQuery();

                            if (voDupPropExclCustGroup.getEstimatedRowCount() >
                                0) {
                                while (voDupPropExclCustGroup.hasNext()) {
                                    Row propExclCustGroupRow =
                                        voDupPropExclCustGroup.next();
                                    String custGroup =
                                        (String)propExclCustGroupRow.getAttribute("CustGroup");
                                    String notes =
                                        (String)propExclCustGroupRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdCustGroup =
                                        ADFUtils.findIterator("ExclCustGroupView1Iterator");
                                    Row dupExclProdCustGroupRow =
                                        dciterExclProdCustGroup.getRowSetIterator().createRow();
                                    dupExclProdCustGroupRow.setAttribute("CustGroup",
                                                               custGroup);
                                    dupExclProdCustGroupRow.setAttribute("Notes",
                                                                  notes);
                                }
                            }

                            // SUB CHILD: Collect and Inserting Data Exclude Customer by Customer
                            DuplicatePropExclCustomerViewImpl voDupPropExclCustomer =
                                promoProposalAM.getDuplicatePropExclCustomerView1();
                            voDupPropExclCustomer.setNamedWhereClauseParam("promoProdukId",
                                                                           promoProdId.trim());
                            voDupPropExclCustomer.executeQuery();

                            if (voDupPropExclCustomer.getEstimatedRowCount() >
                                0) {
                                while (voDupPropExclCustomer.hasNext()) {
                                    Row propExclCustomerRow =
                                        voDupPropExclCustomer.next();
                                    Number custId =
                                        (Number)propExclCustomerRow.getAttribute("CustomerId");
                                    String notes =
                                        (String)propExclCustomerRow.getAttribute("Notes");

                                    DCIteratorBinding dciterExclProdCust =
                                        ADFUtils.findIterator("ExclCustCustView1Iterator");
                                    Row dupExclProdCustRow =
                                        dciterExclProdCust.getRowSetIterator().createRow();
                                    dupExclProdCustRow.setAttribute("CustomerId",
                                                                custId);
                                    dupExclProdCustRow.setAttribute("Notes",
                                                                  notes);
                                }
                            } */


                    } else {
                        // USER TYPE CREATOR == INVALID
                    }

                    // SUB CHILD: Collect and Inserting Data Produk Target
                    DuplicateTargetViewImpl voDupTarget =
                        (DuplicateTargetViewImpl)promoProposalAM.getDuplicateTargetView1();
                    voDupTarget.setNamedWhereClauseParam("promoProdukId",
                                                         promoProdId.trim());
                    voDupTarget.executeQuery();

                    if (voDupTarget.getEstimatedRowCount() > 0) {
                        while (voDupTarget.hasNext()) {
                            Row targetRow = voDupTarget.next();
                            Number avgQty =
                                (Number)targetRow.getAttribute("AvgQty");
                            Number price =
                                (Number)targetRow.getAttribute("Price");
                            String priceBased =
                                (String)targetRow.getAttribute("PriceBased");
                            String priceList =
                                (String)targetRow.getAttribute("PriceList");
                            Number qty = (Number)targetRow.getAttribute("Qty");
                            String uom = (String)targetRow.getAttribute("Uom");
                            Number value =
                                (Number)targetRow.getAttribute("Value");

                            DCIteratorBinding dciterTarget =
                                ADFUtils.findIterator("TargetView1Iterator");
                            Row dupTargetRow =
                                dciterTarget.getRowSetIterator().createRow();
                            dupTargetRow.setAttribute("AvgQty", avgQty);
                            dupTargetRow.setAttribute("Price", price);
                            dupTargetRow.setAttribute("PriceBased",
                                                      priceBased);
                            dupTargetRow.setAttribute("PriceList", priceList);
                            dupTargetRow.setAttribute("Qty", qty);
                            dupTargetRow.setAttribute("Uom", uom);
                            dupTargetRow.setAttribute("Value", value);
                        }
                    }

                    if (discountType1.equalsIgnoreCase(discTypePotongan)) {
                        // SUB CHILD: Collect and Inserting Data Produk Potongan / Discount
                        DuplicateDiscountViewImpl voDupDiscount =
                            (DuplicateDiscountViewImpl)promoProposalAM.getDuplicateDiscountView1();
                        voDupDiscount.setNamedWhereClauseParam("promoProdukId",
                                                               promoProdId.trim());
                        voDupDiscount.executeQuery();

                        if (voDupTarget.getEstimatedRowCount() > 0) {
                            while (voDupDiscount.hasNext()) {
                                Row discountRow = voDupDiscount.next();
                                String tipePerhitungan =
                                    (String)discountRow.getAttribute("TipePerhitungan");
                                String uom =
                                    (String)discountRow.getAttribute("Uom");
                                Number qtyFrom =
                                    (Number)discountRow.getAttribute("QtyFrom");
                                Number qtyTo =
                                    (Number)discountRow.getAttribute("QtyTo");
                                String tipePotongan =
                                    (String)discountRow.getAttribute("TipePotongan");
                                Number discNonYearly =
                                    (Number)discountRow.getAttribute("DiscNonYearly");
                                Number discYearly =
                                    (Number)discountRow.getAttribute("DiscYearly");
                                Number kelipatan =
                                    (Number)discountRow.getAttribute("Kelipatan");

                                DCIteratorBinding dciterDiscount =
                                    ADFUtils.findIterator("DiscountView1Iterator");
                                Row dupDiscountRow =
                                    dciterDiscount.getRowSetIterator().createRow();
                                dupDiscountRow.setAttribute("TipePerhitungan",
                                                            tipePerhitungan);
                                dupDiscountRow.setAttribute("Uom", uom);
                                dupDiscountRow.setAttribute("QtyFrom",
                                                            qtyFrom);
                                dupDiscountRow.setAttribute("QtyTo", qtyTo);
                                dupDiscountRow.setAttribute("TipePotongan",
                                                            tipePotongan);
                                dupDiscountRow.setAttribute("DiscNonYearly",
                                                            discNonYearly);
                                dupDiscountRow.setAttribute("DiscYearly",
                                                            discYearly);
                                dupDiscountRow.setAttribute("Kelipatan",
                                                            kelipatan);
                            }
                        }
                    } else if (discountType1.equalsIgnoreCase(discTypeBiaya)) {
                        // SUB CHILD: Collect and Inserting Data Produk Biaya
                        DuplicateBiayaViewImpl voDupBiaya =
                            promoProposalAM.getDuplicateBiayaView1();
                        voDupBiaya.setNamedWhereClauseParam("promoProdukId",
                                                            promoProdId.trim());
                        voDupBiaya.executeQuery();

                        if (voDupBiaya.getEstimatedRowCount() > 0) {
                            while (voDupBiaya.hasNext()) {
                                Row biayaRow = voDupBiaya.next();
                                String descr =
                                    (String)biayaRow.getAttribute("Descr");
                                Number biayaNonYearly =
                                    (Number)biayaRow.getAttribute("BiayaNonYearly");
                                Number biayaYearly =
                                    (Number)biayaRow.getAttribute("BiayaYearly");
                                Number qty =
                                    (Number)biayaRow.getAttribute("BiayaQty");
                                String uom =
                                    (String)biayaRow.getAttribute("BiayaUom");
                                Number price =
                                    (Number)biayaRow.getAttribute("BiayaPrice");
                                Number totAmt =
                                    (Number)biayaRow.getAttribute("BiayaTotAmt");

                                DCIteratorBinding dciterBiaya =
                                    ADFUtils.findIterator("BiayaView1Iterator");
                                Row dupBiayaRow =
                                    dciterBiaya.getRowSetIterator().createRow();
                                dupBiayaRow.setAttribute("Descr", descr);
                                dupBiayaRow.setAttribute("BiayaNonYearly",
                                                         biayaNonYearly);
                                dupBiayaRow.setAttribute("BiayaYearly",
                                                         biayaYearly);
                                dupBiayaRow.setAttribute("BiayaQty", null);
                                dupBiayaRow.setAttribute("BiayaUom", null);
                                dupBiayaRow.setAttribute("BiayaPrice", null);
                                dupBiayaRow.setAttribute("BiayaTotAmt",
                                                         totAmt);
                            }
                        }
                    } else if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
                        // SUB CHILD: Collect and Inserting Data Produk Promo Bonus
                        DuplicatePromoBonusViewImpl voDupBonus =
                            promoProposalAM.getDuplicatePromoBonusView1();
                        voDupBonus.setNamedWhereClauseParam("promoProdukId",
                                                            promoProdId.trim());
                        voDupBonus.executeQuery();

                        if (voDupBonus.getEstimatedRowCount() > 0) {
                            while (voDupBonus.hasNext()) {
                                Row addBonus = voDupBonus.next();
                                String productCategory =
                                    (String)addBonus.getAttribute("ProductCategory");
                                String productCategoryDesc =
                                    (String)addBonus.getAttribute("ProductCategoryDesc");
                                String productClass =
                                    (String)addBonus.getAttribute("ProductClass");
                                String productClassDesc =
                                    (String)addBonus.getAttribute("ProductClassDesc");
                                String productBrand =
                                    (String)addBonus.getAttribute("ProductBrand");
                                String productBrandDesc =
                                    (String)addBonus.getAttribute("ProductBrandDesc");
                                String productExt =
                                    (String)addBonus.getAttribute("ProductExt");
                                String productExtDesc =
                                    (String)addBonus.getAttribute("ProductExtDesc");
                                String productPack =
                                    (String)addBonus.getAttribute("ProductPack");
                                String productPackDesc =
                                    (String)addBonus.getAttribute("ProductPackDesc");
                                String uom =
                                    (String)addBonus.getAttribute("Uom");
                                Number qtyFrom =
                                    (Number)addBonus.getAttribute("QtyFrom");
                                String tipePotongan =
                                    (String)addBonus.getAttribute("TipePotongan");
                                Number valuePotongan =
                                    (Number)addBonus.getAttribute("ValuePotongan");
                                Number discYearly =
                                    (Number)addBonus.getAttribute("DiscYearly");
                                Number discNonYearly =
                                    (Number)addBonus.getAttribute("DiscNonYearly");
                                String prodVarBonus =
                                    (String)addBonus.getAttribute("ProductVariantBonus") ==
                                    null ? "" :
                                    (String)addBonus.getAttribute("ProductVariantBonus");
                                String prodItemBonus =
                                    (String)addBonus.getAttribute("ProductItemBonus") ==
                                    null ? "" :
                                    (String)addBonus.getAttribute("ProductItemBonus");
                                String inputPriceBy =
                                    (String)addBonus.getAttribute("InputPriceBy");
                                Number priceVal =
                                    (Number)addBonus.getAttribute("PriceVal");
                                Number qtyMulPrice =
                                    (Number)addBonus.getAttribute("QtyMulPrice");

                                DCIteratorBinding dciterBonus =
                                    ADFUtils.findIterator("PromoBonusView1Iterator");
                                Row dupBonusRow =
                                    dciterBonus.getRowSetIterator().createRow();
                                dupBonusRow.setAttribute("ProductCategory",
                                                         productCategory);
                                dupBonusRow.setAttribute("ProductCategoryDesc",
                                                         productCategoryDesc);
                                dupBonusRow.setAttribute("ProductClass",
                                                         productClass);
                                dupBonusRow.setAttribute("ProductClassDesc",
                                                         productClassDesc);
                                dupBonusRow.setAttribute("ProductBrand",
                                                         productBrand);
                                dupBonusRow.setAttribute("ProductBrandDesc",
                                                         productBrandDesc);
                                dupBonusRow.setAttribute("ProductExt",
                                                         productExt);
                                dupBonusRow.setAttribute("ProductExtDesc",
                                                         productExtDesc);
                                dupBonusRow.setAttribute("ProductPack",
                                                         productPack);
                                dupBonusRow.setAttribute("ProductPackDesc",
                                                         productPackDesc);
                                dupBonusRow.setAttribute("Uom", uom);
                                dupBonusRow.setAttribute("QtyFrom", qtyFrom);
                                dupBonusRow.setAttribute("TipePotongan",
                                                         tipePotongan);
                                dupBonusRow.setAttribute("ValuePotongan",
                                                         valuePotongan);
                                dupBonusRow.setAttribute("DiscYearly",
                                                         discYearly);
                                dupBonusRow.setAttribute("DiscNonYearly",
                                                         discNonYearly);
                                dupBonusRow.setAttribute("InputPriceBy",
                                                         inputPriceBy);
                                dupBonusRow.setAttribute("PriceVal", priceVal);
                                dupBonusRow.setAttribute("QtyMulPrice",
                                                         qtyMulPrice);

                                DBSequence promoBonusId =
                                    (DBSequence)dupBonusRow.getAttribute("PromoBonusId");

                                promoBonusVariantList.add(promoBonusId.getValue() +
                                                          ";" + prodVarBonus);
                                promoBonusItemList.add(promoBonusId.getValue() +
                                                       ";" + prodItemBonus);
                            }
                        }
                    } else {
                        // OTHER SUB CHILD TYPE
                    }
                }
            }

            OperationBinding operationBindingCommit =
                bindings.getOperationBinding("Commit");
            operationBindingCommit.execute();

            if (discountType1.equalsIgnoreCase(discTypePromoBarang)) {
                // SUB-SUB CHILD: Inserting Data Produk Promo Bonus Variant
                if (promoBonusVariantList.size() > 0) {
                    for (String promoBonusVariant : promoBonusVariantList) {
                        String[] bonusVarArr = promoBonusVariant.split(";");

                        String promoBonusId = "";
                        try {
                            promoBonusId = bonusVarArr[0].trim();
                        } catch (Exception e) {
                            promoBonusId = "";
                        }

                        String bonusVariantList = "";
                        try {
                            bonusVariantList = bonusVarArr[1].trim();
                        } catch (Exception e) {
                            bonusVariantList = "";
                        }

                        if (!promoBonusId.equalsIgnoreCase("") &&
                            !bonusVariantList.equalsIgnoreCase("")) {
                            String[] bonVarArr =
                                bonusVariantList.split("\\|", -1);
                            for (int v = 0; v < bonVarArr.length; v++) {
                                String bonusVariant = bonVarArr[v].trim();
                                if (promoBonusId != null &&
                                    bonusVariant != null) {
                                    PreparedStatement addProdBonusVariantStmt =
                                        null;
                                    try {
                                        String SQL =
                                            "INSERT INTO PROMO_BONUS_VARIANT (PROMO_BONUS_ID, PROD_VARIANT) " +
                                            "VALUES (" + promoBonusId + ", '" +
                                            bonusVariant + "')";
                                        addProdBonusVariantStmt =
                                                promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                           1);
                                        addProdBonusVariantStmt.executeUpdate();
                                    } catch (SQLException e) {
                                        throw new JboException(e.getMessage());
                                    } finally {
                                        promoProposalAM.getDBTransaction().commit();
                                        if (addProdBonusVariantStmt != null) {
                                            try {
                                                addProdBonusVariantStmt.close();
                                            } catch (Exception e) {
                                                throw new JboException(e.getMessage());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // SUB-SUB CHILD: Inserting Data Produk Promo Bonus Item
                if (promoBonusItemList.size() > 0) {
                    for (String promoBonusItem : promoBonusItemList) {
                        String[] bonusItemArr = promoBonusItem.split(";");

                        String promoBonusId = "";
                        try {
                            promoBonusId = bonusItemArr[0].trim();
                        } catch (Exception e) {
                            promoBonusId = "";
                        }

                        String bonusItemList = "";
                        try {
                            bonusItemList = bonusItemArr[1].trim();
                        } catch (Exception e) {
                            bonusItemList = "";
                        }

                        if (!promoBonusId.equalsIgnoreCase("") &&
                            !bonusItemList.equalsIgnoreCase("")) {
                            String[] bonItemArr =
                                bonusItemList.split("\\|", -1);
                            for (int b = 0; b < bonItemArr.length; b++) {
                                String prodItemCode = bonItemArr[b].trim();
                                if (promoBonusId != null &&
                                    prodItemCode != null) {
                                    PreparedStatement addProdBonusItemStmt =
                                        null;
                                    try {
                                        String SQL =
                                            "INSERT INTO PROMO_BONUS_PROD_ITEM (PROMO_BONUS_ID, PROD_ITEM) " +
                                            "VALUES (" + promoBonusId + ", '" +
                                            prodItemCode + "')";
                                        addProdBonusItemStmt =
                                                promoProposalAM.getDBTransaction().createPreparedStatement(SQL,
                                                                                                           1);
                                        addProdBonusItemStmt.executeUpdate();
                                    } catch (SQLException e) {
                                        throw new JboException(e.getMessage());
                                    } finally {
                                        promoProposalAM.getDBTransaction().commit();
                                        if (addProdBonusItemStmt != null) {
                                            try {
                                                addProdBonusItemStmt.close();
                                            } catch (Exception e) {
                                                throw new JboException(e.getMessage());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            OperationBinding operationBinding =
                bindings.getOperationBinding("ExecutePromoProduct");
            operationBinding.execute();

            //Set filter mode
            ADFContext adfCtx = ADFContext.getCurrent();
            Map sessionScope = adfCtx.getSessionScope();
            sessionScope.put("filterMode", "DRAFT");

            switchMain.setFacetName("dataavailable");
            switchButtonMain.setFacetName("dataavailable");
            AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
            AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
            AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
            AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProduct);
        } else {
            // DO NOTHING -- DATE IS NOT VALID
        }
    }

    public void setNewPromoPeriodAddendumFrom(RichInputDate newPromoPeriodAddendumFrom) {
        this.newPromoPeriodAddendumFrom = newPromoPeriodAddendumFrom;
    }

    public RichInputDate getNewPromoPeriodAddendumFrom() {
        return newPromoPeriodAddendumFrom;
    }

    public void setNewPromoPeriodAddendumTo(RichInputDate newPromoPeriodAddendumTo) {
        this.newPromoPeriodAddendumTo = newPromoPeriodAddendumTo;
    }

    public RichInputDate getNewPromoPeriodAddendumTo() {
        return newPromoPeriodAddendumTo;
    }

    public void newPromoAddendumToChange(ValueChangeEvent valueChangeEvent) {
        FacesContext fctx = FacesContext.getCurrentInstance();
        DefaultDateFormatter ddf = new DefaultDateFormatter();
        String dateValueStart = "", dateValueEnd = "", dateTimeValueStart =
            "", dateTimeValueEnd = "";

        try {
            dateValueStart =
                    ddf.format("yyyy-MM-dd", newPromoPeriodAddendumFrom.getValue());
            dateTimeValueStart = dateValueStart + " 00:00:00";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueStart = "";
        }

        try {
            dateValueEnd =
                    ddf.format("yyyy-MM-dd", newPromoPeriodAddendumTo.getValue());
            dateTimeValueEnd = dateValueEnd + " 23:59:59";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueEnd = "";
        }

        if (dateValueStart.length() > 0 && dateValueEnd.length() > 0) {
            boolean dateValid = false;
            try {
                dateValid =
                        ADFUtils.compareDates(dateTimeValueStart, dateTimeValueEnd);
            } catch (ParseException e) {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Failed to parse date value.",
                                     "Failed to parse date value.");
                fctx.addMessage(null, msg);
            }

            if (dateValid) {
            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.",
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.");
                fctx.addMessage(null, msg);
            }
        }
    }

    public void newPromoAddendumFromChange(ValueChangeEvent valueChangeEvent) {
        FacesContext fctx = FacesContext.getCurrentInstance();
        DefaultDateFormatter ddf = new DefaultDateFormatter();
        String dateValueStart = "", dateValueEnd = "", dateTimeValueStart =
            "", dateTimeValueEnd = "";

        try {
            dateValueStart =
                    ddf.format("yyyy-MM-dd", newPromoPeriodAddendumFrom.getValue());
            dateTimeValueStart = dateValueStart + " 00:00:00";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueStart = "";
        }

        try {
            dateValueEnd =
                    ddf.format("yyyy-MM-dd", newPromoPeriodAddendumTo.getValue());
            dateTimeValueEnd = dateValueEnd + " 23:59:59";
        } catch (FormatErrorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            dateValueEnd = "";
        }

        if (dateValueStart.length() > 0 && dateValueEnd.length() > 0) {
            boolean dateValid = false;
            try {
                dateValid =
                        ADFUtils.compareDates(dateTimeValueStart, dateTimeValueEnd);
            } catch (ParseException e) {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Failed to parse date value.",
                                     "Failed to parse date value.");
                fctx.addMessage(null, msg);
            }

            if (dateValid) {
            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.",
                                     "Periode akhir promo tidak boleh lebih awal dari periode mulai.");
                fctx.addMessage(null, msg);
            }
        }
    }

    public void setItLovProposalNo(RichInputListOfValues itLovProposalNo) {
        this.itLovProposalNo = itLovProposalNo;
    }

    public RichInputListOfValues getItLovProposalNo() {
        return itLovProposalNo;
    }

    public void copyAddendumPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("CreateInsertCopyDummy");
        operationBinding.execute();
    }

    public void changeProductApproval(ActionEvent actionEvent) {
        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindingsPromoProdukView1 =
            bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
        //        System.out.println("dcItteratorBindingsPromoProdukView1.getCurrentRow().getAttribute(\"ProductApproval\"): "
        //                           + dcItteratorBindingsPromoProdukView1.getCurrentRow().getAttribute("ProductApproval"));
        String productApproval =
            dcItteratorBindingsPromoProdukView1.getCurrentRow().getAttribute("ProductApproval").toString();
        String productApprovalNew = "Y";
        if (productApproval.equals("Y")) {
            productApprovalNew = "N";
        }
        dcItteratorBindingsPromoProdukView1.getCurrentRow().setAttribute("ProductApproval",
                                                                         productApprovalNew);
        //        System.out.println("[AFTER] dcItteratorBindingsPromoProdukView1.getCurrentRow().getAttribute(\"ProductApproval\"): "
        //                           + dcItteratorBindingsPromoProdukView1.getCurrentRow().getAttribute("ProductApproval"));

        AdfFacesContext.getCurrentInstance().addPartialTarget(cbProdLineApproval);
    }

    public void changeKelipatan(ValueChangeEvent valueKelipatanEvent) {
        String socType = socTypePotongan.getValue().toString();
        String socTipeHitung = lovTipePerhitungan.getValue().toString();
        String discOntopStr =
            rowOntop.getValue() == null ? "0" : rowOntop.getValue() == "" ?
                                                "0" :
                                                rowOntop.getValue().toString().replaceAll(",",
                                                                                          "");
        BigDecimal discOntop =
            new BigDecimal(discOntopStr) == null ? new BigDecimal(0) :
            new BigDecimal(discOntopStr);

        String discMfStr =
            rowMf.getValue() == null ? "0" : rowMf.getValue() == "" ? "0" :
                                             rowMf.getValue().toString().replaceAll(",",
                                                                                    "");
        BigDecimal discMf =
            new BigDecimal(discMfStr) == null ? new BigDecimal(0) :
            new BigDecimal(discMfStr);

        DCIteratorBinding dciterTarget =
            ADFUtils.findIterator("TargetView1Iterator");
        Row row = dciterTarget.getCurrentRow();
        BigDecimal ontop = BigDecimal.ZERO;
        BigDecimal mf = BigDecimal.ZERO;
        BigDecimal RasioOntop = BigDecimal.ZERO;
        BigDecimal RasioMf = BigDecimal.ZERO;
        BigDecimal rasioTotal = BigDecimal.ZERO;
        BigDecimal rasioT = BigDecimal.ZERO;
        Number qty =
            (Number)row.getAttribute("Qty") == null ? new Number(0) : (Number)row.getAttribute("Qty");
        Number value =
            (Number)row.getAttribute("Value") == null ? new Number(0) :
            (Number)row.getAttribute("Value");
        Number price =
            (Number)row.getAttribute("Price") == null ? new Number(0) :
            (Number)row.getAttribute("Price");

        if (value.compareTo(zeroNum) < 0 || value.compareTo(zeroNum) > 0) {

            if (socType.equalsIgnoreCase(tipePotonganPercent)) {
                if (socTipeHitung.equalsIgnoreCase(tipeHitungKelipatan)) {
                    // BY PERCENT - KELIPATAN
                    BigDecimal kelipatanVal =
                        new BigDecimal(valueKelipatanEvent.getNewValue() ==
                                       "" ? "0" :
                                       valueKelipatanEvent.getNewValue() ==
                                       null ? "0" :
                                       valueKelipatanEvent.getNewValue().toString());

                    //!!! CALCULATE ON TOP BY PERCENT
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY            : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN      : " + kelipatanVal);
                    System.out.println("PERCENT OT DISC: " + discOntop);
                    System.out.println("PRICE          : " + price.getBigDecimalValue());
                    System.out.println("-------------------------------------");
                    */
                    BigDecimal roundTgtDivKelipatanOT =
                        qty.getBigDecimalValue().divide(kelipatanVal, 0,
                                                        RoundingMode.DOWN);
                    BigDecimal priceMulPercentDiscOT =
                        price.getBigDecimalValue().multiply(discOntop.divide(new BigDecimal(100)));
                    ontop =
                            (roundTgtDivKelipatanOT.multiply(kelipatanVal)).multiply(priceMulPercentDiscOT);
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatanOT);
                    System.out.println("PRICE PERCENT   : " + priceMulPercentDiscOT);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL ONTOP AMOUNT: " + ontop);
                    System.out.println("=====================================");
                    */
                    otOnTop.setSubmittedValue(ontop);
                    RasioOntop =
                            ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                          RoundingMode.HALF_UP);
                    String rasOntop = RasioOntop.toString();
                    otRasioOntop.setSubmittedValue(rasOntop);
                    String rasio =
                        otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                           null ? "0" :
                                                           otRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(total);
                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscOnTop", ontop);
                    r.setAttribute("DiscRasioOnTop", rasOntop);
                    r.setAttribute("DiscRasioTotal1", total);

                    //!!! CALCULATE MF BY PERCENT
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY            : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN      : " + kelipatanVal);
                    System.out.println("PERCENT MF DISC: " + discMf);
                    System.out.println("PRICE          : " + price.getBigDecimalValue());
                    System.out.println("-------------------------------------");
                    */
                    BigDecimal roundTgtDivKelipatanMF =
                        qty.getBigDecimalValue().divide(kelipatanVal, 0,
                                                        RoundingMode.DOWN);
                    BigDecimal priceMulPercentDiscMF =
                        price.getBigDecimalValue().multiply(discMf.divide(new BigDecimal(100)));
                    mf =
 (roundTgtDivKelipatanMF.multiply(kelipatanVal)).multiply(priceMulPercentDiscMF);
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatanMF);
                    System.out.println("PRICE PERCENT   : " + priceMulPercentDiscMF);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL MF AMOUNT: " + mf);
                    System.out.println("=====================================");
                    */
                    otOnTop.setSubmittedValue(mf);
                    otMF.setSubmittedValue(mf);
                    RasioMf =
                            mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                       RoundingMode.HALF_UP);
                    String rasMf = RasioMf.toString();
                    otRasioMf.setSubmittedValue(rasMf);
                    rasioT =
                            new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                         "").replaceAll("%",
                                                                                                        ""));
                    rasioTotal = RasioMf.add(rasioT);
                    String Total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(Total);

                    r.setAttribute("DiscMf", mf);
                    r.setAttribute("DiscRasioMf", rasMf);
                    r.setAttribute("DiscRasioTotal1", Total);

                    // dciterPromoProduk.getDataControl().commitTransaction();
                }

                AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            } else {
                if (socTipeHitung.equalsIgnoreCase(tipeHitungKelipatan)) {
                    // BY AMOUNT - KELIPATAN
                    BigDecimal kelipatanVal =
                        new BigDecimal(valueKelipatanEvent.getNewValue() ==
                                       "" ? "0" :
                                       valueKelipatanEvent.getNewValue() ==
                                       null ? "0" :
                                       valueKelipatanEvent.getNewValue().toString());

                    //!!! CALCULATE ON TOP BY AMOUNT
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY            : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN      : " + kelipatanVal);
                    System.out.println("AMOUNT OT DISC : " + discOntop);
                    System.out.println("-------------------------------------");
                    */
                    try {
                        BigDecimal roundTgtDivKelipatanOT =
                            qty.getBigDecimalValue().divide(kelipatanVal, 0,
                                                            RoundingMode.DOWN);
                        ontop =
                                (roundTgtDivKelipatanOT.multiply(kelipatanVal)).multiply(discOntop);
                    } catch (java.lang.ArithmeticException ae) {
                        JSFUtils.addFacesWarningMessage("Nilai kelipatan harus diisi.");
                    } catch (Exception e) {
                        JSFUtils.addFacesErrorMessage("Error",
                                                      e.getLocalizedMessage());
                    }
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatanOT);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL ONTOP AMOUNT: " + ontop);
                    System.out.println("=====================================");
                    */
                    otOnTop.setSubmittedValue(ontop);
                    RasioOntop =
                            ontop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                          RoundingMode.HALF_UP);
                    String rasOntop = RasioOntop.toString();
                    otRasioOntop.setSubmittedValue(rasOntop);
                    String rasio =
                        otRasioMf.getValue() == "" ? "0" : otRasioMf.getValue() ==
                                                           null ? "0" :
                                                           otRasioMf.getValue().toString();
                    rasioT =
                            new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                           ""));
                    rasioTotal = RasioOntop.add(rasioT);
                    String total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(total);

                    //!!! CALCULATE MF BY AMOUNT
                    /*DEBUG
                    System.out.println("=====================================");
                    System.out.println("QTY            : " + qty.getBigDecimalValue());
                    System.out.println("KELIPATAN      : " + kelipatanVal);
                    System.out.println("AMOUNT MF DISC : " + discMf);
                    System.out.println("PRICE          : " + price.getBigDecimalValue());
                    System.out.println("-------------------------------------");
                    */
                    BigDecimal roundTgtDivKelipatan =
                        qty.getBigDecimalValue().divide(kelipatanVal, 0,
                                                        RoundingMode.DOWN);
                    mf =
 (roundTgtDivKelipatan.multiply(kelipatanVal)).multiply(discMf);
                    /*DEBUG
                    System.out.println("QTY X KEL ROUND : " + roundTgtDivKelipatan);
                    System.out.println("-------------------------------------");
                    System.out.println("VAL MF AMOUNT   : " + mf);
                    System.out.println("=====================================");
                    */
                    otMF.setSubmittedValue(mf);
                    RasioMf =
                            mf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                       RoundingMode.HALF_UP);
                    //                    mf.divide(value.getBigDecimalValue(), 3, RoundingMode.HALF_UP).multiply(bdHundred).setScale(2,RoundingMode.HALF_UP);
                    String rasMf = RasioMf.toString();
                    otRasioMf.setSubmittedValue(rasMf);
                    rasioT =
                            new BigDecimal(otRasioOntop.getValue().toString().replaceAll(" ",
                                                                                         "").replaceAll("%",
                                                                                                        ""));
                    rasioTotal = RasioMf.add(rasioT);
                    String Total = rasioTotal.toString();
                    otRasioTotal.setSubmittedValue(Total);

                    DCIteratorBinding dciterPromoProduk =
                        ADFUtils.findIterator("PromoProdukView1Iterator");
                    Row r = dciterPromoProduk.getCurrentRow();
                    r.setAttribute("DiscOnTop", ontop);
                    r.setAttribute("DiscRasioOnTop", rasOntop);
                    r.setAttribute("DiscRasioTotal1", total);
                    r.setAttribute("DiscMf", mf);
                    r.setAttribute("DiscRasioMf", rasMf);
                    r.setAttribute("DiscRasioTotal1", Total);
                    // dciterPromoProduk.getDataControl().commitTransaction();
                }

                AdfFacesContext.getCurrentInstance().addPartialTarget(otOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioOntop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otMF);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otRasioTotal);
            }
        } else {
            JSFUtils.addFacesWarningMessage("Nilai \"Qty. Target\", \"Harga\"  dan nilai \"Tdk Potong Budget / On Top\" tidak boleh 0 (nol) atau kosong.");
        }
    }

    public void prodClassReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk class description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetClassDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        String prodClass = (String)rowSelected.getAttribute("ProductClass");

        if (prodClass == null) {
            rowSelected.setAttribute("ProductClassDesc", null);
            rowSelected.setAttribute("ProductBrandDesc", null);
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductClassDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductBrandDesc", varAll);
                rowSelected.setAttribute("ProductExtDesc", varAll);
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductBrandDesc", null);
                rowSelected.setAttribute("ProductExtDesc", null);
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void prodBrandReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk brand description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetBrandDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        String prodBrand = (String)rowSelected.getAttribute("ProductBrand");
        if (prodBrand == null) {
            rowSelected.setAttribute("ProductBrandDesc", null);
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductBrandDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductExtDesc", varAll);
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductExtDesc", null);
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void prodExtReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk extention description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetExtDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        String prodExt = (String)rowSelected.getAttribute("ProductExt");
        if (prodExt == null) {
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductExtDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void prodPackReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk packaging description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetPackagingDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        String prodPack = (String)rowSelected.getAttribute("ProductPack");
        if (prodPack == null) {
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductPackDesc", rwDesc);
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void printPreviewPopupFetchListener(PopupFetchEvent popupFetchEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        AttributeBinding propIdAttr =
            (AttributeBinding)bindings.getControlBinding("ProposalId");
        DBSequence propId = (DBSequence)propIdAttr.getInputValue();

        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterProposal =
            binding.findIteratorBinding("ProposalView1Iterator");
        ViewObject voProposal = iterProposal.getViewObject();
        Row rowSelected = voProposal.getCurrentRow();

        UserData userData =
            (UserData)JSFUtils.resolveExpression("#{UserData}");
        String userNameLogin =
            userData.getUserNameLogin() == null ? "" : userData.getUserNameLogin();
        String printCount =
            userData.getPrintCount() == null ? "N" : userData.getPrintCount();

        if (printCount.equalsIgnoreCase(printCountYes)) {
            PromoProposalAMImpl promoProposalAM =
                (PromoProposalAMImpl)ADFUtils.getApplicationModuleForDataControl("PromoProposalAMDataControl");
            CallableStatement cst = null;
            try {
                cst =
promoProposalAM.getDBTransaction().createCallableStatement("BEGIN FCS_PRINT_PREV_LOG(" +
                                                           propId.getSequenceNumber().getBigDecimalValue() +
                                                           ", '" +
                                                           userNameLogin +
                                                           "'); END;", 0);
                cst.executeUpdate();
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage(e.getMessage());
            } finally {
                if (cst != null) {
                    try {
                        cst.close();
                    } catch (SQLException e) {
                        //e.printStackTrace();
                    }
                }
            }
        }

        iterProposal.executeQuery();
        iterProposal.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
        AdfFacesContext.getCurrentInstance().addPartialTarget(btnPrintPreview);
    }

    public void setBtnPrintPreview(RichCommandButton btnPrintPreview) {
        this.btnPrintPreview = btnPrintPreview;
    }

    public RichCommandButton getBtnPrintPreview() {
        return btnPrintPreview;
    }

    public void paketFlagReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void paketFlagValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        String PromoProdukIdSel = "";
        DCIteratorBinding iterProduk =
            binding.findIteratorBinding("PromoProdukView1Iterator");
        ViewObject voPromoProduk = iterProduk.getViewObject();
        Row rowSelected = voPromoProduk.getCurrentRow();
        if (rowSelected.getAttribute("PromoProdukId") != null) {
            PromoProdukIdSel =
                    rowSelected.getAttribute("PromoProdukId").toString();
        }

        DCIteratorBinding iterTarget =
            (DCIteratorBinding)binding.get("TargetView1Iterator");

        if (itlovProdPaketFlag.getValue().toString().equalsIgnoreCase(prodPaketFlag)) {
            if (iterTarget.getEstimatedRowCount() > 0) {
                OperationBinding oper =
                    binding.getOperationBinding("updateTargetUom");
                oper.getParamsMap().put("ppid", PromoProdukIdSel);
                oper.getParamsMap().put("uomTarget", targetUomPaket);
                oper.execute();

                //Check for error after executing the method
                if (oper.getErrors().size() > 0) {
                    //It has errors
                    //Handle an errors here
                }
            }
        } else {
            if (iterTarget.getEstimatedRowCount() > 0) {
                OperationBinding oper =
                    binding.getOperationBinding("updateTargetUom");
                oper.getParamsMap().put("ppid", PromoProdukIdSel);
                oper.getParamsMap().put("uomTarget", targetUomNonPaket);
                oper.execute();

                //Check for error after executing the method
                if (oper.getErrors().size() > 0) {
                    //It has errors
                    //Handle an errors here
                }
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterProduk.executeQuery();
        iterProduk.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext ctx = AdfFacesContext.getCurrentInstance();
        ctx.addPartialTarget(itVariant);
        ctx.addPartialTarget(itProductItem);

        linkVariant.setDisabled(false);
        linkProduct.setDisabled(false);
        AdfFacesContext.getCurrentInstance().addPartialTarget(linkVariant);
        AdfFacesContext.getCurrentInstance().addPartialTarget(linkProduct);
    }

    public void setItlovProdPaketFlag(RichInputListOfValues itlovProdPaketFlag) {
        this.itlovProdPaketFlag = itlovProdPaketFlag;
    }

    public RichInputListOfValues getItlovProdPaketFlag() {
        return itlovProdPaketFlag;
    }

    public void setItValidComb(RichInputText itValidComb) {
        this.itValidComb = itValidComb;
    }

    public RichInputText getItValidComb() {
        return itValidComb;
    }

    public void bonusCategoryReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk category description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetCategoryDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();
        String prodCategory =
            (String)rowSelected.getAttribute("ProductCategory");

        if (prodCategory == null) {
            rowSelected.setAttribute("ProductCategoryDesc", null);
            rowSelected.setAttribute("ProductClassDesc", null);
            rowSelected.setAttribute("ProductBrandDesc", null);
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductCategoryDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductClassDesc", varAll);
                rowSelected.setAttribute("ProductBrandDesc", varAll);
                rowSelected.setAttribute("ProductExtDesc", varAll);
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductClassDesc", null);
                rowSelected.setAttribute("ProductBrandDesc", null);
                rowSelected.setAttribute("ProductExtDesc", null);
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void bonusClassReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk class description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetClassDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();
        String prodClass = (String)rowSelected.getAttribute("ProductClass");

        if (prodClass == null) {
            rowSelected.setAttribute("ProductClassDesc", null);
            rowSelected.setAttribute("ProductBrandDesc", null);
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductClassDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductBrandDesc", varAll);
                rowSelected.setAttribute("ProductExtDesc", varAll);
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductBrandDesc", null);
                rowSelected.setAttribute("ProductExtDesc", null);
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void bonusBrandReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk brand description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetBrandDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();
        String prodBrand = (String)rowSelected.getAttribute("ProductBrand");
        if (prodBrand == null) {
            rowSelected.setAttribute("ProductBrandDesc", null);
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductBrandDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductExtDesc", varAll);
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductExtDesc", null);
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void bonusExtReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk extention description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetExtDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();
        String prodExt = (String)rowSelected.getAttribute("ProductExt");
        if (prodExt == null) {
            rowSelected.setAttribute("ProductExtDesc", null);
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductExtDesc", rwDesc);
            if (rwDesc.equalsIgnoreCase(varAll)) {
                rowSelected.setAttribute("ProductPackDesc", varAll);
            } else {
                rowSelected.setAttribute("ProductPackDesc", null);
            }
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void bonusPackReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        // Get produk extention description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("SetPackagingDesc");

        // Set produk description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();
        String prodPack = (String)rowSelected.getAttribute("ProductPack");
        if (prodPack == null) {
            rowSelected.setAttribute("ProductPackDesc", null);
        } else {
            rowSelected.setAttribute("ProductPackDesc", rwDesc);
        }

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void bonusVariantReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void bonusItemReturnPopupListener(ReturnPopupEvent returnPopupEvent) {
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterBonus =
            binding.findIteratorBinding("PromoBonusView1Iterator");
        ViewObject voPromoBonus = iterBonus.getViewObject();
        Row rowSelected = voPromoBonus.getCurrentRow();

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterBonus.executeQuery();
        iterBonus.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));
    }

    public void biayaQtyValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BigDecimal newBiayaQtyBonusValue =
            new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                           valueChangeEvent.getNewValue() == null ? "0" :
                           valueChangeEvent.getNewValue().toString());
        Number priceVal = new Number(0);
        String BiayaIdSel = "";

        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("BiayaView1Iterator");
        Key parentKey = dcItteratorBindings.getCurrentRow().getKey();
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("BiayaId") != null) {
            BiayaIdSel = rowSelected.getAttribute("BiayaId").toString();
            priceVal =
                    (Number)rowSelected.getAttribute("BiayaPrice") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("BiayaPrice");

            BigDecimal tgtHarga = new BigDecimal(priceVal.getValue());

            BigDecimal totalValue = newBiayaQtyBonusValue.multiply(tgtHarga);
            oracle.jbo.domain.Number number = null;
            try {
                number =
                        new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage("Error",
                                              e.getLocalizedMessage());
            }
            rowSelected.setAttribute("TotAmt", number);
            if (number != null) {
                OperationBinding operationBinding =
                    bindingsSelRow.getOperationBinding("Commit");
                operationBinding.execute();
            }
            dcItteratorBindings.setCurrentRowWithKey(parentKey.toStringFormat(true));
            itTotAmt.setSubmittedValue(number);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTotAmt);
        }
    }

    public void setItTotAmt(RichInputText itTotAmt) {
        this.itTotAmt = itTotAmt;
    }

    public RichInputText getItTotAmt() {
        return itTotAmt;
    }

    public void biayaPriceValueChangeListener(ValueChangeEvent valueChangeEvent) {
        BigDecimal newPriceValValue =
            new BigDecimal(valueChangeEvent.getNewValue() == "" ? "0" :
                           valueChangeEvent.getNewValue() == null ? "0" :
                           valueChangeEvent.getNewValue().toString());
        Number qtyBiaya = new Number(0);
        String BiayaIdSel = "";

        DCBindingContainer bindingsSelRow =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindingsSelRow.findIteratorBinding("BiayaView1Iterator");
        Key parentKey = dcItteratorBindings.getCurrentRow().getKey();
        ViewObject voTableData = dcItteratorBindings.getViewObject();
        Row rowSelected = voTableData.getCurrentRow();
        if (rowSelected.getAttribute("BiayaId") != null) {
            BiayaIdSel = rowSelected.getAttribute("BiayaId").toString();
            qtyBiaya =
                    (Number)rowSelected.getAttribute("BiayaQty") == null ? new Number(0) :
                    (Number)rowSelected.getAttribute("BiayaQty");

            BigDecimal totQtyBiaya = new BigDecimal(qtyBiaya.getValue());

            BigDecimal totalValue = newPriceValValue.multiply(totQtyBiaya);
            oracle.jbo.domain.Number number = null;
            try {
                number =
                        new oracle.jbo.domain.Number(df2dgt.format(totalValue).toString());
            } catch (SQLException e) {
                JSFUtils.addFacesErrorMessage("Error",
                                              e.getLocalizedMessage());
            }
            rowSelected.setAttribute("TotAmt", number);
            if (number != null) {
                OperationBinding operationBinding =
                    bindingsSelRow.getOperationBinding("Commit");
                operationBinding.execute();
            }
            dcItteratorBindings.setCurrentRowWithKey(parentKey.toStringFormat(true));
            itTotAmt.setSubmittedValue(number);
            AdfFacesContext.getCurrentInstance().addPartialTarget(itTotAmt);
        }
    }

    public void filterByDraft(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalDraftVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void filterByInProcess(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalInProcessVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void filterByApproved(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalApprovedVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void filterByActive(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalActiveVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void filterByRejected(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalRejectedVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void refreshProposalList(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalAllStatusVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void filterByCanceled(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalCanceledVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void filterByClosed(ActionEvent actionEvent) {
        BindingContainer bindings = getBindings();
        DCIteratorBinding parentIter =
            (DCIteratorBinding)bindings.get("ProposalView1Iterator");
        ProposalViewImpl propVo = (ProposalViewImpl)parentIter.getViewObject();
        //View Criteria without bind variable
        ViewCriteria vc = propVo.getViewCriteria("ProposalClosedVC");
        propVo.applyViewCriteria(vc);
        propVo.executeQuery();

        switchMain.setFacetName("nodata");
        switchButtonMain.setFacetName("nodata");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(tblListProposal);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
    }

    public void setItBiaPrice(RichInputText itBiaPrice) {
        this.itBiaPrice = itBiaPrice;
    }

    public RichInputText getItBiaPrice() {
        return itBiaPrice;
    }

    public void auditTreeRowDisclosureListener(RowDisclosureEvent rowDisclosureEvent) {
        RichTreeTable tree = (RichTreeTable)rowDisclosureEvent.getSource();
        RowKeySet rks = rowDisclosureEvent.getAddedSet();
        if (rks != null && rks.size() > 0) {
            Iterator iter = rks.iterator();

            while (iter.hasNext()) {
                Object rowKey = iter.next();
                tree.setRowKey(rowKey);
                JUCtrlHierNodeBinding rowData =
                    (JUCtrlHierNodeBinding)tree.getRowData();
                if (rowData != null && rowData.getChildren() != null) {
                    // Iterate through the children of the expanded node and check if they have children
                    for (Object child : rowData.getChildren()) {
                        JUCtrlHierNodeBinding childNode =
                            (JUCtrlHierNodeBinding)child;
                        if (childNode.getChildren() == null ||
                            childNode.getChildren().size() == 0) {
                            // Child node is a leaf.  Add it to the disclosed rows, to that the ADF tree will not display a disclosure icon
                            tree.getDisclosedRowKeys().add(childNode.getKeyPath());
                        }
                    }
                }
            }
        }
    }

    public void tableDoubleClick(ClientEvent clientEvent) {
        switchMain.setFacetName("dataavailable");
        switchButtonMain.setFacetName("dataavailable");
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchMain);
        AdfFacesContext.getCurrentInstance().addPartialTarget(switchButtonMain);

        ControllerContext controllerContext = ControllerContext.getInstance();
        ViewPortContext currentRootViewPort =
            controllerContext.getCurrentRootViewPort();
        boolean isDataDirty = currentRootViewPort.isDataDirty();
        if (true == isDataDirty) {
            RichPopup.PopupHints hints = new RichPopup.PopupHints();
            popupSaveChanges.show(hints);
        }
    }

    public void setSwitchButtonMain(UIXSwitcher switchButtonMain) {
        this.switchButtonMain = switchButtonMain;
    }

    public UIXSwitcher getSwitchButtonMain() {
        return switchButtonMain;
    }

    public void setPopupSaveChanges(RichPopup popupSaveChanges) {
        this.popupSaveChanges = popupSaveChanges;
    }

    public RichPopup getPopupSaveChanges() {
        return popupSaveChanges;
    }

    public void saveChangesDialogListener(DialogEvent dialogEvent) {
        BindingContainer bindings = getBindings();

        if (dialogEvent.getOutcome().name().equals("yes")) {
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
        } else {
            OperationBinding operationBinding =
                bindings.getOperationBinding("Rollback");
            operationBinding.execute();
        }
    }

    public void onTableSelect(SelectionEvent selectionEvent) {
        RowKeySet oldKeySet = selectionEvent.getRemovedSet();
        RichTable table = (RichTable)selectionEvent.getSource();
        CollectionModel tableModel = (CollectionModel)table.getValue();
        JUCtrlHierBinding adfTableBinding =
            (JUCtrlHierBinding)tableModel.getWrappedData();
        ControllerContext cctx = ControllerContext.getInstance();
        if (cctx.getCurrentRootViewPort().isDataDirty()) {
            //            FacesMessage message =
            //                new FacesMessage(FacesMessage.SEVERITY_INFO, "Please Commit Changes",
            //                                 "Changes must be committed before selecting a new table row");
            RichPopup.PopupHints hints = new RichPopup.PopupHints();
            popupSaveChanges.show(hints);
            FacesContext fctx = FacesContext.getCurrentInstance();
            //            fctx.addMessage(null, message);
            table.setSelectedRowKeys(oldKeySet);
            AdfFacesContext adfFacesCtx = AdfFacesContext.getCurrentInstance();
            adfFacesCtx.addPartialTarget(table);
            fctx.renderResponse();
        } else {
            try {
                JUCtrlHierNodeBinding tableRowBinding =
                    (JUCtrlHierNodeBinding)table.getSelectedRowData();
                Row row = tableRowBinding.getRow();
                //access the iterator used by the table binding
                DCIteratorBinding iter =
                    adfTableBinding.getDCIteratorBinding();
                iter.getRowSetIterator().setCurrentRow(row);
            } catch (Exception e) {
                // DO NOTHING
                System.out.println("ERR PROP GET ROW: " +
                                   e.getLocalizedMessage());
            }
        }
    }

    public void setItProdRegCustFlag(RichInputText itProdRegCustFlag) {
        this.itProdRegCustFlag = itProdRegCustFlag;
    }

    public RichInputText getItProdRegCustFlag() {
        return itProdRegCustFlag;
    }

    public void setTabProdCustRegion(RichShowDetailItem tabProdCustRegion) {
        this.tabProdCustRegion = tabProdCustRegion;
    }

    public RichShowDetailItem getTabProdCustRegion() {
        return tabProdCustRegion;
    }

    public void setTabProdCustArea(RichShowDetailItem tabProdCustArea) {
        this.tabProdCustArea = tabProdCustArea;
    }

    public RichShowDetailItem getTabProdCustArea() {
        return tabProdCustArea;
    }

    public void setTabProdCustLocation(RichShowDetailItem tabProdCustLocation) {
        this.tabProdCustLocation = tabProdCustLocation;
    }

    public RichShowDetailItem getTabProdCustLocation() {
        return tabProdCustLocation;
    }

    public void setTabProdCustType(RichShowDetailItem tabProdCustType) {
        this.tabProdCustType = tabProdCustType;
    }

    public RichShowDetailItem getTabProdCustType() {
        return tabProdCustType;
    }

    public void setTabProdCustGroup(RichShowDetailItem tabProdCustGroup) {
        this.tabProdCustGroup = tabProdCustGroup;
    }

    public RichShowDetailItem getTabProdCustGroup() {
        return tabProdCustGroup;
    }

    public void setTabProdCustName(RichShowDetailItem tabProdCustName) {
        this.tabProdCustName = tabProdCustName;
    }

    public RichShowDetailItem getTabProdCustName() {
        return tabProdCustName;
    }

    public void setItPpnFlag(RichInputText itPpnFlag) {
        this.itPpnFlag = itPpnFlag;
    }

    public RichInputText getItPpnFlag() {
        return itPpnFlag;
    }

    public void mekPenagihanValueChangeListener(ValueChangeEvent vce) {
        //String mekPen = socMekPenagihan.getValue() == null ? "" : socMekPenagihan.getValue().toString();
        String mekPen =
            vce.getNewValue() == null ? "" : vce.getNewValue().toString();
        if (mekPen.equalsIgnoreCase("0")) {
            itPpnFlag.setSubmittedValue(ppnFlagExclude);
        } else if (mekPen.equalsIgnoreCase("1")) {
            itPpnFlag.setSubmittedValue(ppnFlagInclude);
        } else {
            itPpnFlag.setSubmittedValue(ppnFlagInclude);
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget(itPpnFlag);
    }

    public CellFormat headerFormat(HeaderCellContext cxt) {
        CellFormat format = new CellFormat(null, "", "");
        //format.setStyle("min-width:172px;max-width:172px;");

        if (cxt.getValue() != null) {
            String header = cxt.getValue().toString();
            if (header.equals("Requester")) {
                format.setStyle("min-width:172px;max-width:172px;");
            } else {
                format.setStyle("min-width:172px;max-width:172px;");
            }
        }

        return format;
    }

    public CellFormat dataFormat(DataCellContext cxt) {
        CellFormat format = new CellFormat(null, "", "");
        //format.setStyle("min-width:172px;max-width:172px;");

        if (cxt.getValue() != null) {
            String data = cxt.getValue().toString();
            if (data.equals("ALL")) {
                format.setStyle("min-width:172px;max-width:172px;");
            } else {
                format.setStyle("min-width:172px;max-width:172px;");
            }
        }

        return format;
    }

    public void setTabExclCustArea(RichShowDetailItem tabExclCustArea) {
        this.tabExclCustArea = tabExclCustArea;
    }

    public RichShowDetailItem getTabExclCustArea() {
        return tabExclCustArea;
    }

    public void setTabExclCustLoc(RichShowDetailItem tabExclCustLoc) {
        this.tabExclCustLoc = tabExclCustLoc;
    }

    public RichShowDetailItem getTabExclCustLoc() {
        return tabExclCustLoc;
    }

    public void setTabExclCustRegion(RichShowDetailItem tabExclCustRegion) {
        this.tabExclCustRegion = tabExclCustRegion;
    }

    public RichShowDetailItem getTabExclCustRegion() {
        return tabExclCustRegion;
    }

    public void setTabExclCustType(RichShowDetailItem tabExclCustType) {
        this.tabExclCustType = tabExclCustType;
    }

    public RichShowDetailItem getTabExclCustType() {
        return tabExclCustType;
    }

    public void setTabExclCustGroup(RichShowDetailItem tabExclCustGroup) {
        this.tabExclCustGroup = tabExclCustGroup;
    }

    public RichShowDetailItem getTabExclCustGroup() {
        return tabExclCustGroup;
    }

    public void setTabExclCustName(RichShowDetailItem tabExclCustName) {
        this.tabExclCustName = tabExclCustName;
    }

    public RichShowDetailItem getTabExclCustName() {
        return tabExclCustName;
    }

    public void setTabCustRegion(RichShowDetailItem tabCustRegion) {
        this.tabCustRegion = tabCustRegion;
    }

    public RichShowDetailItem getTabCustRegion() {
        return tabCustRegion;
    }

    public void setTabCustArea(RichShowDetailItem tabCustArea) {
        this.tabCustArea = tabCustArea;
    }

    public RichShowDetailItem getTabCustArea() {
        return tabCustArea;
    }

    public void setTabCustLocation(RichShowDetailItem tabCustLocation) {
        this.tabCustLocation = tabCustLocation;
    }

    public RichShowDetailItem getTabCustLocation() {
        return tabCustLocation;
    }

    public void setTabCustName(RichShowDetailItem tabCustName) {
        this.tabCustName = tabCustName;
    }

    public RichShowDetailItem getTabCustName() {
        return tabCustName;
    }

    public void setTabCustGroup(RichShowDetailItem tabCustGroup) {
        this.tabCustGroup = tabCustGroup;
    }

    public RichShowDetailItem getTabCustGroup() {
        return tabCustGroup;
    }

    public void setTabCustType(RichShowDetailItem tabCustType) {
        this.tabCustType = tabCustType;
    }

    public RichShowDetailItem getTabCustType() {
        return tabCustType;
    }

    public void setItCustRegFlag(RichInputText itCustRegFlag) {
        this.itCustRegFlag = itCustRegFlag;
    }

    public RichInputText getItCustRegFlag() {
        return itCustRegFlag;
    }

    public void setCbProdLineApproval(RichCommandImageLink cbProdLineApproval) {
        this.cbProdLineApproval = cbProdLineApproval;
    }

    public RichCommandImageLink getCbProdLineApproval() {
        return cbProdLineApproval;
    }

    public void removeRowBrgBonus(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("PromoBonusView1Iterator");
        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoBonusId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
                DCIteratorBinding dciterPromoProduk =
                    ADFUtils.findIterator("PromoProdukView1Iterator");
                Row r = dciterPromoProduk.getCurrentRow();
                r.setAttribute("BrgBonusOnTop", 0);
                r.setAttribute("BrgBonusRasioOnTop", 0);
                r.setAttribute("BrgBonusMf", 0);
                r.setAttribute("BrgBonusRasioMf", 0);
                r.setAttribute("BrgBonusRasioTotal", 0);
                dciterPromoProduk.getDataControl().commitTransaction();
                otBrgOnTop.setSubmittedValue(0);
                otBrgRasioOnTop.setSubmittedValue(0);
                otBrgRasioTotal.setSubmittedValue(0);
                otBrgMf.setSubmittedValue(0);
                otBrgRasioMf.setSubmittedValue(0);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioOnTop);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioTotal);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgMf);
                AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioMf);
            }
        } else {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoBonusId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }
            DCIteratorBinding dciterPromoProduk =
                ADFUtils.findIterator("PromoProdukView1Iterator");
            Row r = dciterPromoProduk.getCurrentRow();
            DCIteratorBinding dciterPromoBrg =
                ADFUtils.findIterator("PromoBonusView1Iterator");
            BigDecimal totalMf = BigDecimal.ZERO;
            BigDecimal totalOntop = BigDecimal.ZERO;
            for (Row er : dciterPromoBrg.getAllRowsInRange()) {
                String valueMF =
                    er.getAttribute("DiscYearly") == null ? "0" : er.getAttribute("DiscYearly") ==
                                                                  "" ? "0" :
                                                                  er.getAttribute("DiscYearly").toString().replaceAll(",",
                                                                                                                      "");
                String valueTop =
                    er.getAttribute("DiscNonYearly") == null ? "0" :
                    er.getAttribute("DiscNonYearly") == "" ? "0" :
                    er.getAttribute("DiscNonYearly").toString().replaceAll(",",
                                                                           "");
                BigDecimal ontopValue =
                    new BigDecimal(valueTop) == null ? new BigDecimal(0) :
                    new BigDecimal(valueTop);
                BigDecimal mfValue =
                    new BigDecimal(valueMF) == null ? new BigDecimal(0) :
                    new BigDecimal(valueMF);
                totalMf = totalMf.add(mfValue);
                totalOntop = totalOntop.add(ontopValue);
            }
            DCIteratorBinding dciterTarget =
                ADFUtils.findIterator("TargetView1Iterator");
            Row row = dciterTarget.getCurrentRow();
            BigDecimal mf = BigDecimal.ZERO;
            BigDecimal rMf = BigDecimal.ZERO;
            BigDecimal RasioMf = BigDecimal.ZERO;
            BigDecimal rasioTotal = BigDecimal.ZERO;
            BigDecimal rasioT = BigDecimal.ZERO;
            BigDecimal ontop = BigDecimal.ZERO;
            BigDecimal rOntop = BigDecimal.ZERO;
            BigDecimal RasioOntop = BigDecimal.ZERO;
            Number qty =
                (Number)row.getAttribute("Qty") == null ? new Number(0) :
                (Number)row.getAttribute("Qty");
            Number value =
                (Number)row.getAttribute("Value") == null ? new Number(0) :
                (Number)row.getAttribute("Value");
            rMf = totalMf;
            mf =
 (value.multiply(rMf)).getBigDecimalValue().divide(bdHundred).setScale(2,
                                                                       RoundingMode.HALF_UP);
            otBrgMf.setSubmittedValue(rMf);
            RasioMf =
                    rMf.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                RoundingMode.HALF_UP);
            String rasMf = RasioMf.toString();
            otBrgRasioMf.setSubmittedValue(rasMf);
            rasioT =
                    new BigDecimal(otBrgRasioOnTop.getValue().toString().replaceAll(" ",
                                                                                    "").replaceAll("%",
                                                                                                   ""));
            rasioTotal = RasioMf.add(rasioT);
            String Total = rasioTotal.toString();
            otBrgRasioTotal.setSubmittedValue(Total);

            rOntop = totalOntop;
            String rasio =
                otBrgRasioMf.getValue() == "" ? "0" : otBrgRasioMf.getValue() ==
                                                      null ? "0" :
                                                      otBrgRasioMf.getValue().toString();
            rasioT =
                    new BigDecimal(rasio.toString().replaceAll(" ", "").replaceAll("%",
                                                                                   ""));
            ontop =
                    rOntop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                   RoundingMode.HALF_UP);

            otBrgOnTop.setSubmittedValue(totalOntop);
            RasioOntop =
                    rOntop.divide(value.getBigDecimalValue(), MathContext.DECIMAL128).multiply(bdHundred).setScale(2,
                                                                                                                   RoundingMode.HALF_UP);
            String rasOntop = RasioOntop.toString();
            otBrgRasioOnTop.setSubmittedValue(rasOntop);

            r.setAttribute("BrgBonusOnTop", totalOntop);
            r.setAttribute("BrgBonusRasioOnTop", ontop);
            r.setAttribute("BrgBonusMf", rMf);
            r.setAttribute("BrgBonusRasioMf", rasMf);
            r.setAttribute("BrgBonusRasioTotal", Total);

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgOnTop);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioOnTop);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioTotal);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgMf);
            AdfFacesContext.getCurrentInstance().addPartialTarget(otBrgRasioMf);
        }
    }

    public void addCustUserHo(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        boolean canCreateNew = true;
        DCIteratorBinding dciterCustArea =
            (DCIteratorBinding)bindings.get("PromoCustomerHoView1Iterator");
        for (Row custAreaRow : dciterCustArea.getAllRowsInRange()) {
            String rowStatus = (String)custAreaRow.getAttribute("RowStatus");
            if (rowStatus.equalsIgnoreCase("N")) {
                canCreateNew = false;
            }
        }

        if (canCreateNew) {
            String PromoProdukIdSel = "";
            DCBindingContainer bindingsSelRow =
                (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
            DCIteratorBinding iterProduk =
                bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
            ViewObject voTableData = iterProduk.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoProdukId") != null) {
                PromoProdukIdSel =
                        rowSelected.getAttribute("PromoProdukId").toString();
            }

            DCIteratorBinding dciter =
                (DCIteratorBinding)bindings.get("PromoCustomerHoView1Iterator");
            RowSetIterator rsi = dciter.getRowSetIterator();
            Row lastRow = rsi.last();

            int lastRowIndex = rsi.getRangeIndexOf(lastRow);
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            newRow.setAttribute("PromoProdukId", PromoProdukIdSel);
            //add row to last index + 1 so it becomes last in the range set
            rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
            //make row the current row so it is displayed correctly
            rsi.setCurrentRow(newRow);
            dciter.getDataControl().commitTransaction();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
        } else {
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>Data customer ada yang belum selesai dilengkapi.</p>");
            message.append("<p>Proses penambahan customer baru tidak dapat dilanjutkan.</p>");
            message.append("</body></html>");
            JSFUtils.addFacesWarningMessage(message.toString());
        }
    }

    public void remCustUserHo(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("PromoCustomerHoView1Iterator");
        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoCustomerId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }
        } else {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoCustomerId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
        }

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void custHoRegionRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer region description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("RegionLabel");

        // Set customer region description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustHo =
            binding.findIteratorBinding("PromoCustomerHoView1Iterator");
        ViewObject voCustHo = iterCustHo.getViewObject();
        Row rowSelected = voCustHo.getCurrentRow();
        rowSelected.setAttribute("RegionDesc", rwDesc);
        rowSelected.setAttribute("CustRegFlg", propRegion);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustHo.executeQuery();
        iterCustHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void custHoAreaRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";

        // Get customer area description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("AreaLabel");
        String areaCode = (String)rw.getAttribute("AreaCode");

        // Set customer area description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustHo =
            binding.findIteratorBinding("PromoCustomerHoView1Iterator");
        ViewObject voCustHo = iterCustHo.getViewObject();
        Row rowSelected = voCustHo.getCurrentRow();

        // Find parent by area
        CustAreaFindParentViewImpl parentArea =
            promoProposalAM.getCustAreaFindParentView1();
        parentArea.setNamedWhereClauseParam("areaCode", areaCode);
        parentArea.executeQuery();
        if (parentArea.getEstimatedRowCount() > 0) {
            CustAreaFindParentViewRowImpl parentLocRow =
                (CustAreaFindParentViewRowImpl)parentArea.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
        }
        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);

        rowSelected.setAttribute("AreaDesc", rwDesc);
        rowSelected.setAttribute("CustRegFlg", prodArea);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustHo.executeQuery();
        iterCustHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void custHoLocRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";
        String areaCode = "";
        String areaDesc = "";

        // Get customer location description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("LocLabel");
        String locCode = (String)rw.getAttribute("LocCode");

        // Set customer location description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustHo =
            binding.findIteratorBinding("PromoCustomerHoView1Iterator");
        ViewObject voCustHo = iterCustHo.getViewObject();
        Row rowSelected = voCustHo.getCurrentRow();

        // Find parent by location
        CustLocFindParentViewImpl parentLoc =
            promoProposalAM.getCustLocFindParentView1();
        parentLoc.setNamedWhereClauseParam("locCode", locCode);
        parentLoc.executeQuery();
        if (parentLoc.getEstimatedRowCount() > 0) {
            CustLocFindParentViewRowImpl parentLocRow =
                (CustLocFindParentViewRowImpl)parentLoc.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
            areaCode = parentLocRow.getAreaCode();
            areaDesc = parentLocRow.getAreaDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
            areaCode = "";
            areaDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaCode", areaCode);
        rowSelected.setAttribute("AreaDesc", areaDesc);
        rowSelected.setAttribute("LocDesc", rwDesc);
        rowSelected.setAttribute("CustRegFlg", prodLocation);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustHo.executeQuery();
        iterCustHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void custHoTypeRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer type description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustTypeLabel");

        // Set customer customer type description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustHo =
            binding.findIteratorBinding("PromoCustomerHoView1Iterator");
        ViewObject voCustHo = iterCustHo.getViewObject();
        Row rowSelected = voCustHo.getCurrentRow();
        String custType = (String)rowSelected.getAttribute("CusttypDesc");
        rowSelected.setAttribute("CusttypDesc", rwDesc);
        rowSelected.setAttribute("CustNregFlg", prodCustType);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustHo.executeQuery();
        iterCustHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void custHoGroupRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer group description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustGroupLabel");

        // Set customer customer group description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustHo =
            binding.findIteratorBinding("PromoCustomerHoView1Iterator");
        ViewObject voCustHo = iterCustHo.getViewObject();
        Row rowSelected = voCustHo.getCurrentRow();
        String custGroup = (String)rowSelected.getAttribute("CustgrpDesc");
        rowSelected.setAttribute("CustgrpDesc", rwDesc);
        rowSelected.setAttribute("CustNregFlg", prodCustGroup);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustHo.executeQuery();
        iterCustHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void custHoDetailRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer detail description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustomerFullName");
        String custNum = (String)rw.getAttribute("CustomerNumber");

        // Set customer customer detail description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustHo =
            binding.findIteratorBinding("PromoCustomerHoView1Iterator");
        ViewObject voCustHo = iterCustHo.getViewObject();
        Row rowSelected = voCustHo.getCurrentRow();
        rowSelected.setAttribute("CustomerName", rwDesc);
        rowSelected.setAttribute("CustomerNumber", custNum);
        rowSelected.setAttribute("CustNregFlg", prodCustomer);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustHo.executeQuery();
        iterCustHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustHo);
    }

    public void addCustUserArea(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        boolean canCreateNew = true;
        DCIteratorBinding dciterCustArea =
            (DCIteratorBinding)bindings.get("PromoCustomerAreaView1Iterator");
        for (Row custAreaRow : dciterCustArea.getAllRowsInRange()) {
            String rowStatus = (String)custAreaRow.getAttribute("RowStatus");
            if (rowStatus.equalsIgnoreCase("N")) {
                canCreateNew = false;
            }
        }

        if (canCreateNew) {
            String ProposalIdSel = "";
            DCBindingContainer bindingsSelRow =
                (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
            DCIteratorBinding iterProduk =
                bindingsSelRow.findIteratorBinding("ProposalView1Iterator");
            ViewObject voTableData = iterProduk.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("ProposalId") != null) {
                ProposalIdSel =
                        rowSelected.getAttribute("ProposalId").toString();
            }

            DCIteratorBinding dciter =
                (DCIteratorBinding)bindings.get("PromoCustomerAreaView1Iterator");
            RowSetIterator rsi = dciter.getRowSetIterator();
            Row lastRow = rsi.last();

            int lastRowIndex = rsi.getRangeIndexOf(lastRow);
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            newRow.setAttribute("ProposalId", ProposalIdSel);
            //add row to last index + 1 so it becomes last in the range set
            rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
            //make row the current row so it is displayed correctly
            rsi.setCurrentRow(newRow);
            dciter.getDataControl().commitTransaction();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
            AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
        } else {
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>Data customer ada yang belum selesai dilengkapi.</p>");
            message.append("<p>Proses penambahan customer baru tidak dapat dilanjutkan.</p>");
            message.append("</body></html>");
            JSFUtils.addFacesWarningMessage(message.toString());
        }
    }

    public void remCustUserArea(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("PromoCustomerAreaView1Iterator");
        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("ProposalId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }
        } else {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("ProposalId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
        }

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void custAreaRegionRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer region description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("RegionLabel");

        // Set customer region description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustArea =
            binding.findIteratorBinding("PromoCustomerAreaView1Iterator");
        ViewObject voCustArea = iterCustArea.getViewObject();
        Row rowSelected = voCustArea.getCurrentRow();
        rowSelected.setAttribute("RegionDesc", rwDesc);
        rowSelected.setAttribute("CustRegFlg", propRegion);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustArea.executeQuery();
        iterCustArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void custAreaAreaRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";

        // Get customer area description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("AreaLabel");
        String areaCode = (String)rw.getAttribute("AreaCode");

        // Set customer area description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustArea =
            binding.findIteratorBinding("PromoCustomerAreaView1Iterator");
        ViewObject voCustArea = iterCustArea.getViewObject();
        Row rowSelected = voCustArea.getCurrentRow();

        // Find parent by area
        CustAreaFindParentViewImpl parentArea =
            promoProposalAM.getCustAreaFindParentView1();
        parentArea.setNamedWhereClauseParam("areaCode", areaCode);
        parentArea.executeQuery();
        if (parentArea.getEstimatedRowCount() > 0) {
            CustAreaFindParentViewRowImpl parentLocRow =
                (CustAreaFindParentViewRowImpl)parentArea.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaDesc", rwDesc);
        rowSelected.setAttribute("CustRegFlg", propArea);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustArea.executeQuery();
        iterCustArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void custAreaLocRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";
        String areaCode = "";
        String areaDesc = "";

        // Get customer location description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("LocLabel");
        String locCode = (String)rw.getAttribute("LocCode");

        // Set customer location description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustArea =
            binding.findIteratorBinding("PromoCustomerAreaView1Iterator");
        ViewObject voCustArea = iterCustArea.getViewObject();
        Row rowSelected = voCustArea.getCurrentRow();

        // Find parent by location
        CustLocFindParentViewImpl parentLoc =
            promoProposalAM.getCustLocFindParentView1();
        parentLoc.setNamedWhereClauseParam("locCode", locCode);
        parentLoc.executeQuery();
        if (parentLoc.getEstimatedRowCount() > 0) {
            CustLocFindParentViewRowImpl parentLocRow =
                (CustLocFindParentViewRowImpl)parentLoc.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
            areaCode = parentLocRow.getAreaCode();
            areaDesc = parentLocRow.getAreaDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
            areaCode = "";
            areaDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaCode", areaCode);
        rowSelected.setAttribute("AreaDesc", areaDesc);
        rowSelected.setAttribute("LocDesc", rwDesc);
        rowSelected.setAttribute("CustRegFlg", propLocation);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustArea.executeQuery();
        iterCustArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void custAreaTypeRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer type description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustTypeLabel");

        // Set customer customer type description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustArea =
            binding.findIteratorBinding("PromoCustomerAreaView1Iterator");
        ViewObject voCustArea = iterCustArea.getViewObject();
        Row rowSelected = voCustArea.getCurrentRow();
        rowSelected.setAttribute("CusttypDesc", rwDesc);
        rowSelected.setAttribute("CustNregFlg", propCustType);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustArea.executeQuery();
        iterCustArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void custAreaGroupRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer group description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustGroupLabel");

        // Set customer customer group description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustArea =
            binding.findIteratorBinding("PromoCustomerAreaView1Iterator");
        ViewObject voCustArea = iterCustArea.getViewObject();
        Row rowSelected = voCustArea.getCurrentRow();
        rowSelected.setAttribute("CustgrpDesc", rwDesc);
        rowSelected.setAttribute("CustNregFlg", propCustGroup);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustArea.executeQuery();
        iterCustArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void custAreaDetailRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer detail description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustomerFullName");
        String rwCustNum = (String)rw.getAttribute("CustomerNumber");

        // Set customer customer detail description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustArea =
            binding.findIteratorBinding("PromoCustomerAreaView1Iterator");
        ViewObject voCustArea = iterCustArea.getViewObject();
        Row rowSelected = voCustArea.getCurrentRow();
        rowSelected.setAttribute("CustomerName", rwDesc);
        rowSelected.setAttribute("CustomerNumber", rwCustNum);
        rowSelected.setAttribute("CustNregFlg", propCustomer);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustArea.executeQuery();
        iterCustArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustArea);
    }

    public void addCustExclUserHo(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        boolean canCreateNew = true;
        DCIteratorBinding dciterCustArea =
            (DCIteratorBinding)bindings.get("PromoCustxHoView1Iterator");
        for (Row custAreaRow : dciterCustArea.getAllRowsInRange()) {
            String rowStatus = (String)custAreaRow.getAttribute("RowStatus");
            if (rowStatus.equalsIgnoreCase("N")) {
                canCreateNew = false;
            }
        }

        if (canCreateNew) {
            String PromoProdukIdSel = "";
            DCBindingContainer bindingsSelRow =
                (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
            DCIteratorBinding iterProduk =
                bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
            ViewObject voTableData = iterProduk.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoProdukId") != null) {
                PromoProdukIdSel =
                        rowSelected.getAttribute("PromoProdukId").toString();
            }

            DCIteratorBinding dciter =
                (DCIteratorBinding)bindings.get("PromoCustxHoView1Iterator");
            RowSetIterator rsi = dciter.getRowSetIterator();
            Row lastRow = rsi.last();

            int lastRowIndex = rsi.getRangeIndexOf(lastRow);
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            newRow.setAttribute("PromoProdukId", PromoProdukIdSel);
            //add row to last index + 1 so it becomes last in the range set
            rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
            //make row the current row so it is displayed correctly
            rsi.setCurrentRow(newRow);
            dciter.getDataControl().commitTransaction();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
        } else {
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>Data exclude customer ada yang belum selesai dilengkapi.</p>");
            message.append("<p>Proses penambahan exclude customer baru tidak dapat dilanjutkan.</p>");
            message.append("</body></html>");
            JSFUtils.addFacesWarningMessage(message.toString());
        }
    }

    public void remCustExclUserHo(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("PromoCustxHoView1Iterator");
        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoCustxHoId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }
        } else {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoCustxHoId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
        }

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void custExclHoRegionRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer region description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("RegionLabel");

        // Set customer region description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclHo =
            binding.findIteratorBinding("PromoCustxHoView1Iterator");
        ViewObject voCustExclHo = iterCustExclHo.getViewObject();
        Row rowSelected = voCustExclHo.getCurrentRow();
        rowSelected.setAttribute("RegionDesc", rwDesc);
        rowSelected.setAttribute("CustxRegFlg", propRegion);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclHo.executeQuery();
        iterCustExclHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void custExclHoAreaRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";

        // Get customer area description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("AreaLabel");
        String areaCode = (String)rw.getAttribute("AreaCode");

        // Set customer area description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclHo =
            binding.findIteratorBinding("PromoCustxHoView1Iterator");
        ViewObject voCustExclHo = iterCustExclHo.getViewObject();
        Row rowSelected = voCustExclHo.getCurrentRow();

        // Find parent by area
        CustAreaFindParentViewImpl parentArea =
            promoProposalAM.getCustAreaFindParentView1();
        parentArea.setNamedWhereClauseParam("areaCode", areaCode);
        parentArea.executeQuery();
        if (parentArea.getEstimatedRowCount() > 0) {
            CustAreaFindParentViewRowImpl parentLocRow =
                (CustAreaFindParentViewRowImpl)parentArea.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaDesc", rwDesc);
        rowSelected.setAttribute("CustxRegFlg", prodArea);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclHo.executeQuery();
        iterCustExclHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void custExclHoLocRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";
        String areaCode = "";
        String areaDesc = "";

        // Get customer location description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("LocLabel");
        String locCode = (String)rw.getAttribute("LocCode");

        // Set customer location description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclHo =
            binding.findIteratorBinding("PromoCustxHoView1Iterator");
        ViewObject voCustExclHo = iterCustExclHo.getViewObject();
        Row rowSelected = voCustExclHo.getCurrentRow();

        // Find parent by location
        CustLocFindParentViewImpl parentLoc =
            promoProposalAM.getCustLocFindParentView1();
        parentLoc.setNamedWhereClauseParam("locCode", locCode);
        parentLoc.executeQuery();
        if (parentLoc.getEstimatedRowCount() > 0) {
            CustLocFindParentViewRowImpl parentLocRow =
                (CustLocFindParentViewRowImpl)parentLoc.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
            areaCode = parentLocRow.getAreaCode();
            areaDesc = parentLocRow.getAreaDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
            areaCode = "";
            areaDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaCode", areaCode);
        rowSelected.setAttribute("AreaDesc", areaDesc);
        rowSelected.setAttribute("LocDesc", rwDesc);
        rowSelected.setAttribute("CustxRegFlg", prodLocation);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclHo.executeQuery();
        iterCustExclHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void custExclHoTypeRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer type description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustTypeLabel");

        // Set customer customer type description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclHo =
            binding.findIteratorBinding("PromoCustxHoView1Iterator");
        ViewObject voCustExclHo = iterCustExclHo.getViewObject();
        Row rowSelected = voCustExclHo.getCurrentRow();
        String custType = (String)rowSelected.getAttribute("CusttypDesc");
        rowSelected.setAttribute("CusttypDesc", rwDesc);
        rowSelected.setAttribute("CustxNregFlg", prodCustType);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclHo.executeQuery();
        iterCustExclHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void custExclHoGroupRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer group description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustGroupLabel");

        // Set customer customer group description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclHo =
            binding.findIteratorBinding("PromoCustxHoView1Iterator");
        ViewObject voCustExclHo = iterCustExclHo.getViewObject();
        Row rowSelected = voCustExclHo.getCurrentRow();
        String custGroup = (String)rowSelected.getAttribute("CustgrpDesc");
        rowSelected.setAttribute("CustgrpDesc", rwDesc);
        rowSelected.setAttribute("CustxNregFlg", prodCustGroup);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclHo.executeQuery();
        iterCustExclHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void custExclHoDetailRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer detail description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustomerFullName");
        String custNum = (String)rw.getAttribute("CustomerNumber");

        // Set customer customer detail description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclHo =
            binding.findIteratorBinding("PromoCustxHoView1Iterator");
        ViewObject voCustExclHo = iterCustExclHo.getViewObject();
        Row rowSelected = voCustExclHo.getCurrentRow();
        rowSelected.setAttribute("CustomerName", rwDesc);
        rowSelected.setAttribute("CustomerNumber", custNum);
        rowSelected.setAttribute("CustxNregFlg", prodCustomer);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclHo.executeQuery();
        iterCustExclHo.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxHo);
    }

    public void addCustExclUserArea(ActionEvent actionEvent) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        boolean canCreateNew = true;
        DCIteratorBinding dciterCustArea =
            (DCIteratorBinding)bindings.get("PromoCustxAreaView1Iterator");
        for (Row custAreaRow : dciterCustArea.getAllRowsInRange()) {
            String rowStatus = (String)custAreaRow.getAttribute("RowStatus");
            if (rowStatus.equalsIgnoreCase("N")) {
                canCreateNew = false;
            }
        }

        if (canCreateNew) {

            String PromoProdukIdSel = "";
            DCBindingContainer bindingsSelRow =
                (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
            DCIteratorBinding iterProduk =
                bindingsSelRow.findIteratorBinding("PromoProdukView1Iterator");
            ViewObject voTableData = iterProduk.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoProdukId") != null) {
                PromoProdukIdSel =
                        rowSelected.getAttribute("PromoProdukId").toString();
            }

            DCIteratorBinding dciter =
                (DCIteratorBinding)bindings.get("PromoCustxAreaView1Iterator");
            RowSetIterator rsi = dciter.getRowSetIterator();
            Row lastRow = rsi.last();

            int lastRowIndex = rsi.getRangeIndexOf(lastRow);
            Row newRow = rsi.createRow();
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            newRow.setAttribute("PromoProdukId", PromoProdukIdSel);
            //add row to last index + 1 so it becomes last in the range set
            rsi.insertRowAtRangeIndex(lastRowIndex + 1, newRow);
            //make row the current row so it is displayed correctly
            rsi.setCurrentRow(newRow);
            dciter.getDataControl().commitTransaction();
            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();

            AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
        } else {
            StringBuilder message = new StringBuilder("<html><body>");
            message.append("<p>Data exclude customer ada yang belum selesai dilengkapi.</p>");
            message.append("<p>Proses penambahan exclude customer baru tidak dapat dilanjutkan.</p>");
            message.append("</body></html>");
            JSFUtils.addFacesWarningMessage(message.toString());
        }
    }

    public void remCustExclUserArea(ActionEvent actionEvent) {
        DCBindingContainer bindings =
            (DCBindingContainer)BindingContext.getCurrent().getCurrentBindingsEntry();
        DCIteratorBinding dcItteratorBindings =
            bindings.findIteratorBinding("PromoCustxAreaView1Iterator");
        if (dcItteratorBindings.getEstimatedRowCount() == 1) {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoCustxAreaId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }
        } else {
            ViewObject voTableData = dcItteratorBindings.getViewObject();
            Row rowSelected = voTableData.getCurrentRow();
            if (rowSelected.getAttribute("PromoCustxAreaId") != null) {
                voTableData.removeCurrentRow();
                OperationBinding operation =
                    (OperationBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("Commit");
                operation.execute();
            }

            OperationBinding operationBinding =
                bindings.getOperationBinding("Commit");
            operationBinding.execute();
        }

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void CustExclAreaRegionRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer region description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("RegionLabel");

        // Set customer region description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclArea =
            binding.findIteratorBinding("PromoCustxAreaView1Iterator");
        ViewObject voCustExclArea = iterCustExclArea.getViewObject();
        Row rowSelected = voCustExclArea.getCurrentRow();
        String custRegion = (String)rowSelected.getAttribute("RegionDesc");
        rowSelected.setAttribute("RegionDesc", rwDesc);
        rowSelected.setAttribute("CustxRegFlg", propRegion);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclArea.executeQuery();
        iterCustExclArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void CustExclAreaAreaRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";

        // Get customer area description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("AreaLabel");
        String areaCode = (String)rw.getAttribute("AreaCode");

        // Set customer area description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclArea =
            binding.findIteratorBinding("PromoCustxAreaView1Iterator");
        ViewObject voCustExclArea = iterCustExclArea.getViewObject();
        Row rowSelected = voCustExclArea.getCurrentRow();

        // Find parent by area
        CustAreaFindParentViewImpl parentArea =
            promoProposalAM.getCustAreaFindParentView1();
        parentArea.setNamedWhereClauseParam("areaCode", areaCode);
        parentArea.executeQuery();
        if (parentArea.getEstimatedRowCount() > 0) {
            CustAreaFindParentViewRowImpl parentLocRow =
                (CustAreaFindParentViewRowImpl)parentArea.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaDesc", rwDesc);
        rowSelected.setAttribute("CustxRegFlg", propArea);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclArea.executeQuery();
        iterCustExclArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void CustExclAreaLocRPL(ReturnPopupEvent returnPopupEvent) {
        String regionCode = "";
        String regionDesc = "";
        String areaCode = "";
        String areaDesc = "";

        // Get customer location description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("LocLabel");
        String locCode = (String)rw.getAttribute("LocCode");

        // Set customer location description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclArea =
            binding.findIteratorBinding("PromoCustxAreaView1Iterator");
        ViewObject voCustExclArea = iterCustExclArea.getViewObject();
        Row rowSelected = voCustExclArea.getCurrentRow();

        // Find parent by location
        CustLocFindParentViewImpl parentLoc =
            promoProposalAM.getCustLocFindParentView1();
        parentLoc.setNamedWhereClauseParam("locCode", locCode);
        parentLoc.executeQuery();
        if (parentLoc.getEstimatedRowCount() > 0) {
            CustLocFindParentViewRowImpl parentLocRow =
                (CustLocFindParentViewRowImpl)parentLoc.first();
            regionCode = parentLocRow.getRegionCode();
            regionDesc = parentLocRow.getRegionDesc();
            areaCode = parentLocRow.getAreaCode();
            areaDesc = parentLocRow.getAreaDesc();
        } else {
            regionCode = "";
            regionDesc = custParentNotFound;
            areaCode = "";
            areaDesc = custParentNotFound;
        }

        rowSelected.setAttribute("RegionCode", regionCode);
        rowSelected.setAttribute("RegionDesc", regionDesc);
        rowSelected.setAttribute("AreaCode", areaCode);
        rowSelected.setAttribute("AreaDesc", areaDesc);
        rowSelected.setAttribute("LocDesc", rwDesc);
        rowSelected.setAttribute("CustxRegFlg", propLocation);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclArea.executeQuery();
        iterCustExclArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void CustExclAreaTypeRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer type description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustTypeLabel");

        // Set customer customer type description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclArea =
            binding.findIteratorBinding("PromoCustxAreaView1Iterator");
        ViewObject voCustExclArea = iterCustExclArea.getViewObject();
        Row rowSelected = voCustExclArea.getCurrentRow();
        String custType = (String)rowSelected.getAttribute("CusttypDesc");
        rowSelected.setAttribute("CusttypDesc", rwDesc);
        rowSelected.setAttribute("CustxNregFlg", propCustType);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclArea.executeQuery();
        iterCustExclArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void CustExclAreaGroupRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer group description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustGroupLabel");

        // Set customer customer group description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclArea =
            binding.findIteratorBinding("PromoCustxAreaView1Iterator");
        ViewObject voCustExclArea = iterCustExclArea.getViewObject();
        Row rowSelected = voCustExclArea.getCurrentRow();
        String custGroup = (String)rowSelected.getAttribute("CustgrpDesc");
        rowSelected.setAttribute("CustgrpDesc", rwDesc);
        rowSelected.setAttribute("CustxNregFlg", propCustGroup);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclArea.executeQuery();
        iterCustExclArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void CustExclAreaDetailRPL(ReturnPopupEvent returnPopupEvent) {
        // Get customer detail description
        RichInputListOfValues lovField =
            (RichInputListOfValues)returnPopupEvent.getSource();
        ListOfValuesModel lovModel = lovField.getModel();
        CollectionModel collectionModel =
            lovModel.getTableModel().getCollectionModel();
        JUCtrlHierBinding treeBinding =
            (JUCtrlHierBinding)collectionModel.getWrappedData();
        RowKeySet rks = (RowKeySet)returnPopupEvent.getReturnValue();
        List tableRowKey = (List)rks.iterator().next();
        DCIteratorBinding dciter = treeBinding.getDCIteratorBinding();
        Key key = (Key)tableRowKey.get(0);
        Row rw = dciter.findRowByKeyString(key.toStringFormat(true));
        String rwDesc = (String)rw.getAttribute("CustomerFullName");
        String custNum = (String)rw.getAttribute("CustomerNumber");

        // Set customer customer detail description
        BindingContext bctx = BindingContext.getCurrent();
        DCBindingContainer binding =
            (DCBindingContainer)bctx.getCurrentBindingsEntry();
        DCIteratorBinding iterCustExclArea =
            binding.findIteratorBinding("PromoCustxAreaView1Iterator");
        ViewObject voCustExclArea = iterCustExclArea.getViewObject();
        Row rowSelected = voCustExclArea.getCurrentRow();
        rowSelected.setAttribute("CustomerName", rwDesc);
        rowSelected.setAttribute("CustomerNumber", custNum);
        rowSelected.setAttribute("CustxNregFlg", propCustomer);

        BindingContainer bindings = getBindings();
        OperationBinding operationBinding =
            bindings.getOperationBinding("Commit");
        operationBinding.execute();

        iterCustExclArea.executeQuery();
        iterCustExclArea.setCurrentRowWithKey(rowSelected.getKey().toStringFormat(true));

        AdfFacesContext.getCurrentInstance().addPartialTarget(tblPromoCustxArea);
    }

    public void setTblPromoCustxArea(RichTable tblPromoCustxArea) {
        this.tblPromoCustxArea = tblPromoCustxArea;
    }

    public RichTable getTblPromoCustxArea() {
        return tblPromoCustxArea;
    }

    public void setTblPromoCustxHo(RichTable tblPromoCustxHo) {
        this.tblPromoCustxHo = tblPromoCustxHo;
    }

    public RichTable getTblPromoCustxHo() {
        return tblPromoCustxHo;
    }

    public void setTblPromoCustArea(RichTable tblPromoCustArea) {
        this.tblPromoCustArea = tblPromoCustArea;
    }

    public RichTable getTblPromoCustArea() {
        return tblPromoCustArea;
    }

    public void setTblPromoCustHo(RichTable tblPromoCustHo) {
        this.tblPromoCustHo = tblPromoCustHo;
    }

    public RichTable getTblPromoCustHo() {
        return tblPromoCustHo;
    }

    public void setListPromoCustomerArea(List<ListPromoCustomerArea> listPromoCustomerArea) {
        this.listPromoCustomerArea = listPromoCustomerArea;
    }

    public List<ListPromoCustomerArea> getListPromoCustomerArea() {
        return listPromoCustomerArea;
    }

    public void setListPromoCustomerHo(List<ListPromoCustomerHO> listPromoCustomerHo) {
        this.listPromoCustomerHo = listPromoCustomerHo;
    }

    public List<ListPromoCustomerHO> getListPromoCustomerHo() {
        return listPromoCustomerHo;
    }
}
